#library "D4UPGRAD"
#include "zcommon.acs"

//global bool 1:died;
//global bool 2:notanewgame;

//	Upgrade System
//	Developed by Major Cooke

//==============================================================================
//==============================================================================
// Upgrade System Keybinds
//==============================================================================
//==============================================================================
Script "RestoreMusicVolume" UNLOADING
{
	SetMusicVolume(1.0);
}
/*
Script "GameModeSwitch" ENTER
{
	
	if (!notanewgame)
	{
		SetCvar("D4D_CurrentUpgradeMode",GetCvar("D4D_UpgradeMode"));
		upgradeMode = GetCvar("D4D_UpgradeMode");
	}
	notanewgame = true;
	
	SetCvar("D4D_CurrentUpgradeMode",upgradeMode);
}
*/
str weapon;

Script "D4RestoreWeapon" ENTER
{
	SetMusicVolume(1.0);
	SetPlayerProperty(0,0,PROP_FROZEN);
	SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
	TakeInventory("D4DoomDollHands",32767);
	TakeInventory("D4UpgradeHand",32767);
	SetWeapon(weapon);
}

Script "D4DoomDoll" (void) net
{
	if (!CheckInventory("DollUses") || CheckInventory("D4DoomDollHands") || CheckInventory("D4DoomDollPlaying") ||
		GetActorProperty(0,APROP_Health) <= 0)
		Terminate;
	if (!CheckInventory("D4DoomDollHands"))
	{
		weapon = GetWeapon();
		GiveInventory("D4DoomDollPlaying",1);
		GiveInventory("D4DoomDollHands",1);
		GiveInventory("DollProtection",1);
		SetWeapon("D4DoomDollHands");
	}
	//PlaySound("Doom4/Other/GlimpseIntoTheFuture",7,1.0);
	AmbientSound("Doom4/Other/GlimpseIntoTheFuture",127);
	int t = 1.0;
	while (t > 0.1)
	{
		t -= 0.1;
		SetMusicVolume(t);
		Delay(1);
	}
	delay(166);	//when the animation ends
	TakeInventory("D4DoomDollHands",32767);	//take the doll
	SetWeapon(weapon);
	delay(96);	//waits until music ends
	TakeInventory("D4DoomDollPlaying",32767);
	while (t < 1.0)
	{
		t += 0.1;
		SetMusicVolume(t);
		Delay(1);
	}
	SetMusicVolume(1.0);
	//setmusic("*");
}

Script "D4ToggleSoviet" (void) net
{
	if (!stricmp(GetWeapon(),"D4Chaingun"))
	{
		if (CheckInventory("SovietToken"))
		{
			if (CheckInventory("SovietActive"))
			{
				TakeInventory("SovietActive",32767);
				Log(s:"Disabled");
			}
			else
			{
				GiveInventory("SovietActive",1);
				Log(s:"Enabled");
			}
		}
		else
		{
			Log(s:"You don't have the upgrade.");
		}
	}
}

//==============================================================================
//==============================================================================
// Cash Display Handler
//==============================================================================
//==============================================================================
/*
Script "ShowCash" OPEN
{
	SetActivator(0,AAPTR_PLAYER1);
	If (GameType() == GAME_TITLE_MAP) Terminate; //if we're on titlemap, dont display anything
	TakeInventory("D4DCashFake",5000000);
	SetFont("Q4SMALLERHUDFONT");
	//HudMessage(s:"Credits";HUDMSG_PLAIN,		999,CR_GRAY,0.98,0.00,0);
	int counter = 0;
	while (1)
	{
		UpdateMsg(0);
		Delay(17);
	}
}

Script "ShowResistance" OPEN
{
	SetActivator(0,AAPTR_PLAYER1);
	if (GameType() == GAME_TITLE_MAP || 
		!CheckInventory("D4MegachargeUpgrade1") ||
		!CheckInventory("D4MegasphereDamageReducer")) Terminate;
	
	//SetFont("CONFONT");
	//HudMessage(s:"Resistance";HUDMSG_PLAIN,		1102,CR_GRAY,0.98,0.07,0);
	int a = CheckInventory("D4MegasphereDamageReducer");
	//SetFont("Q4SMALLERHUDFONT");
	//HudMessage(d:a;HUDMSG_PLAIN,			1101,CR_WHITE,0.96,0.100,0);
}
*/
Function int UpdateCash (int fromCvar)
{
	int gettercvar = GetCvar("D4DCash");
	int getterinv = CheckInventory("D4DCash");
	int res = 0;
	if (fromCvar == 1)
	{
		if (gettercvar != getterinv)
		{
			TakeInventory("D4DCash", getterinv);
			GiveInventory("D4DCash", gettercvar);
		}
		res = gettercvar;
	}
	else
	{
		SetCvar("D4DCash",getterinv);
		res = getterinv;
	}
		
	return res;
}

Function int UpdateMsg (int fromCvar)
{
	int amt = UpdateCash(fromCvar);
	//SetFont("Q4SMALLERHUDFONT");
	//HudMessage(d:amt;HUDMSG_PLAIN,		1000,CR_WHITE,0.96,0.03,0);
	return amt;
}

Script "UpdateCashEnter" OPEN
{
	SetActivator(0,AAPTR_PLAYER1);
	int amt = UpdateCash(0);
	UpdateMsg(amt);
}

Script "UpdateCashScript" (int fromCvar, int upMessage)
{
	SetActivator(0,AAPTR_PLAYER1);
	int amt = 0;
	if (upMessage)	
		amt = UpdateMsg(fromCvar);
	else
		amt = UpdateCash(fromCvar);
	SetResultValue(amt);
}

Script "CashDisplay" (int negative, int notears)
{
	bool KeepOn = false;
	int inittime = 105;
	int time = inittime;
	int counter1 = UpdateMsg(0);
	int counter2 = 0;
	//SetHudSize(1024,768,0);
	
	while (time > 0)
	{
		
		if (CheckInventory("D4DCashFake") > 0 || KeepOn)
		{
			int plr = PlayerNumber();
			if (CheckInventory("SovietToken") && 
				CheckInventory("SovietActive") &&
				!stricmp(GetWeapon(),"D4Chaingun") && 
				!(GetPlayerInput(plr,MODINPUT_BUTTONS) & BT_ALTATTACK) &&
				(GetPlayerInput(plr,MODINPUT_BUTTONS) & BT_ATTACK))
			{
				KeepOn = true;
			}
			else
				KeepOn = false;
				
			time = inittime;
			counter1 = UpdateCash(0);
			counter2 = counter2 + CheckInventory("D4DCashFake");
			
			//SetFont("Q4SMALLERHUDFONT");			
			//HudMessage(d:counter1;HUDMSG_PLAIN,		1000,CR_WHITE,0.96,0.03,0);
			SetFont("Q4SMALLESTHUDFONT");
			
			//if (negative)	HudMessage(s:"-", d:counter2;HUDMSG_FADEOUT,	1001,CR_RED,0.96,0.08,2.0,1.0);
			//else			HudMessage(s:"+", d:counter2;HUDMSG_FADEOUT,	1002,CR_orange,0.96,0.08,2.0,1.0);
			TakeInventory("D4DCashFake",5000000);
			
			if (!negative && ((counter2 >= 400 && KeepOn) || ((counter2 >= 3000) && (GetCvar("user_Completionist") == 1))))
			{
				SetFont("DemonTears2");
				HudMessage(s:"A";HUDMSG_FADEOUT,	1001,CR_UNTRANSLATED,0.03,0.85,4.0,1.0);
			}
		}
		
		if (!KeepOn) time--;
		Delay(1);
	}
}

//==============================================================================
//==============================================================================
// Reward System
//==============================================================================
//==============================================================================


Script "LevelWatcherSetup" ENTER
{	
	Delay(2);
	int totalmonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
	int totalsecrets = GetLevelInfo(LEVELINFO_TOTAL_SECRETS);
	
	// No point running this if there's nothing to get.
	//if (totalmonsters < 5 && totalsecrets < 1)
	//	Terminate;
	int forcerefresh = 1;
	int secretsfound = 0;
	int killsearned = 0;
	int RewardedKillPortions[5] = { 15, 30, 45, 60, 75 };
	int rewardcheckpoint = totalmonsters / 5;
	int multiplier = 1;
	
	int reward = 0;
	int bonus = 0;
	int bonusmul = CheckInventory("CashPercentBonus");
	bool RewardTime = false;
	while (1)
	{
		if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) > 5)
		{
		
			// For every 50 monsters on the map, increase the rewards.
			if (forcerefresh || (totalmonsters != GetLevelInfo(LEVELINFO_TOTAL_MONSTERS)))
			{
				forcerefresh = 0;
				totalmonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
				if (totalmonsters >= 50)
					multiplier = 1 + (totalmonsters / 50);
				else
					multiplier = 1;
				rewardcheckpoint = totalmonsters / 5;
			}
			// Grant rewards based on every 1/5th of the level cleared of monsters.
			if (killsearned < 5)
			{
				int msg = 0;
				int numkills = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
				
				if (GetCvar("D4D_CurrentUpgradeMode"))
				{
					// It gives way too much rewarding for the pickup version, so halve it.
					multiplier = 1 + (totalmonsters / 100);
					if ((numkills >= rewardcheckpoint * 1) && (killsearned == 0))
					{	RewardTime = true; reward = multiplier; msg = 1; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= rewardcheckpoint * 2) && (killsearned == 1))
					{	RewardTime = true; reward = multiplier; msg = 2; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= rewardcheckpoint * 3) && (killsearned == 2))
					{	RewardTime = true; reward = multiplier; msg = 3; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= rewardcheckpoint * 4) && (killsearned == 3))
					{	RewardTime = true; reward = multiplier; msg = 4; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= GetLevelInfo(LEVELINFO_TOTAL_MONSTERS)) && (killsearned == 4))
					{	RewardTime = true; reward = multiplier; msg = 5; killsearned++;	GiveInventory("RewardToken",1); }
					
					if (RewardTime)
					{
						bonus = CheckInventory("CashPercentBonus") / 10;
						GiveCash(reward + bonus, msg);
						RewardTime = false;
						reward = 0; bonus = 0;
					}
				
				}
				else
				{
					if ((numkills >= rewardcheckpoint * 1) && (killsearned == 0))
					{	RewardTime = true; reward = (RewardedKillPortions[0] * multiplier) + bonus; msg = 1; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= rewardcheckpoint * 2) && (killsearned == 1))
					{	RewardTime = true; reward = (RewardedKillPortions[1] * multiplier) + bonus; msg = 2; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= rewardcheckpoint * 3) && (killsearned == 2))
					{	RewardTime = true; reward = (RewardedKillPortions[2] * multiplier) + bonus; msg = 3; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= rewardcheckpoint * 4) && (killsearned == 3))
					{	RewardTime = true; reward = (RewardedKillPortions[3] * multiplier) + bonus; msg = 4; killsearned++;	GiveInventory("RewardToken",1); }
					if ((numkills >= GetLevelInfo(LEVELINFO_TOTAL_MONSTERS)) && (killsearned == 4))
					{	RewardTime = true; reward = (RewardedKillPortions[4] * multiplier) + bonus; msg = 5; killsearned++;	GiveInventory("RewardToken",1); }
					
					if (RewardTime)
					{
						bonusmul = CheckInventory("CashPercentBonus");
						bonus = ((reward * bonusmul) / 100);
						GiveCash(reward + bonus, msg);
						RewardTime = false;
						reward = 0; bonus = 0;
					}
				}
			}
		}
		
		// Update the number of secrets found and reward appropriately.
		int rsf = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
		if (secretsfound < totalsecrets && secretsfound < rsf)
		{
			if (GetCvar("D4D_CurrentUpgradeMode"))
			{
				GiveCash(2,6);
			}
			else
			{
				bonusmul = CheckInventory("CashPercentBonus");
				reward = (rsf - secretsfound) * 100;
				bonus = (reward * bonusmul) / 100;
				GiveCash(reward + bonus,6);
			}
			secretsfound = rsf;
		}
		
		//Completionist bonus! Kill everything and find all secrets to earn a big
		//fat paycheck!
		if ((secretsfound >= totalsecrets) && (killsearned >= 5))
		{
			if (GetCvar("D4D_CurrentUpgradeMode"))
			{
				reward = multiplier * 5 + totalsecrets;
				GiveCash(reward,7);
			}
			else
			{
				bonusmul = CheckInventory("CashPercentBonus");
				reward = (((((RewardedKillPortions[4] * multiplier) * 10) + (totalsecrets * 100)) * 5) / 4);
				bonus = (reward * bonusmul) / 100;
				GiveCash(reward + bonus,7);
			}
			Terminate;
		}
		Delay(17);
	}
}

Function void GiveCash(int amount, int message)
{
	int TypeTime = 0.005;
	int Duration = 3.0;
	//int HudX = 512.4;
	//int HudY = 220.0;
	int HudX = 1.5; //512.4;
	int HudY = 0.16; //200.0;
	GiveInventory("D4DCash",amount);
	GiveInventory("D4DCashFake",amount);
	UpdateMsg(0);
	int MessageStyle = GetCvar("user_Completionist");

	if (MessageStyle == 1) //cooke
		SetFont("BIGFONT");	
	else if (MessageStyle == 2) //dbt
		SetFont("SMALLFONT");
		
	switch(message)
	{
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
		if (GetCVar("user_MonsterQuota"))
		{
			if (message < 5)
			{
				if (MessageStyle == 1) //cooke
					HudMessage(d: message, s:"\ck/5 Kill Quota\n\ck+", d: amount; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_WHITE,HudX,HudY,Duration,TypeTime,1.0);
				else if (MessageStyle == 2) //dbt
					HudMessage(d: message, s:"/5 Demons Killed:\n+", d: amount; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_GRAY,HudX,0.9,Duration,TypeTime,1.0);
			}
			else
			{
				if (MessageStyle == 1) //cooke
					HudMessage(d: message, s:"\cd/5 Kill Quota Completed\n\ck+", d: amount; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_WHITE,HudX,HudY,Duration,TypeTime,1.0);
				else if (MessageStyle == 2) //dbt
					HudMessage(d: message, s:"/5 Demons Killed:\n+", d: amount; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_GRAY,HudX,0.9,Duration,TypeTime,1.0);
					
				AmbientSound("Doom4/Other/VoiceDemonsEliminated",80);
			}
		}
		ACS_NamedExecute("CashDisplay",0,0,0,0);
		break;
	case 6:
		if (GetCVar("user_SecretQuota"))
		{
			if (MessageStyle == 1) //cooke
				HudMessage(s:"Secret found.\n\ck+", d: amount; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_LIGHTBLUE,HudX,HudY,Duration,TypeTime,1.0);
			else if (MessageStyle == 2) //dbt
				HudMessage(s:"Secret found\n+", d: amount; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_GRAY,HudX,0.9,Duration,TypeTime,1.0);
			else if (MessageStyle == 0) //even with messages off, message of secret will show up
				HudMessage(s:"Secret found"; HUDMSG_TYPEON|HUDMSG_LOG,999,CR_GOLD,HudX,0.3,Duration,TypeTime,1.0);
		}
		ACS_NamedExecute("CashDisplay",0,0,0,0);
		break;
	case 7:
		ACS_NamedExecute("CompletionMessage",0,amount,0,0);
		ACS_NamedTerminate("CashDisplay",0); //No demon tears face.
		ACS_NamedExecute("CashDisplay",0,0,1,0);
		break;
	}
}

Script "CompletionMessage" (int amount)
{
	int compstyle = GetCvar("user_Completionist");
	int HudX = 1.5; //512.4;
	int HudY = 0.01; //200.0;
	
	if (compstyle == 2)
	{
		//DBTHANATOS: Do your magic here!
		//SetMusicVolume(0.2);
		int t = 1.0;
		while (t > 0.1)
		{
			t -= 0.1;
			SetMusicVolume(t);
			Delay(1);
		}
		AmbientSound("Doom4/Other/MusCue5",80);
		SetFont("SmallFont");
		HudMessage(s:"Completionist: +",d:amount;HUDMSG_FADEOUT,150,CR_RED,HudX,0.1,3.0,1.0,1.0);
		delay(115);
		while (t < 1.0)
		{
			t += 0.1;
			SetMusicVolume(t);
			Delay(1);
		}
		//SetMusic("*");
		//SetMusicVolume(1.0);
	}
	else if (compstyle == 1)
	{
		int TypeTime = 0.034;
		int Duration = 5.0;

		str comp = "COMPLETIONIST!\n+";
		int i = 1017;
		int b = 1.0;
		int oldcolor = 0;
		int color = 0;
		AmbientSound("Completionist",127);
		SetFont("BIGFONT");
		//SetHudSize(1024,768,0);
		
		while (i > 1000)
		{
			if (b > 0.1)
				b -= 0.1;
				
			SetMusicVolume(b);
			oldcolor = color;
			color = random(0,11);
			if (color == oldcolor) //Randomize the color if it was already used.
			{
				color = (color + 1) % 12;
			}
			switch(color)
			{
				case 0:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_BLUE,HudX,HudY,Duration,TypeTime,0);		break;
				case 1:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_BRICK,HudX,HudY,Duration,TypeTime,0);		break;
				case 2:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_ORANGE,HudX,HudY,Duration,TypeTime,0);		break;
				case 3:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_CREAM,HudX,HudY,Duration,TypeTime,0);		break;
				case 4:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_CYAN,HudX,HudY,Duration,TypeTime,0);		break;
				case 5:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_OLIVE,HudX,HudY,Duration,TypeTime,0);		break;
				case 6:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_DARKGRAY,HudX,HudY,Duration,TypeTime,0);	break;
				case 7:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_DARKGREEN,HudX,HudY,Duration,TypeTime,0);	break;
				case 8:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_DARKRED,HudX,HudY,Duration,TypeTime,0);		break;
				case 9:			HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_GOLD,HudX,HudY,Duration,TypeTime,0);		break;
				case 10:		HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_GREEN,HudX,HudY,Duration,TypeTime,0);		break;
				case 11:		HudMessage(s:comp, d:amount; HUDMSG_TYPEON,i,CR_PURPLE,HudX,HudY,Duration,TypeTime,0);		break;
			}
			i--;
			Delay(1);
		}
		HudMessage(s:comp, d:amount; HUDMSG_TYPEON|HUDMSG_LOG,950,CR_WHITE,HudX,HudY,Duration,TypeTime,1.0);
		Delay(35*3);
		while (b < 1.0)
		{
			b += 0.1;
			SetMusicVolume(b);
			Delay(1);
		}
		Terminate;
	}
}