//==============================================================================
//==============================================================================
// D4D Event Handler
//==============================================================================
//==============================================================================

extend class D4DHandler
{
	PlayerDelta deltas[MAXPLAYERS];
	/*
	uint Credits, MonsterPortion;
	uint Monsters[2];
	uint Secrets[2];
	double MonsterPercent;
	double SecretPercent;
	bool DontRun;
	
	override void WorldTick()
	{
		if (DontRun)	return;
		Monsters[0] = level.killed_monsters;
		Monsters[1] = level.total_monsters;
		Secrets[0] = level.found_secrets;
		Secrets[1] = level.total_secrets;
		MonsterPercent = (Monsters[1] > 0) ? (Monsters[0] / Monsters[1]) * 100.0 : 0.0;
		SecretPercent = (Secrets[1] > 0) ? (Secrets[0] / Secrets[1]) * 100.0 : 0.0;
		
		if (Monsters[1] < 5 && 
		if (Monsters[1] >= 5)
		{
			
		}
	}
	
	
	override void WorldThingDied(WorldEvent e)
	{
		let mo = e.Thing;
		if (mo && mo.bCOUNTKILL && mo.bISMONSTER)
		{
			if (!mo.bFRIENDLY || mo is "D4AbstractMonster")
			{
				Monsters[0]++;
			}
		}
	}
	
	// For spawning, make sure to count friendly D4D monsters since they will
	// eventually turn on the player after they unmorph.
	override void WorldThingSpawned(WorldEvent e)
	{
		let mo = e.Thing;
		if (mo && mo.bCOUNTKILL && mo.bISMONSTER)
		{
			if (!mo.bFRIENDLY || mo is "D4AbstractMonster")
			{
				Monsters[1]++;
			}
		}
	}
	*/
	
	int KNMInput[8];
	
	clearscope private void IncrementKNM(int which) { D4DHandler.SendNetworkEvent("D4D_KNM++", which); }
	clearscope private void ResetKNM(int which) 	{ D4DHandler.SendNetworkEvent("D4D_KNM0", which); }
	clearscope private int GetKNM(int which) 		{ return KNMInput[which]; }
	
	
	override bool InputProcess(InputEvent ev)
	{
		if (ev.Type == InputEvent.Type_KeyDown)
		{
			int index = consoleplayer;
			let plr = players[index].mo;
			if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph",true))
				return false;
				
			int bind1, bind2;
			static const String KeyBindsCCMDs2[] =
			{
				"+forward", "+back", "+moveleft", "+moveright", 
				"+attack", "+altattack"
			};
			
			for (int i = 0; i < KeyBindsCCMDs2.Size(); i++) 
			{
				[bind1, bind2] = Bindings.GetKeysForCommand (KeyBindsCCMDs2[i]);
				
				if (ev.KeyScan == bind1 || ev.KeyScan == bind2) 
				{
					int knm = KNMInput[index];
					Switch (knm)
					{
						Case 0: 
							if (i == 0)	IncrementKNM(index);	break;
						Case 1:
							if (i == 0)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 2:
						Case 3:
							if (i == 1)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 4:
						Case 6:
							if (i == 2)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 5:
						Case 7:
							if (i == 3)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 8:
							if (i == 4)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 9:
							if (i == 5)	D4DHandler.SendNetworkEvent("D4D_KNM", index);
						Default:
							ResetKNM(index);
					}
					return false; // No need to keep scanning.
				}
			}
		}
		return false;
	}
	
	
	//==========================================================================
	// Functions
	
	void PrintSlots(ConsoleEvent e)
	{
		if (!e.IsManual)	return;
		let plr = players[e.Player].mo.player;
		if (!plr)	return;
		

		for (int i = 0; i < AllActorClasses.Size(); ++i)
		{
			let wep = (Class<Weapon>)(AllActorClasses[i]);
			if (!wep)	continue;
			
			bool found = false;
			int slot = -1; 
			double index = -1;
			[found, slot, index] = plr.weapons.LocateWeapon(wep);
			String fnd = (found) ? "Ye" : "No";
			
			let defs = GetDefaultByType(wep);
			slot = Max(0, defs.SlotNumber);
			index = defs.SlotPriority;
			if (index > 1.0)	index = 0.0;
			Console.Printf("%s %d %.2f - %s", fnd, slot, index, wep.GetClassName());
		}
	}
	
	// Sets the light level of the current sector the player is in.
	void SetSectorLight(ConsoleEvent e)
	{
		let plr = players[e.Player].mo;
		if (!plr)	return;
		
		Sector s = plr.CurSector;
		if (!s)	return;
		
		s.SetLightLevel(e.Args[0]);
	}
	
	// Summons a rune with a power level.
	void SummonRune(Actor player, String suffix, Int power)
	{
		if (!player)	return;
		
		Class<Inventory> check = suffix;
		if (!check)
		{	Console.Printf("%s is not a demon rune", suffix);	return;	}
		
		double rad = player.radius;
		double ang = player.angle;
		Vector3 pos = player.Vec3Angle(rad * 2, ang);
		pos.z = player.pos.z;
		let rune = DemonRuneBase(Actor.Spawn(check, pos));
		
		if (rune)
		{
			rune.PowerLevel = Clamp(abs(power), 0, MaxRunePower);
		}
		else
			Console.Printf("%s failed to spawn.", suffix);
	}
	
	
	// Completely clear off all listings for a particular player.
	void Init(int num)
	{
		deltas[num].ItemName.Clear();
		deltas[num].Count.Clear();
	}

	// Update the listings in the struct.
	void Update(int num, string iname, uint count, bool ofs = false)
	{
		if (players[num].mo)
		{
			if (!deltas[num].SetItem(iname, count, ofs))
			{
				console.printf(iname.." is not a proper item");
			}
		}
	}
	
	void FindLiveTID(ConsoleEvent e)
	{
		if (e.Args[0] != 0)
		{
			//let it = ActorIterator.Create(e.Args[0]);
			let it = ActorIterator(level.CreateActorIterator(e.Args[0]));
			Actor mo;
			while (mo = Actor(it.Next()))
			{
				if (mo.health > 0 && mo.tid == e.Args[0])
					Console.Printf("%s", mo.GetClassName());				
			}
		}
	}
	
	private void KNM(ConsoleEvent e)
	{
		int i = e.Args[0];
		if (e.IsManual || i < 0 || i >= MAXPLAYERS)
			return;
		if (gamestate == GS_LEVEL)
		{
			if (playeringame[i])
			{
				let plr = players[i].mo;
				if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph", true))
					return;
				
				S_StartSound("Konami", 5, 0, 1, ATTN_NONE);
				plr.A_GiveInventory("ModuleGiver");
				plr.A_Log("Blissfully Ecstatic Upgrades Added", true);
			}
		}
		else
		{
			S_StartSound("Konami", 5, 0, 1, ATTN_NONE);
			Console.Printf("Clever!");
		}
	}
}

/*==============================================================================
================================================================================



================================================================================
==============================================================================*/

Struct PlayerDelta
{
	bool receiving;
	Array<String> ItemName;
	Array<Int> Count;
	
	//==========================================================================
	// Checks for an item and returns its position.
	int CheckForItem (String thing, bool getQuantity = false)
	{
		// Abort if the item's invalid.
		Class<Inventory> check = thing;
		if (!check)	
		{
			return -2;
		}
		
		// Otherwise, look for it.
		for (int i = 0; i < ItemName.Size(); i++)
		{
			let tng = ItemName[i];
			if (tng.Length() > 0 && thing ~== tng)
			{
				return i;
			}
		}
		return -1;
	}
	
	//==========================================================================
	// Sets an item if it exists, or adds the item to the array if not already,
	// providing that item type is real. ofs means add/subtract amt to the 
	// current amount.
	bool SetItem (String thing, int amt, bool ofs = false)
	{
		// Don't bother if we're not adding or taking away.
		if (!amt && ofs)	return true;
		
		Class<Inventory> check = thing;
		if (!check)	
		{
			Console.Printf(thing.." is not a valid item");
			return false;
		}
		
		if (ItemName.Size() > 0)
		{
			for (int i = 0; i < ItemName.Size(); i++)
			{
				if (thing ~== ItemName[i])
				{
					// Already exists, just update the amount.
					if (ofs)	Count[i] = Max(Count[i] + amt,0);
					else		Count[i] = amt;
					return true;
				}
			}
		}
		// Doesn't exist, make one.
		ItemName.Push(thing);
		Count.Push(amt);
		return true;
	}
	
	void Reset()
	{
		ItemName.Clear();
		Count.Clear();
	}
}