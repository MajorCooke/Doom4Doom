//==============================================================================
//
//==============================================================================
class OptionMenuItemStaticTextTier : OptionMenuItemStaticText
{
	String toCheck;
	int tier;
	MenuItemList m;
	const maxTier = 4;
	Class<Inventory> check;
	
	
	OptionMenuItemStaticTextTier Init(String label, String itemname = "", int mtier = 1, int cr = -1)
	{
		Super.Init(label, cr);
		toCheck = itemname;
		tier = mtier;
		return self;
	}

	OptionMenuItemStaticTextTier InitDirect(String label, String itemname, int mtier, int cr)
	{
		Super.Init(label, cr);
		toCheck = itemname;
		tier = mtier;
		mColor = cr;
		return self;
	}
	
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		if (!m)
		{
			let p1 = D4DOptionMenuUpgrades(Menu.GetCurrentMenu());
			if (p1) m = p1.m;
			
			let p2 = D4DListMenu(Menu.GetCurrentMenu());
			if (p2) m = p2.m;
			
		}
		if (m)
		{
			check = toCheck;
			if (check)
			{
				let finder1 = UpgradeItem(m.plr.FindInventory(check, true));
				if (finder1)
				{
					int quan = m.FindItem(toCheck, true);
					if (quan < 0)
					{
						quan = m.plr.CountInv(check);
					}
					
					int tierToGet = 0, prevTier = 0;
					switch (tier)
					{
						Default:
						Case 1:
						{
							tierToGet = finder1.Quantity;
							break;
						}
						Case 2:
						{
							prevTier = finder1.Quantity;
							tierToGet = finder1.Q2;
							break;
						}
						Case 3:
						{
							prevTier = finder1.Q2;
							tierToGet = finder1.Q3;
							break;
						}
						Case 4:
						{
							prevTier = finder1.Q3;
							tierToGet = finder1.Q4;
							break;
						}
					}
					
					if (quan >= tierToGet)
					{
						mColor = Font.CR_GREEN;
					}
					else if (quan >= prevTier && quan < tierToGet)
					{
						mColor = Font.CR_GOLD;
					}
					else
					{
						mColor = Font.CR_TAN;
					}
				}
			}
		}
		drawLabel(indent, y, mColor);
		return -1;
	}
}

//==============================================================================
//
// "Purchase" Menu Item
//
// Sets up and performs a bunch of checks for item purchase eligibility such as
// pricing and requirements.
//==============================================================================

class OptionMenuItemPurchase : OptionMenuItem
{
	int amt, cost, quan, maxinv, toGive;
	String toCheck;
	bool badItem, bought;
	Class<Inventory> check;
	MenuItemList m;
	Menu current;
	CVar UpgradeModeCVar;
	uint8 UpgradeMode;
	//==========================================================================
	OptionMenuItemPurchase Init(String command)
	{
		// If anything goes wrong, this will be indicated by the button reading
		// as "UNINITIALIZED" in game.
		Super.Init("UNINITIALIZED", command);
		toCheck = command;
		bought = baditem = false;
		return self;
	}
	
	//==========================================================================
	void OnMenuCreatedOld()
	{
		UpgradeModeCVar = CVar.FindCVar("D4D_CurrentUpgradeMode");
		
		if (UpgradeModeCVar)
		{
			UpgradeMode = UpgradeModeCVar.GetInt();
			if (UpgradeMode > 0)
			{
				badItem = true;
				mLabel = "Can't Buy In Crate Mode";
				return;
			}
		}
		
		
		let p1 = D4DOptionMenuUpgrades(Menu.GetCurrentMenu());
		if (p1) m = p1.m;
		
		let p2 = D4DListMenu(Menu.GetCurrentMenu());
		if (p2) m = p2.m;
		
		if (!m)
		{
			mLabel = "Back";
			badItem = true;
			Console.Printf("The menu has no list!");
			return;
		}
		// First check for the player.
		if (!m.plr)
		{
			mLabel = "Back";
			badItem = true;
			Console.Printf("No player!");
			return;
		}
		
		// Then set up everything and find the parent menu.
		amt = cost = quan = maxinv = toGive = -1;
		badItem = bought = false;
		check = null;
		current = Menu.GetCurrentMenu();
		
		check = toCheck;
		if (!check)
		{
			// Item wasn't found.
			mLabel = "BAD ITEM";
			badItem = true;
			Console.Printf("ERROR: Bad or non-existent item!");
			return;
		}
		
		amt = m.FindItem("D4DCash", true);
		if (amt < 0)
		{
			amt = m.plr.CountInv("D4DCash");
			m.SetItem("D4DCash",amt);
		}
		
		// Look for the type
		let finder1 = UpgradeItem(m.plr.FindInventory(check, true));
		if (!finder1)
		{
			// No base, wrong type.
			mLabel = "BAD ITEM";
			badItem = true;
			Console.Printf("ERROR: "..toCheck.." not of UpgradeItem type!");
			return;
		}
		else
		{
			
			quan = m.FindItem(toCheck, true);
			if (quan < 0)
			{
				quan = m.plr.CountInv(check);
			}
			
			// Find the current tier by checking what quantity we have.
			maxinv = Max(finder1.Quantity, finder1.Q2, finder1.Q3, finder1.Q4);
			
			//Console.Printf("%s: %d, %d", toCheck, quan, maxinv);
			
			if (quan >= maxinv)
			{
				// Already bought.
				mLabel = "Owned (Back)";
				badItem = bought = true;
				//Console.Printf("Already bought.");
				return;
			}
			else if (finder1.Quantity > -1 && quan < finder1.Quantity)
			{
				cost = finder1.Cost;
				toGive = finder1.Quantity;
			}
			else if (finder1.Q2 > -1 && quan < finder1.Q2)
			{
				cost = finder1.Cost2;
				toGive = finder1.Q2;
			}
			else if (finder1.Q3 > -1 && quan < finder1.Q3)
			{
				cost = finder1.Cost3;
				toGive = finder1.Q3;
			}
			else if (finder1.Q4 > -1 && quan < finder1.Q4)
			{
				cost = finder1.Cost4;
				toGive = finder1.Q4;
			}
			else
			{
				mLabel = "BAD QUANTITY";
				badItem = true;
				Console.Printf("ERROR: Quantity must be greater than zero!");
				return;
			}
		}
		
		
		if (cost < 0)
		{
			badItem = true;
			Console.Printf("ERROR: UpgradeItem costs not set!");
			return;
		}
		else if (amt >= cost || m.plr.CountInv("FreeUpgradeToken"))
		{
			badItem = false;
			mLabel = "Purchase";
		}
		else
		{
			badItem = true;
			mLabel = "Back";
		}
	}
	
	//==========================================================================
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		if (badItem)
		{
			if (bought)
			{
				mLabel = "Owned (Back)";
				drawLabel(indent, y, Font.CR_GREEN);
			}
			else
			{
				
				drawLabel(indent, y, Font.CR_RED);
			}
		}
		else
		{
			drawLabel(indent, y, selected ? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColorMore);
		}
		return indent;
	}
	
	//==========================================================================
	// We only need to deliver the items back if the purchase was successful.
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		
		if (mkey == Menu.MKEY_Enter)
		{
			// Make sure the item's not bad or already bought. 
			// badItem indicates both.
			current = Menu.GetCurrentMenu();
			if (badItem || !m)
			{
				if (!m)	Console.Printf("Item list is missing!");
				Menu.MenuSound("Doom4/Player/Nope");
				if (!bought) return true;
			}
			else
			{
				// It worked. Update the object.
				m.SetItem(toCheck, toGive);
				if (m.plr.CountInv("FreeUpgradeToken"))
					m.SetItem("FreeUpgradeToken", -1, true);
				else
					m.SetItem("D4DCash", -abs(cost), true);
				Menu.MenuSound("Menu/Activate");
			}
			// ...and close it. Means it'll go back up a level.
			if (current) current.MenuEvent(-1, fromcontroller);
			return true;
		}
		return Super.MenuEvent(mkey, fromcontroller); 
	}
}

//==============================================================================
//==============================================================================

//==============================================================================
//==============================================================================

Class OptionMenuItemSubmenuWeapon : OptionMenuItemSubmenu
{
	MenuItemList m;
	String toCheck;
	bool started;
	int amt;
	bool greyed;
	
	OptionMenuItemSubmenuWeapon Init(String label, Name command, String itemname = "", int param = 0)
	{
		amt = 0;
		toCheck = itemname;
		Super.init(label, command);
		mParam = param;
		started = false;
		greyed = true;
		return self;
	}
	
	void OnMenuCreatedOld()
	{
		Class<Inventory> check = toCheck;
		greyed = true;
		if (check)
		{
			if (!m)
			{
				let p1 = D4DOptionMenuUpgrades(Menu.GetCurrentMenu());
				if (p1) m = p1.m;
				
				let p2 = D4DListMenu(Menu.GetCurrentMenu());
				if (p2) m = p2.m;
				
				if (!m.plr)	m.plr = players[consoleplayer].mo;
				
			}
			
			if (m)
			{
				greyed = (m.plr.CountInv(check) <= 0);
			}
			started = true;
		}
	}
	
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		if (!started)	OnMenuCreatedOld();
		if (!Selectable())	return -1;
		drawLabel(indent, y, selected ? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColorMore, greyed);
		return indent;
	}

	override bool Activate()
	{
		started = false;
		if (greyed)
		{
			Menu.MenuSound("Doom4/Player/Nope");
			Console.Printf("Upgrades for selection not available");
			return false;
		}
		Menu.MenuSound("menu/choose");
		Menu.SetMenu(mAction, mParam);
		return true;
	}
	
	override bool Selectable()
	{
		return !greyed;
	}
}

//==============================================================================
//==============================================================================
//
//==============================================================================
//==============================================================================

class OptionMenuItemSubmenuReqs : OptionMenuItemSubmenu
{
	int mParam;
	MenuItemList m;
	bool started, reqs, openable, bought;
	String toCheck;
	Class<Inventory> check;
	Name reqMenu;
	bool secret;
	
	OptionMenuItemSubmenuReqs Init(String label, Name command, String itemName = "", Name requiredMenu = '', bool seekaret = false, int param = 0)
	{
		Super.init(label, command);
		started = reqs = openable = bought = false;
		mParam = param;
		toCheck = itemName;
		reqMenu = requiredMenu;
		secret = seekaret;
		return self;
	}
	
	void OnMenuCreatedOld()
	{
		started = true;
		bought = openable = reqs = false;
		
		let p1 = D4DOptionMenuUpgrades(Menu.GetCurrentMenu());
		if (p1) m = p1.m;
		
		let p2 = D4DListMenu(Menu.GetCurrentMenu());
		if (p2) m = p2.m;
		
		// Handle the errors first.
		if (!m)
		{
			Console.Printf("ERROR: SubmenuReqs has no item list!");
			return;
		}
		
		if (secret)
		{
			ItemsToSave l;
			reqs = !(l.Init(true, m.plr));
			if (!reqs)
			{
				openable = true;
			}
			return;
		}
		
		check = toCheck;
		if (!check)
		{
			if (toCheck.Length() > 0)
			{
				Console.Printf("ERROR: "..toCheck.." is not a valid item!");
				return;
			}
			openable = true;
			return;
		}
		
		let finder1 = UpgradeItem(m.plr.FindInventory(check, true));
		if (finder1)
		{
			// No errors, so allow menu opening.
			openable = true;
			
			if (!m.plr)
			{
				m.plr = players[consoleplayer].mo;
			}
			
			int maxinv = Max(finder1.Quantity, finder1.Q2, finder1.Q3, finder1.Q4);
			if (finder1.Amount >= maxinv || m.plr.CountInv(check) >= maxinv || m.FindItem(toCheck) >= maxinv)
			{
				reqs = false;
				openable = true;
				bought = true;
				//Console.Printf("Already bought");
				return;
			}
			
			if (reqMenu == '' || reqMenu == 'null' || reqMenu == 'none')
			{
				reqs = false;
				openable = true;
				//Console.Printf("No requirements");
				return;
			}
			
			// MenuItemList's FindItem returns -1 if something wasn't found.
			// Ensure it's clamped to 0.
			uint quan[4];
			
			quan[0] = m.FindRequirementCount(toCheck,0);
			quan[1] = m.FindRequirementCount(toCheck,1);
			quan[2] = m.FindRequirementCount(toCheck,2);
			quan[3] = m.FindRequirementCount(toCheck,3);
			
			int reqsToMeet = 0;
			if (quan[0] + quan[1] + quan[2] + quan[3] > 0)
			{
				uint owned[4];
				owned[0] = Max(0, m.FindItem(finder1.Req1, true, true));
				owned[1] = Max(0, m.FindItem(finder1.Req2, true, true));
				owned[2] = Max(0, m.FindItem(finder1.Req3, true, true));
				owned[3] = Max(0, m.FindItem(finder1.Req4, true, true));
				
				String inames[4];
				inames[0] = finder1.Req1;
				inames[1] = finder1.Req2;
				inames[2] = finder1.Req3;
				inames[3] = finder1.Req4;
				
				
				for (int i = 0; i < quan.Size(); i++)
				{
					if (quan[i] > 0 && owned[i] < quan[i])
					{
						Class<Inventory> checker = inames[i];
						if (checker)
						{
							reqsToMeet++;
							//Console.Printf(inames[i]);
						}
					}
				}
				if (reqsToMeet > 0)	reqs = true;
			}
			else
			{
				reqs = false;
				openable = true;
			}
			//Console.Printf("%s: %d", toCheck, reqsToMeet);
			
		}
		else
		{
			if (toCheck.Length() > 0)	// Shuts up the whining if nothing was in there.
			{
				Console.Printf("ERROR: "..toCheck.." not found! Does it inherits from UpgradeItem class?");
			}
			else
			{
				Console.Printf("No item check");
				openable = true;
			}
		}
	}

	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		if (secret && reqs)	return 0;
		if (bought)
		{
			drawLabel(indent, y, selected ? Font.CR_GOLD : Font.CR_GREEN, true);
		}
		else
		{
			drawLabel(indent, y, selected ? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColorMore, (!openable || bought || reqs));
		}
		return indent;
	}
	
	bool IsMenuReal(Name mu)
	{
		if (mu == '' || mu == 'null' || mu == 'none')
			return false;
		return true;
	}

	override bool Activate()
	{
		if (openable)
		{
			Name toGo = ((IsMenuReal(reqMenu) && reqs) ? reqMenu : mAction);
			Menu.MenuSound("menu/choose");
			Menu.SetMenu(toGo, mParam);
		}
		else
		{
			Menu.MenuSound("Doom4/Player/Nope");
		}
		return openable;
	}
	
	override bool Selectable()
	{
		return (!(secret && reqs));
	}
}

//==============================================================================
// DisplayInt
// 	A base class for inheritance purposes
// 	
//
// Parameters:
// - String Label
//		The label to display on the left.
// - String Name 
//		The cvar's value to show.
// - Cvar graycheck: 
//		If the cvar exists and is false, darkens the whole region.
//==============================================================================

class OptionMenuItemDisplayInt : OptionMenuFieldBase
{
	String toCheck;
	Class<Inventory> check;
	int tokens, amt, cost, quan, maxinv, buyable;
	Menu current;
	MenuItemList m;
	bool full;
	
	OptionMenuItemDisplayInt Init (String label, String command, CVar graycheck = null)
	{
		Super.Init(label, command, graycheck);
		full = false;
		toCheck = command;
		return self;
	}
	
	void OnMenuCreatedOld()
	{
		// Grab the shared object.
		let p1 = D4DOptionMenuUpgrades(Menu.GetCurrentMenu());
		if (p1) m = p1.m;
		
		let p2 = D4DListMenu(Menu.GetCurrentMenu());
		if (p2) m = p2.m;
		
		if (!m)
		{
			Console.Printf("ERROR: DisplayInt has no item list!");
			return;
		}
		
		amt = cost = quan = maxinv = -1;
		check = toCheck;
		full = false;
		
		if (check)
		{
			if (m.plr)
			{
				tokens = m.FindItem("FreeUpgradeToken", true);
				if (tokens < 0)
				{
					tokens = m.plr.CountInv("FreeUpgradeToken");
					m.SetItem("FreeUpgradeToken", tokens);
				}
				amt = m.FindItem("D4DCash", true);
				if (amt < 0)
				{
					amt = m.plr.CountInv("D4DCash");
					m.SetItem("D4DCash",amt);
				}
			
				let finder1 = UpgradeItem(m.plr.FindInventory(check, true));
				if (!finder1)
				{
					// No base, wrong type.
					Console.Printf("ERROR: "..toCheck.." not of UpgradeItem type!");
					return;
				}
				else
				{
					// Find the item quantity in the list or in the player.
					quan = m.FindItem(toCheck, true);
					if (quan < 0)
					{
						quan = m.plr.CountInv(check);
					}
					
					// Find the current tier by checking what quantity we have.
					maxinv = Max(finder1.Quantity, finder1.Q2, finder1.Q3, finder1.Q4);
					
					if (quan >= maxinv)
					{
						// Already bought.
						full = true;
						return;
					}
					else if (finder1.Quantity > -1 && quan < finder1.Quantity)
					{
						cost = finder1.Cost;
					}
					else if (finder1.Q2 > -1 && quan < finder1.Q2)
					{
						cost = finder1.Cost2;
					}
					else if (finder1.Q3 > -1 && quan < finder1.Q3)
					{
						cost = finder1.Cost3;
					}
					else if (finder1.Q4 > -1 && quan < finder1.Q4)
					{
						cost = finder1.Cost4;
					}
					else
					{
						m = null;
						Console.Printf("ERROR: Quantity must be greater than zero!");
						return;
					}
				}
			}
		}
		if (tokens)	buyable = 2;
		else		buyable = (amt >= cost) ? 1 : 0;
	}
	
	//==========================================================================
	override String Represent()
	{
		if (!m || full) return "";
		return String.format("%d",amt);
	}
	
	override int Draw (OptionMenuDescriptor d, int y, int indent, bool selected)
	{
		if (!m || full)	return indent;
		return Super.Draw(d, y, indent, selected);
	}

	//==========================================================================
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		if (mkey == Menu.MKEY_Left || mkey == Menu.MKEY_Right)
			return false;
		
		return Super.MenuEvent(mkey, fromcontroller);
	}
	
	//==========================================================================
	override bool Selectable()
	{
		return false;
	}
}

/*==============================================================================
	CreditDisplay
		Used for D4D's upgrade purchasing menu, this performs a comparison
		between the built-in D4DCash and the price of the item, coloring
		the cash amount based on which comparison's higher.
		
		Turns red if the cost is higher than the current amount.
		Turns green otherwise.

 Parameters:
 - "command": The item to check.
==============================================================================*/

class OptionMenuItemCreditDisplay : OptionMenuItemDisplayInt
{
	bool grayed;
	//==========================================================================
	OptionMenuItemCreditDisplay Init (String command = "")
	{
		Super.Init("Credits", "");
		grayed = false;
		buyable = 0;
		full = false;
		toCheck = command;
		return self;
	}
	
	//==========================================================================
	override String Represent()
	{
		String cash = String.Format("%d", amt);
		
		if (tokens > 0)
			cash.AppendFormat(" (%d FREE upgrade(s) remaining)", tokens);
		
		return cash;
	}
	
	//==========================================================================
	override int Draw (OptionMenuDescriptor d, int y, int indent, bool selected)
	{
		if (full || !m || D4D_CurrentUpgradeMode > 0) 
		{
			return indent;
		}
		Super.Draw(d, y, indent, selected);
		
		int col = OptionMenuSettings.mFontColorValue;
		Switch (buyable)
		{
			Default:	col = Font.CR_GOLD;	break;
			Case 1: 	col = Font.CR_GREEN; break;
			Case 0: 	col = Font.CR_RED; break;
		}
		drawValue(indent, y, col, Represent(), grayed);
	//	screen.DrawText(SmallFont, col, indent + CursorSpace(), y, Represent(), DTA_CleanNoMove_1, true);
		return indent;
	}
}

/*==============================================================================
	CostDisplay
		Nothing special, just CvarDisplayInt without the need to define "Cost".

 Parameters:
 - Cvar Cost 
		The cvar's value to show.
 - Cvar graycheck: 
		If the cvar exists and is false, darkens the whole region.
==============================================================================*/

class OptionMenuItemCostDisplay : OptionMenuItemDisplayInt
{
	OptionMenuItemCostDisplay Init (String command = "")
	{
		Super.Init("Cost", "");
		toCheck = command;
		return self;
	}
	
	//==========================================================================
	override String Represent()
	{
		return String.format("%d", cost);
	}
	
	override int Draw (OptionMenuDescriptor d, int y, int indent, bool selected)
	{
		if (full || D4D_CurrentUpgradeMode > 0) return indent;
		return Super.Draw(d, y, indent, selected);
	}
}

/*==============================================================================
	OptionCvarRange
		Like Option, but takes two additional parameters to indicate the range
		where its active. Outside of that, greyed out.

 Parameters:
	String label:
		Self explanatory.
	Cvar command:
		The cvar to manipulate when scrolling left and right.
	Name values:
		The list of OptionValue defined in MenuDef to scroll through. 
		See "YesNo", "OnOff", etc.
	Cvar graycheck: 
		If the cvar exists and is outside the next two parameters, darkens the 
		whole region.
	Int lo:
		The low end of the range which graycheck must be outside of to deactivate.
	Int hi:
		Same as lo, but the high end.
	Int inverse:
		Flips the check - inactive if inside the range instead of active.
		
==============================================================================*/

Class OptionMenuItemOptionRange : OptionMenuItemOption
{
	int lo, hi;
	bool Inverse;
	OptionMenuItemOptionRange Init(String label, Name command, Name values, CVar graycheck = null, int low = 0, int high = 0, int inverse = 0, int center = 0)
	{
		Super.Init(label, command, values, graycheck, center);
		lo = low;
		hi = high;
		if (hi < lo)	hi = lo;
		mCVar = CVar.FindCVar(mAction);
		self.Inverse = (inverse != 0);
		return self;
	}
	
	override bool isGrayed()
	{
		if (mGrayCheck)
		{
			int value = mGrayCheck.GetInt();
			bool ret = (value >= lo && value <= hi);
			return (Inverse) ? !ret : ret;
		}
		return false;
	}
}

Class OptionMenuItemSliderRange : OptionMenuItemSlider
{
	int lo, hi;
	bool Inverse;
	CVar mGrayCheck;
	OptionMenuItemSliderRange Init(String label, Name command, double min, double max, double step, int showval = 1, CVar graycheck = null, int low = 0, int high = 0)
	{
		Super.Init(label, command, min, max, step, showval);
		mCVar = CVar.FindCVar(command);
		mGrayCheck = graycheck;
		lo = low;
		hi = high;
		if (hi < lo)	hi = lo;
		return self;
	}
	
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		return Selectable() ? Super.Draw(desc, y, indent, selected) : indent;
	}
	
	override bool Selectable()
	{
		if (mGrayCheck)
		{
			int check = mGrayCheck.GetInt();
			
			if (check < lo || check > hi)
				return false;
		}
		return true;
	}
}