Class D4PostProcessor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		if (mapname == 'TITLEMAP')	return;
		let SE = D4DHandlerStatic.Fetch();
		if (!SE)	return;
		
		
		// Set up the spawn filters. First, go with flags.
		bool spawnmulti = sv_alwaysspawnmulti;
		
								int flagmask = MTF_SINGLE;
		if (deathmatch) 			flagmask = MTF_DEATHMATCH;
		else if (multiplayer)		flagmask = MTF_COOPERATIVE;
		else if (spawnmulti)		flagmask = MTF_COOPERATIVE|MTF_SINGLE;
		
		
		int skillmask = G_SkillPropertyInt(SKILLP_SpawnFilter);
		
		uint tc = GetThingCount();
		for (uint i = 0; i < tc; i++)
		{
			// Check the weapon IDs.
			// 5010 = Pistol
			// 2001 = Shotgun
			// 2002 = Chaingun
			// 2003 = Rocket Launcher
			// 2004 = Plasma Rifle
			// 2005 = Chainsaw
			// 2006 = BFG 9000
			// 82 = Super Shotgun
			uint ednum = GetThingEdNum(i);
			if (ednum != 5010)
				if (ednum < 2001 || ednum > 2006)
					continue;
		
			// See if it spawns at all.
			uint tflag = GetThingFlags(i);
			if (!(tflag & flagmask))	continue;
		
			// Make sure it fits the skill.
			uint tskill = GetThingSkills(i);
			if (!(tskill & skillmask))	continue;
			
			int cap = 1;
			// Handles Crucible spawning, and enabling of ammo types for chainsaw
			// and BFG/Unmaykr
			Switch(ednum)
			{
				Case 2005: //Chainsaw
					SE.SetActorSpawn(D4DHandlerStatic.ChainsawAmmo, true);	
					cap = 10;
					break;
				
				Case 2006: //BFG
					if (D4D_PrintDebug == 7)
						Console.Printf("BFG found. Ammo spawn enabled.");
					SE.SetActorSpawn(D4DHandlerStatic.BFGAmmo, true);			
					cap = 25;
					break;
			}
			
			if (random[rng](1,100) <= cap)
			{
				SE.AddPostSpawn('DECrucible', GetThingPos(i));
				SE.SetActorSpawn(D4DHandlerStatic.CrucibleAmmo, true);
			}
		}
	}
}

extend Class D4DHandler
{
	void HandleAmmo(Actor mo)
	{
		if (mo is 'D4Bullets' || mo is 'D4Shells' || mo is 'D4Rockets' || mo is 'D4Cells')
		{
			String s = mo.GetClassName();
			s = s.MakeLower();
			if (s.IndexOf('pinata') > -1)
				return;
			
			bool small = false;
			int GasChance = D4FuelAmmo_Chance;
			int CrucChance = DECrucibleAmmo_Chance;
			if (s.IndexOf('small') > -1)
			{
				small = true;
				GasChance = D4FuelAmmo_ChanceSmall;
				CrucChance = DECrucibleAmmo_ChanceSmall;
			}
			
			Array<Actor> Spawns; Spawns.Clear();
			
			if (CheckActorSpawn(D4DHandlerStatic.ChainsawAmmo) && random[rng](1,256) <= GasChance)
			{
				Class<Inventory> Fuel = 'D4Fuel';
				if (Small)	Fuel = 'D4FuelSmall';
				let th = mo.Spawn(Fuel, mo.pos, ALLOW_REPLACE);
				if (th)	th.vel = mo.vel;
			}
			
			if (CheckActorSpawn(D4DHandlerStatic.CrucibleAmmo) && random[rng](1,256) <= CrucChance)
			{
				let th = mo.Spawn('DECrucibleAmmo', mo.pos, ALLOW_REPLACE);
				if (th)	th.vel = mo.vel;
			}
		}
	}
	
	void CheckCrucibleSpawn(Actor mobj)
	{
		let mo = Doom4Weapon(mobj);
		if (!mo || mo.CountInv("CrateSpawned") || mo.Owner)	return;
		
		int chance = 0;
		Name repn = mo.GetClassName();
		Switch (repn)
		{
			Case 'DEUnmakyr':
			Case 'D4BFG':			chance = 25;	break;
			Case 'D4Chainsaw':		chance = 10;	break;
			Default:				chance = 1;		break;
		}
		
		if (random[rng](1, 100) <= chance)
		{
			let cruc = DECrucible(mo.Spawn('DECrucible', mo.pos, ALLOW_REPLACE));
			
			if (cruc)
			{
				cruc.vel = mo.vel;
			}
		}
	}
}



extend class D4DHandlerStatic
{
	private Class<Actor> SuperSpawned;
	
	private bool DehackedDone;
	private Array<Class<Actor> > DehackedRep;
	void RefreshDehackedList()
	{
		DehackedRep.Clear();
		static const Class<Actor> rep[] =
		{
			"Zombieman",
			"ShotgunGuy",
			"ChaingunGuy",
			"DoomImp",
			"LostSoul",
			"Demon",
			"Spectre",
			"Cacodemon",
			"HellKnight",
			"BaronOfHell",
			"Arachnotron",
			"PainElemental",
			"Revenant",
			"Fatso",
			"Archvile",
			"Cyberdemon",
			"SpiderMastermind",
			"WolfensteinSS",
			"BossBrain"
		};
		
		static const StateLabel SL[] =
		{
			"Spawn",
			"See",
			"Melee",
			"Missile",
			"Pain",
			"Death",
			"XDeath"
		};
		
		for (int i = 0; i < rep.Size(); i++)
		{
			let defs = GetDefaultByType(rep[i]);
			
			for (int j = 0; j < SL.Size(); j++)
			{
				State s = defs.ResolveState(SL[j]);
				if (s && s.bDEHACKED)
				{
					DehackedRep.Push(rep[i]);
					break;
				}
			}
		}
		DehackedDone = true;
	}
	
	//--------------------------------------------------------------------------
	// Replacements
	//--------------------------------------------------------------------------
			
	override void CheckReplacement(ReplaceEvent e)
	{
		Class<Actor> rep = e.Replacee;
		Class<Actor> original = e.Replacement;
		if (!rep || rep is 'D4Nothing')	return;
		let defs = GetDefaultByType(rep);
		Name repn = rep.GetClassName();
		
		if (rep is 'TeleportFog')					e.Replacement = 'D4Fog';
		if (rep is 'Inventory')
		{
			if (rep is 'Ammo')
			{
				Switch (repn)
				{	
					Case 'Clip':			e.Replacement = 'D4BulletsSmall';	break;
					Case 'ClipBox':			e.Replacement = 'D4Bullets';		break;
					Case 'Shell':			e.Replacement = 'D4ShellsSmall';	break;
					Case 'ShellBox': 		e.Replacement = 'D4Shells';			break;
					Case 'RocketAmmo':		e.Replacement = 'D4RocketsSmall';	break;
					Case 'RocketBox':		e.Replacement = 'D4Rockets';		break;
					Case 'Cell':			e.Replacement = 'D4CellsSmall';		break;
					Case 'CellPack':		e.Replacement = 'D4Cells';			break;
					Default:				return;
				}
				if (CheckActorSpawn(BFGAmmo)) // BFG Ammo outright replaces cells unlike the others.
				{
					repn = e.Replacement.GetClassName();
					int chance = 0;
					
					Switch (repn)
					{
						Case 'D4CellsSmall':	chance = 10;	break;
						Case 'D4Cells':			chance = 35;	break;
					}
					if (chance > 0 && random[rng](1,256) <= chance)
					{
						e.Replacement = 'D4BFGAmmo';
						return;
					}
				}
			}
			else if (rep is 'Health')
			{
				Switch (repn)
				{
					Case 'Medikit':		e.Replacement = 'D4Medikit';		return;
					Case 'Stimpack':	e.Replacement = 'D4Stimpack';		return;
					Case 'HealthBonus':	e.Replacement = 'D4HealthBonus';	return;
					Case 'SoulSphere':
					{
						if (random[rngg](1, 20) <= 1)	e.Replacement = 'D4ExtraLife';
						else							e.Replacement = 'D4Regeneration';
						return;
					}
				}
			}
			else if (rep is 'Armor')
			{
				Switch (repn)
				{
					Case 'ArmorBonus': 	e.Replacement = 'D4ArmorBonus';	return;
					Case 'BlueArmor':	e.Replacement = 'D4BlueArmor';	return;
					Case 'GreenArmor':	e.Replacement = 'D4GreenArmor';	return;
				}
			}
			else if (rep == 'Backpack')		{	e.Replacement = 'D4Backpack';	return;	}
			
			// Weapons
			else if (rep is 'Weapon')
			{
				if (rep == 'Chainsaw')			
				{
					e.Replacement = 'D4Chainsaw';
				}
				else if (rep == 'Shotgun')
				{
					if (MPWeapons && random[rngg](0,1))
												e.Replacement = 'D4StaticRifle';
					else						e.Replacement = 'D4Shotgun';
				}
				else if (rep == 'SuperShotgun') 	
												e.Replacement = 'D4SuperShotgun';
													
				else if (rep == 'Chaingun')
				{
					int rng = random[rngg](0,2);
					if (MPWeapons)
					{
							 if (rng == 2)		e.Replacement = 'D4Chaingun';
						else if (rng == 1)		e.Replacement = 'D4AssaultRifle';
						else					e.Replacement = 'D4Repeater';
					}
					else
					{
						rng = random[rngg](0,1);
						if (rng == 1)			e.Replacement = 'D4Chaingun';
						else					e.Replacement = 'D4AssaultRifle';	
					}
				}
				else if (rep == 'RocketLauncher')	
				{
					if (MPWeapons && random[rngg](0,1))
												e.Replacement = 'D4GrenadeLauncher';
					else						e.Replacement = 'D4RocketLauncher';
				}
				else if (rep == 'PlasmaRifle')		
				{
					int rng = random[rngg](0,3);
					if (MPWeapons)
					{
							 if (rng == 3)		e.Replacement = 'D4GaussCannon';
						else if (rng == 2)		e.Replacement = 'D4VortexRifle';
						else if (rng == 1)		e.Replacement = 'D4LightningGun';
						else					e.Replacement = 'D4PlasmaRifle';
					}
					else
					{
						if (rng >= 2)			e.Replacement = 'D4GaussCannon';
						else					e.Replacement = 'D4PlasmaRifle';
					}
				}
				else if (rep == 'BFG9000')	
				{
					if (!SuperSpawned)
					{
						if (random[rngg](0,1))	e.Replacement = 'DEUnmakyr';
						else					e.Replacement = 'D4BFG';
					}
					else if (SuperSpawned == 'D4BFG')
						e.Replacement = 'DEUnmakyr';
					else
						e.Replacement = 'D4BFG';
						
					SuperSpawned = e.Replacement;
				}
				
			}
			
			// Powerups
			else if (rep is 'PowerupGiver')
			{
					 if (rep == 'BlurSphere')				e.Replacement = 'D4Haste';
				else if (rep is 'InvulnerabilitySphere')	e.Replacement = 'D4PentagramOfProtection';
				
				else if (rep == 'RadSuit') 					e.Replacement = 'D4RadSuit';
				else if (rep == 'Infrared') 				e.Replacement = 'D4Infrared';
			}
			else if (rep == 'Berserk')						e.Replacement = 'D4BerserkSpawner';
			else if (rep == 'MegaSphere')					
			{
				int rng = random[rngg](1,8);
					 if (rng == 1)		e.Replacement = 'D4ExtraLife';
				else if (rng == 2)		e.Replacement = 'D4DoomDoll';
				else					e.Replacement = 'D4Megasphere';
			}
			// Keys
			else if (rep is 'DoomKey')
			{
					 if (rep == 'RedCard') 			e.Replacement = 'D4RedCard';
				else if (rep == 'YellowCard') 		e.Replacement = 'D4YellowCard';
				else if (rep == 'BlueCard') 		e.Replacement = 'D4BlueCard';
				else if (rep == 'RedSkull') 		e.Replacement = 'D4RedSkull';
				else if (rep == 'YellowSkull')		e.Replacement = 'D4YellowSkull';
				else if (rep == 'BlueSkull') 		e.Replacement = 'D4BlueSkull';
			}
			else if (rep == 'AllMap') 				e.Replacement = 'D4AllMap';
		}
		else if (defs.bISMONSTER || rep is 'BossBrain')
		{
			// Allow Dehacked monsters to be unreplaced.
			if (D4D_Dehacked)
			{
				if (!DehackedDone)	RefreshDehackedList();
				int index = DehackedRep.Find(rep);
				if (index < DehackedRep.Size())
				{
					bool good = (D4D_Dehacked > 1);
					if (!good)
					{
						String nam = String.Format("D4DH_%s", DehackedRep[index].GetClassName());
						CVar cv = Cvar.FindCvar(nam);
						good = cv && cv.GetBool();
					}
					if (good)
					{
						e.Replacement = null;
						e.IsFinal = true;
						return;
					}
				}
			}
			
			if (rep == 'BossBrain')	{		e.Replacement = 'D4BossBrain'; return; }
			
			int rng = random[rngg](1,100);
			int chance = D4D_CustomSpawnBias;
			int type = D4D_MonsterType;
			
			if (type < 3 || rng > chance)
			{
				// Stealth
					 if (rep == 'StealthArachnotron')	e.Replacement = 'D4StealthArachnotron';
				else if (rep == 'StealthArchvile')		e.Replacement = 'D4StealthArchvile';
				else if (rep == 'StealthBaron')			e.Replacement = 'D4StealthBaronOfHell';
				else if (rep == 'StealthHellKnight')	e.Replacement = 'D4StealthHellKnight';
				else if (rep == 'StealthCacodemon')		e.Replacement = 'D4StealthCacodemon';
				else if (rep == 'StealthDemon')			e.Replacement = 'D4StealthDemon';
				else if (rep == 'StealthChaingunGuy')	
				{
					if (random[rng](0,1))				e.Replacement = 'D4StealthSergeantShield';
					else								e.Replacement = 'D4StealthChaingunGuy';
				}
				else if (rep == 'StealthDoomImp')		e.Replacement = 'D4StealthDoomImp';
				else if (rep == 'StealthFatso')			e.Replacement = 'D4StealthFatsoSpawner';
				else if (rep == 'StealthRevenant')		e.Replacement = 'D4StealthRevenant';
				else if (rep == 'StealthShotgunGuy')	e.Replacement = 'D4StealthShotgunGuy';
				else if (rep == 'StealthZombieMan')		e.Replacement = 'D4StealthZombieMan';
				
				// Regulars
				else if (rep == 'Arachnotron')			e.Replacement = 'D4Arachnotron';
				else if (rep == 'Archvile')				e.Replacement = 'D4Archvile';
				else if (rep == 'BaronOfHell')			e.Replacement = 'D4BaronOfHell';
				else if (rep == 'HellKnight')			e.Replacement = 'D4HellKnight';
				else if (rep == 'Cacodemon')			e.Replacement = 'D4Cacodemon';
				else if (rep == 'Cyberdemon')			e.Replacement = 'D4Cyberdemon';
				else if (rep == 'Demon')				e.Replacement = 'D4Demon';
				else if (rep == 'Spectre')				e.Replacement = 'D4Spectre';
				else if (rep == 'ChaingunGuy')
				{
					if (random[rng](0,1))				e.Replacement = 'D4SergeantShield';
					else								e.Replacement = 'D4ChaingunGuy';
				}
				else if (rep == 'DoomImp')				e.Replacement = 'D4DoomImp';
				else if (rep == 'Fatso')				
				{
					if (random[rng](0,1))				e.Replacement = 'D4FatsoTech';
					else								e.Replacement = 'D4FatsoHell';
					//e.Replacement = 'D4FatsoSpawner';
				}
				else if (rep == 'LostSoul')				e.Replacement = 'D4LostSoul';
				else if (rep == 'PainElemental')		e.Replacement = 'D4PainElemental';
				else if (rep == 'Revenant')				e.Replacement = 'D4Revenant';
				else if (rep == 'ShotgunGuy')			e.Replacement = 'D4ShotgunGuy';
				else if (rep == 'SpiderMastermind')		e.Replacement = 'D4SpiderMastermind';
				else if (rep == 'WolfensteinSS')		e.Replacement = 'D4OldWolfensteinSS';
				else if (rep == 'ZombieMan')			e.Replacement = 'D4ZombieMan';
			}
			
		}
		else if (rep is 'Blood')				e.Replacement = 'MCBloodSprite';
		else if (rep == 'BulletPuff')			e.Replacement = 'D4BulletPuff';
		else if (rep is 'ExplosiveBarrel')		e.Replacement = 'D4ExplosiveBarrel';
		else if (rep is 'PowerInvulnerable' && rep != 'PowerInvulBase')		
												e.Replacement = 'PowerInvulBase';
	}
	
	//--------------------------------------------------------------------------
	// Replaceees
	//--------------------------------------------------------------------------
	
	override void CheckReplacee(ReplacedEvent e)
	{
		Class<Actor> rep = e.Replacement;
		if (rep == null)	return;
		
		//Console.Printf("D4D: Checking replacement for %s", rep.GetClassName());
		//let mon = (Class<D4AbstractMonster>)(rep);
		//if (mon)
		Name repn = rep.GetClassName();
		let defs = GetDefaultByType(rep);
		if (rep is 'D4AbstractMonster')
		{
			let mon = (Class<D4AbstractMonster>)(rep);
			let defs = GetDefaultByType(mon);
			if (defs.Replacing)	
			{
				e.Replacee = defs.Replacing;
				e.IsFinal = true;
				
				if (D4D_PrintDebug == 2)
					Console.Printf("D4D: %s replaces %s", rep.GetClassName(), e.Replacee.GetClassName());
					
				return;
			}
		}
		else if (rep is 'Inventory')
		{
			if (rep is 'Armor')
			{
				Switch (repn)
				{
					Case 'D4ArmorBonus':	e.Replacee = 'ArmorBonus';	return;
					Case 'D4BlueArmor':		e.Replacee = 'BlueArmor';	return;
					Case 'D4GreenArmor':	e.Replacee = 'GreenArmor';	return;
				}
			}
			else if (rep is 'Ammo')
			{
				Switch (repn)
				{
					Case 'D4ShellsSmall':	e.Replacee = 'Shell';		return;
					Case 'D4Shells':		e.Replacee = 'ShellBox';	return;
					Case 'D4BulletsSmall':	e.Replacee = 'Clip';		return;
					Case 'D4Bullets':		e.Replacee = 'ClipBox';		return;
					Case 'D4RocketsSmall':	e.Replacee = 'RocketAmmo';	return;
					Case 'D4Rockets':		e.Replacee = 'RocketBox';	return;
					Case 'D4BFGAmmo':		e.Replacee = 'CellPack';	return;
					Case 'D4CellsSmall':	e.Replacee = 'Cell';		return;
					Case 'D4Cells':			e.Replacee = 'CellPack';	return;
				}
			}
			else if (rep is 'Doom4Weapon')
			{
				Switch(repn)
				{
					Case 'D4DFist':				e.Replacee = 'Fist';			return;
					Case 'D4Chainsaw':			e.Replacee = 'Chainsaw';		return;
					Case 'D4Pistol':			e.Replacee = 'Pistol';			return;
					Case 'D4StaticRifle':
					Case 'D4Shotgun':			e.Replacee = 'Shotgun';			return;
					Case 'D4SuperShotgun':		e.Replacee = 'SuperShotgun';	return;
					Case 'D4Chaingun':		
					Case 'D4AssaultRifle':
					Case 'D4Repeater':			e.Replacee = 'Chaingun';		return;
					Case 'D4RocketLauncher':	
					Case 'D4GrenadeLauncher':	e.Replacee = 'RocketLauncher';	return;
					Case 'D4PlasmaRifle':		
					Case 'D4LightningGun':
					Case 'D4VortexRifle':
					Case 'D4GaussCannon':		e.Replacee = 'PlasmaRifle';		return;
					Case 'DEUnmakyr':
					Case 'D4BFG':				e.Replacee = 'BFG9000';			return;
				}
			}
		}
	}
}

Class D4ReplaceService : Service
{	
	
	private String ProcessString(String request, String str, int type, double dArg, Object ob) const
	{
		Name req = request;
				
		Switch (req)
		{
			Case 'DNAChainsaw':			
				return "D4Chainsaw";
				
			Case 'DNAPistol':	
				return "D4Pistol";
				
			Case 'STFShotgun':
			Case 'DNAShotgun':
				return "Shotgun";
				
			Case 'DNASuperShotgun':
			Case 'STFSuperShotgun':
				return "D4SuperShotgun";
				
			Case 'DNAChaingun':
			Case 'STFChaingun':
			Case 'STFMinigun':
				return "D4Chaingun";
				
			Case 'GaussRifle':			
				return "D4GaussCannon";
				
			Case 'DNARocketLauncher':	
			Case 'STFRocketLauncher':
				return "RocketLauncher";
				
			Case 'GrenadeLauncher':		
			Case 'STFGrenadeLauncher':
				return "D4GrenadeLauncher";
				
			Case 'DNAPlasmaRifle':
			Case 'STFPlasmaRifle':
			Case 'STFRailgun':
				return "PlasmaRifle";
				
			Case 'DNABFG9000':	
			Case 'STFBFG9000':
			Case 'STFBFG10K':		
				return "BFG9000";
		}
		return request;
	}
	
	
	override String GetString(String request, String str, int index, double dArg, Object ob)
	{	return ProcessString(request, str, index, dArg, ob);	}
	
	override String GetStringUI(String request, String str, int index, double dArg, Object ob)
	{	return ProcessString(request, str, index, dArg, ob);	}
}