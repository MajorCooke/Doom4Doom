extend Class D4DHandler
{
	void CheckCrucibleSpawn(Actor mobj)
	{
		let mo = Doom4Weapon(mobj);
		if (!mo || mo.CountInv("CrateSpawned") || mo.Owner)	return;
		
		int chance = 0;
		Name repn = mo.GetClassName();
		Switch (repn)
		{
			Case 'D4BFG':			chance = 25;	break;
			Case 'D4Chainsaw':		chance = 10;	break;
			Default:				chance = 1;		break;
		}
		
		if (random[rng](1, 100) <= chance)
		{
			// Check if ammo spawns were previously enabled, but only if the player
			// isn't just entering the map.
			bool ammospawned = (Spawnable[CrucibleAmmo] && level.maptime > 10);
			let cruc = DECrucible(mo.Spawn('DECrucible', mo.pos, ALLOW_REPLACE));
			
			if (cruc)
			{
				cruc.vel = mo.vel;
				
				// Ammo has already spawned so don't bother.
				if (ammospawned)	return;
				
				let it = ThinkerIterator.Create('Ammo', Thinker.STAT_DEFAULT);
				Ammo mo = null;
				while (mo = Ammo(it.Next()))
				{
					if (!mo || mo is 'DECrucibleAmmo' || mo.owner)	continue;
					
					String s = mo.GetClassName();
					s = s.MakeLower();
					
					// Make sure it's not a flying pinata actor.
					if (s.IndexOf("pinata") > -1)	continue;
					
					if (mo is "D4Bullets" || mo is "D4Shells" || mo is "D4Rockets" ||
						mo is "D4Cells" || mo is "D4BFGAmmo")
					{
						int ran = random[rng](1,256);
						
						if (ran > DECrucibleAmmo_Chance)	continue;
						
						Actor cammo = mo.Spawn('DECrucibleAmmo', mo.pos, ALLOW_REPLACE);
						if (cammo)
						{
							cammo.Angle = mo.Angle;
							cammo.Pitch = mo.Pitch;
							cammo.Vel = mo.Vel;
						}
					}
				}
			}
		}
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	// Replacements
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	override void CheckReplacee(ReplacedEvent e)
	{
		Class<Actor> rep = e.Replacement;
		if (rep == null)	return;
		
		//Console.Printf("D4D: Checking replacement for %s", rep.GetClassName());
		//let mon = (Class<D4AbstractMonster>)(rep);
		//if (mon)
		Name repn = rep.GetClassName();
		let defs = GetDefaultByType(rep);
		
		if (rep is 'D4AbstractMonster')
		{
			let mon = (Class<D4AbstractMonster>)(rep);
			let defs = GetDefaultByType(mon);
			if (defs.Replacing)	
			{
				e.Replacee = defs.Replacing;
				e.IsFinal = true;
				
				if (D4D_PrintDebug > 0)
					Console.Printf("D4D: %s replaces %s", rep.GetClassName(), e.Replacee.GetClassName());
					
				return;
			}
		}
		else if (rep is 'Inventory')
		{
			if (rep is 'Armor')
			{
				Switch (repn)
				{
					Case 'D4ArmorBonus':	e.Replacee = 'ArmorBonus';	return;
					Case 'D4BlueArmor':		e.Replacee = 'BlueArmor';	return;
					Case 'D4GreenArmor':	e.Replacee = 'GreenArmor';	return;
				}
			}
			else if (rep is 'Ammo')
			{
				Switch (repn)
				{
					Case 'D4ShellsSmall':	e.Replacee = 'Shell';		return;
					Case 'D4Shells':		e.Replacee = 'ShellBox';	return;
					Case 'D4BulletsSmall':	e.Replacee = 'Clip';		return;
					Case 'D4Bullets':		e.Replacee = 'ClipBox';		return;
					Case 'D4RocketsSmall':	e.Replacee = 'RocketAmmo';	return;
					Case 'D4Rockets':		e.Replacee = 'RocketBox';	return;
					Case 'D4BFGAmmo':		e.Replacee = 'CellPack';	return;
					Case 'D4CellsSmall':	e.Replacee = 'Cell';		return;
					Case 'D4Cells':			e.Replacee = 'CellPack';	return;
				}
			}
			else if (rep is 'Doom4Weapon')
			{
				Switch(repn)
				{
					Case 'D4DFist':				e.Replacee = 'Fist';			return;
					Case 'D4Chainsaw':			e.Replacee = 'Chainsaw';		return;
					Case 'D4Pistol':			e.Replacee = 'Pistol';			return;
					Case 'D4StaticRifle':
					Case 'D4Shotgun':			e.Replacee = 'Shotgun';			return;
					Case 'D4SuperShotgun':		e.Replacee = 'SuperShotgun';	return;
					Case 'D4Chaingun':		
					Case 'D4AssaultRifle':
					Case 'D4Repeater':			e.Replacee = 'Chaingun';		return;
					Case 'D4RocketLauncher':	
					Case 'D4GrenadeLauncher':	e.Replacee = 'RocketLauncher';	return;
					Case 'D4PlasmaRifle':		
					Case 'D4LightningGun':
					Case 'D4VortexRifle':
					Case 'D4GaussCannon':		e.Replacee = 'PlasmaRifle';		return;
					Case 'D4BFG':				e.Replacee = 'BFG9000';			return;
				}
			}
		}
	}
	
	override void CheckReplacement(ReplaceEvent e)
	{
		Class<Actor> rep = e.Replacee;
		Class<Actor> original = e.Replacement;
		if (!rep || rep is 'Nothing')	return;
		
		let defs = GetDefaultByType(rep);
				
		Name repn = rep.GetClassName();
		
		if (rep is 'TeleportFog')					e.Replacement = 'D4Fog';
		else if (rep is 'Inventory')
		{
			if (rep is 'Ammo')
			{
				Switch (repn)
				{	
					Case 'Clip':			e.Replacement = 'ClipReplacer';			return;
					Case 'ClipBox':			e.Replacement = 'ClipBoxReplacer';		return;
					Case 'Shell':			e.Replacement = 'ShellReplacer';		return;
					Case 'ShellBox': 		e.Replacement = 'ShellBoxReplacer';		return;
					Case 'RocketAmmo':		e.Replacement = 'RocketAmmoReplacer';	return;
					Case 'RocketBox':		e.Replacement = 'RocketBoxReplacer';	return;
					Case 'Cell':			e.Replacement = 'CellReplacer';			return;
					Case 'CellPack':		e.Replacement = 'CellPackReplacer';		return;
				}
			}
			else if (rep is 'Health')
			{
				Switch (repn)
				{
					Case 'Medikit':		e.Replacement = 'D4Medikit';	return;
					Case 'Stimpack':	e.Replacement = 'D4Stimpack';	return;
					Case 'HealthBonus':	e.Replacement = 'D4HealthBonus';	return;
					Case 'SoulSphere':
					{
						if (random[rngg](1, 20) <= 1)	e.Replacement = 'D4ExtraLife';
						else							e.Replacement = 'D4Regeneration';
						return;
					}
				}
			}
			else if (rep is 'Armor')
			{
				Switch (repn)
				{
					Case 'ArmorBonus': 	e.Replacement = 'D4ArmorBonus';	return;
					Case 'BlueArmor':	e.Replacement = 'D4BlueArmor';	return;
					Case 'GreenArmor':	e.Replacement = 'D4GreenArmor';	return;
				}
			}
			else if (rep == 'Backpack')		{	e.Replacement = 'D4Backpack';	return;	}
			
			// Weapons
			else if (rep is 'Weapon')
			{
				if (rep == 'Chainsaw')			
				{
					e.Replacement = 'D4Chainsaw';
				}
				else if (rep == 'Shotgun' || repn == 'STFShotgun')
				{
					if (MPWeapons && random[rngg](0,1))
												e.Replacement = 'D4StaticRifle';
					else						e.Replacement = 'D4Shotgun';
				}
				else if (rep == 'SuperShotgun' || repn == 'STFSuperShotgun') 	
												e.Replacement = 'D4SuperShotgun';
													
				else if (rep == 'Chaingun' || repn == 'STFChaingun' || repn == 'STFMinigun')
				{
					int rng = random[rngg](0,2);
					if (MPWeapons)
					{
							 if (rng == 2)		e.Replacement = 'D4Chaingun';
						else if (rng == 1)		e.Replacement = 'D4AssaultRifle';
						else					e.Replacement = 'D4Repeater';
					}
					else
					{
						rng = random[rngg](0,1);
						if (rng == 1)			e.Replacement = 'D4Chaingun';
						else					e.Replacement = 'D4AssaultRifle';	
					}
				}
				else if (rep == 'RocketLauncher' || repn == 'STFRocketLauncher' || repn == 'STFGrenadeLauncher')	
				{
					if (MPWeapons && random[rngg](0,1))
												e.Replacement = 'D4GrenadeLauncher';
					else						e.Replacement = 'D4RocketLauncher';
				}
				else if (rep == 'PlasmaRifle' || repn == 'STFPlasmaRifle' || repn == 'STFRailgun')		
				{
					int rng = random[rngg](0,3);
					if (MPWeapons)
					{
							 if (rng == 3)		e.Replacement = 'D4GaussCannon';
						else if (rng == 2)		e.Replacement = 'D4VortexRifle';
						else if (rng == 1)		e.Replacement = 'D4LightningGun';
						else					e.Replacement = 'D4PlasmaRifle';
					}
					else
					{
						if (rng >= 2)			e.Replacement = 'D4GaussCannon';
						else					e.Replacement = 'D4PlasmaRifle';
					}
				}
				else if (rep == 'BFG9000' || repn == 'STFBFG9000' || repn == 'STFBFG10K')	
												e.Replacement = 'D4BFG';
			}
			
			// Powerups
			else if (rep is 'PowerupGiver')
			{
					 if (rep == 'BlurSphere')				e.Replacement = 'D4Haste';
				else if (rep is 'InvulnerabilitySphere')	e.Replacement = 'D4PentagramOfProtection';
				
				else if (rep == 'RadSuit') 					e.Replacement = 'D4RadSuit';
				else if (rep == 'Infrared') 				e.Replacement = 'D4Infrared';
			}
			else if (rep == 'Berserk')						e.Replacement = 'D4BerserkSpawner';
			else if (rep == 'MegaSphere')					
			{
				int rng = random[rngg](1,8);
					 if (rng == 1)		e.Replacement = 'D4ExtraLife';
				else if (rng == 2)		e.Replacement = 'D4DoomDoll';
				else					e.Replacement = 'D4Megasphere';
			}
			// Keys
			else if (rep is 'DoomKey')
			{
					 if (rep == 'RedCard') 			e.Replacement = 'D4RedCard';
				else if (rep == 'YellowCard') 		e.Replacement = 'D4YellowCard';
				else if (rep == 'BlueCard') 		e.Replacement = 'D4BlueCard';
				else if (rep == 'RedSkull') 		e.Replacement = 'D4RedSkull';
				else if (rep == 'YellowSkull')		e.Replacement = 'D4YellowSkull';
				else if (rep == 'BlueSkull') 		e.Replacement = 'D4BlueSkull';
			}
			else if (rep == 'AllMap') 					e.Replacement = 'D4AllMap';
		}
		else if (defs.bISMONSTER)
		{
			int rng = random[rngg](1,100);
			int chance = D4D_CustomSpawnBias;
			int type = D4D_MonsterType;
			
			if (type < 3 || rng > chance)
			{
				// Stealth
					 if (rep == 'StealthArachnotron')	e.Replacement = 'D4StealthArachnotron';
				else if (rep == 'StealthArchvile')		e.Replacement = 'D4StealthArchvile';
				else if (rep == 'StealthBaron')			e.Replacement = 'D4StealthBaronOfHell';
				else if (rep == 'StealthHellKnight')	e.Replacement = 'D4StealthHellKnight';
				else if (rep == 'StealthCacodemon')		e.Replacement = 'D4StealthCacodemon';
				else if (rep == 'StealthDemon')			e.Replacement = 'D4StealthDemon';
				else if (rep == 'StealthChaingunGuy')	
				{
					if (random[rng](0,1))				e.Replacement = 'D4StealthSergeantShield';
					else								e.Replacement = 'D4StealthChaingunGuy';
				}
				else if (rep == 'StealthDoomImp')		e.Replacement = 'D4StealthDoomImp';
				else if (rep == 'StealthFatso')			e.Replacement = 'D4StealthFatsoSpawner';
				else if (rep == 'StealthRevenant')		e.Replacement = 'D4StealthRevenant';
				else if (rep == 'StealthShotgunGuy')	e.Replacement = 'D4StealthShotgunGuy';
				else if (rep == 'StealthZombieMan')		e.Replacement = 'D4StealthZombieMan';
				
				// Regulars
				else if (rep == 'Arachnotron')			e.Replacement = 'D4Arachnotron';
				else if (rep == 'Archvile')				e.Replacement = 'D4Archvile';
				else if (rep == 'BaronOfHell')			e.Replacement = 'D4BaronOfHell';
				else if (rep == 'HellKnight')			e.Replacement = 'D4HellKnight';
				else if (rep == 'Cacodemon')			e.Replacement = 'D4Cacodemon';
				else if (rep == 'Cyberdemon')			e.Replacement = 'D4Cyberdemon';
				else if (rep == 'Demon')				e.Replacement = 'D4Demon';
				else if (rep == 'Spectre')				e.Replacement = 'D4Spectre';
				else if (rep == 'ChaingunGuy')
				{
					if (random[rng](0,1))				e.Replacement = 'D4SergeantShield';
					else								e.Replacement = 'D4ChaingunGuy';
				}
				else if (rep == 'DoomImp')				e.Replacement = 'D4DoomImp';
				else if (rep == 'Fatso')				
				{
					if (random[rng](0,1))				e.Replacement = 'D4FatsoTech';
					else								e.Replacement = 'D4FatsoHell';
					//e.Replacement = 'D4FatsoSpawner';
				}
				else if (rep == 'LostSoul')				e.Replacement = 'D4LostSoul';
				else if (rep == 'PainElemental')		e.Replacement = 'D4PainElemental';
				else if (rep == 'Revenant')				e.Replacement = 'D4Revenant';
				else if (rep == 'ShotgunGuy')			e.Replacement = 'D4ShotgunGuy';
				else if (rep == 'SpiderMastermind')		e.Replacement = 'D4SpiderMastermind';
				else if (rep == 'WolfensteinSS')		e.Replacement = 'D4OldWolfensteinSS';
				else if (rep == 'ZombieMan')			e.Replacement = 'D4ZombieMan';
			}
		}
		else if (rep is 'Blood')				e.Replacement = 'MCBloodSprite';
		else if (rep == 'BulletPuff')			e.Replacement = 'D4BulletPuff';
		else if (rep is 'ExplosiveBarrel')		e.Replacement = 'D4ExplosiveBarrel';
		else if (rep == 'BossBrain')			e.Replacement = 'D4BossBrain';
		else if (rep is 'PowerInvulnerable' && rep != 'PowerInvulBase')		
												e.Replacement = 'PowerInvulBase';
												
	}
}

/*
Class D4ReplacementManager
{
	Array<D4ReplacementInfo> RepInfo;
	
	static D4ReplacementManager Create()
	{
		let rep = new('D4ReplacementManager');
		if (rep)	rep.Init();
		return rep;
	}
	
	protected void Init()
	{
		RepInfo.Clear();
		
	}
	
	
	
	Class<Actor> FindReplacement(Class<Actor> who) const
	{
		
		return null;
	}
	
	Class<Actor> FindReplacee(Class<Actor> who) const
	{
		
		return null;
	}
}

Class D4ReplacementInfo
{
	Class<Actor> Replacee;
	Array<Class<Actor> > Replacement;
	Array<Int> Chance;
	
	static D4ReplacementInfo Create(Class<Actor> mo)
	{
		let repinfo = new('D4ReplacementInfo');
		if (repinfo)	repinfo.Init(mo);
		return repinfo;
	}
	
	protected void Init(Class<Actor> mo)
	{
		Replacee = mo;
		Replacement.Clear();
		Chance.Clear();
	}
	
	Class<Actor> FindReplacee(Class<Actor> mo, bool parent = false)
	{
		int size = Replacement.Size();
		if (!mo || size < 1)	return null;
		
		if (!parent)
			if (Replacement.Find(mo) < size)	return Replacee;
		else
			for (int i = 0; i < size; i++)
				if (mo is Replacement[i])	return Replacee;
			
		return null;
	}
	
	// Dangerous if used by addons, should there be any.
	private void _AddActor(String cls, int weight)
	{
		Mobj.Push(cls);
		Chance.Push(weight);
	}

	//--------------------------------------------------------------------------
	// The main function that handles everything needed to add an actor, 
	// ensuring it exists and ensures it at least has some weight. This allows
	// restricting monsters to either progression mode or random mode if desired.
	// If the actor is already in, simply modify the weight with the parameters.
	// Otherwise, push the initial stuff to the end of each array.
	void AddActor(String cls, int weight = 1)
	{
		if (cls == '' || cls == 'None' || weight < 1)
			return;
			
		Class<Actor> mon = cls;
		if (!mon)
		{
			Console.Printf("%s - bad actor", cls);	
			return;
		}
		
		int size = Mobj.Size();
		if (size > 0)
		{
			int pos = Mobj.Find(mon);
			if (pos < size)
			{
				Chance[pos] = weight;
				return;
			}
		}
		_AddActor(cls, weight);
	}
}
*/