//================================================================================================================
//================================================================================================================
//
//	"D4D mode" version
//	
//================================================================================================================
//================================================================================================================

/*
Rainbow Doom Monster Schematics
* Gains # health per level.

Uncommon
* 
	
Rare
* 
	
Epic
* 
	
Legendary
* 
	
Relic
* 

CURSED (Black)
* 

BLESSED (White)
* 
*/

Class D4HellKnight : D4AbstractBiggie //replaces HellKnight
{
	
	int timer;
	int count;
	int chasecount;
	
	Default 
	{
		D4AbstractMonster.Replacing 'HellKnight';
		D4AbstractMonster.Rune "KnightRune", RuneChance_Knight;
		D4AbstractMonster.CrateDropAmount 2;
		D4AbstractMonster.CrateDropChance 16;
		D4AbstractMonster.CashAmount 60;
		Health 500;
		Radius 24;
		Height 64;
		Mass 600;
		Speed 15;
		PainChance 128;
		Monster;
		+FLOORCLIP
		+BOSSDEATH
		+DONTCORPSE
		+DONTHARMSPECIES
		SeeSound "Doom4/Monsters/HellKnight/Sight";
		ActiveSound "Doom4/Monsters/HellKnight/Idle";
		PainSound "Doom4/Monsters/HellKnight/Pain";
		DeathSound "Doom4/Monsters/HellKnight/Death";
		HitObituary "$OB_KNIGHTHIT";
		Obituary "$OB_KNIGHT";
		Scale 0.65;
		Gravity 0.83;
		BloodColor "Green";
		PainChance "StunBomb", 255;
		PainChance "GloryKill", 255;
		WoundHealth 80;
		Tag "Hell Knight";
		Species "Bruiser";
	}
	States
	{
	Spawn:
		E02I A 0 NoDelay { MOD = ""; }
	Idle:
		E02I A 10 A_Look();
		Loop;
	See:
		E02W A 0
		{
			if (GetCvar("D4D_HKMeleeOnly"))
				A_SetSpeed(33);
			else
				A_SetSpeed(15);
		}
		E02W ABCDEFGH 3 D4Chase();
		Loop;
		
	SeeNoMissile:		//reached only when landing after a jump
		//then continues chasing, no jumping for a little while
		E02W ABCDEFGHABCDEFGH 3 D4Chase("Melee", null);
		Goto See;
		
		
	//--------------------------------------
	// Missile decide
	Missile:
		E02W A 0
		{
			if(GetCvar("D4D_HKMeleeOnly"))
			{ return ResolveState("LeapChooser");}
			else
			{ return ResolveState("FireballChooser"); }
		}
		
		LeapChooser:
			E02L A 0 A_JumpIfCloser(200,"See"); //if too close, dont leap
			E02L A 0 A_JumpIfCloser(768,"CanLeap"); //if middle point, jump
			Goto See;
		
		FireballChooser:
			"####" "#" 0 
			{
				HQ = GetCvar("HQEffects");
				return A_Jump(128,"FireBall");
			}
			Goto Leap;
			
			
	//--------------------------------------
	// Regular fireball
	FireBall:	
		E02M AAAAAA 1 
		{
			
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",0,28+random(6,-6),40,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",0,28,64,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M B 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",-15,15+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",-15,15+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",3,24,56,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M B 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",-20,12+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",-20,12+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",3,24,56,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M B 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",-25,8+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",-25,8+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",3,24,56,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M B 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",-30,4+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",-30,4+random(6,-6),56,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",3,24,56,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M C 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",-35,0+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",-35,0+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",6,27,48,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M CCC 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",-40,0+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",-40,0+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",6,27,48,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M D 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",25,8+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",25,8+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",25,8+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",15,-5,20,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M D 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",10,15+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",10,15+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",15,-5,20,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		E02M D 1
		{
			A_FaceTarget();
			if (HQ)
			{
				A_SpawnItemEx("BaronOfHellHandFlamelet",0,20+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",0,20+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronOfHellHandFlamelet",0,20+random(6,-6),48,0,0,frandom(0.8,1.8),0,SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("BaronFlameletSmallLight",15,-5,20,0,0,0,0,SXF_NOCHECKPOSITION);
			
			if(random(1,5)==5) { A_PlaySound("Doom4/Monsters/HellKnight/Attack",CHAN_AUTO); }
		}
		E02M E 5 A_SpawnProjectile("D4HellKnightBall");
		E02M FG 6;
		Goto See;
		
	//--------------------------------------
	// leap attack
	Leap:
		E01L A 0 
		{
			StateLabel next = "FireBall";
			
			// Make sure it's neither too close nor too far.
			if (target)
			{
				double dist = Distance3DSquared(target);
				if (dist >= (250 ** 2) && dist < (768 ** 2)) 
					next = "CanLeap";
			}
			return ResolveState(next);
		}
		Goto FireBall;
	CanLeap:
		E02I AAAA 3 A_FaceTarget();
		E02L A 3
		{
			timer = 0;
			//{ bNoPain = true; }
			A_FaceTarget();
			A_RearrangePointers(DefPtr, DefPtr, NullPtr, 4);
		}
		E02L A 1 
		{
			StateLabel next = null;
			if (target)
			{
				if (A_JumpIfHigherOrLower("Null",null)) //Target is below
				{
					A_FaceTarget(0,0,0,0,FAF_TOP,-4);
				}
				else if (A_JumpIfHigherOrLower(null,"Null")) //Target is above
				{
					A_FaceTarget(0,0,0,0,FAF_TOP,10 + Distance3D(target)/5.0);
				}
				else //Target's on (near) equal z
				{
					A_FaceTarget(0,0,0,0,FAF_TOP,Distance3D(target)/5.0);
				}
				A_ChangeVelocity(cos(pitch)*(Distance3D(target)/25) ,0, -sin(pitch)*(Distance3D(target)/11)  ,CVF_RELATIVE|CVF_REPLACE);
			}
			else next = "See";
			return ResolveState(next);
		}
		E02L A 1;
		
		LeapLoop:
			E02L BBBBC 1
			{
				tracer = null;
				A_SpawnItemEx("BaronLeapTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
				if (A_CheckFloor("Null"))
				{	return ResolveState("LeapEnd");	}
				if (vel.z == 0)
				{
					timer++;
					if (timer >= 35)
					{	return ResolveState("LeapEnd");	}
				}
				return ResolveState(null);
			}
			Wait;
		LeapEnd:
			E02L C 1 
			{
				A_PlaySound("fiend/land");
				{ bNoPain = false; }
				A_Stop();
			}
			E02L C 1;
		LeapLander:
			"####" "#" 1 A_JumpIf(vel.z >= 0 || pos.z <= GetZAt(0,0) || pos.z <= floorz,"LeepEndCont");
			Loop;
		LeepEndCont:
			"----" A 0 //Don't bother leaping again if something else is in the way such as a static actor.
			{
				if (HQ)
				{
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);	
				}
				A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_PlaySound("Doom4/Monsters/BaronCrash",7);
				A_QuakeEx(4,4,0,20,0,512,"",QF_SCALEDOWN);
			}
			
			E02L E 0 
			{
				A_RadiusThrust(8000,384,RTF_NOIMPACTDAMAGE);
				if(A_JumpIfCloser(192,"null"))
				{
					A_DamageTarget(random(15,30),"Melee",DMSS_AFFECTARMOR);
				}
			}
			E02L DEFGH 3;
			Goto SeeNoMissile;
			
		QuickMelee:
			"####" "#" 1 
			{
				A_DamageTracer(random(15,30),"Melee",DMSS_AFFECTARMOR);
				A_PlaySound("quake4/Misc/MeleeHit",5);
				A_PlaySound("fiend/land");
				{ bNoPain = false; }	
				A_RadiusThrust(8000,128,RTF_NOIMPACTDAMAGE);
			}
			E02L C 4 A_Stop();
			E02L C 1 A_CheckFloor("QuickMeleeFloorHit");
			Wait;
		QuickMeleeFloorHit:
			BOS4 P 0 
			{
				if (HQ)
				{
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);	
				}
				A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
				A_PlaySound("Doom4/Monsters/BaronCrash",7);
				A_SpawnItemEx("BaronShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_QuakeEx(4,4,0,20,0,512,"",QF_SCALEDOWN);
			}
			E02L E 0 A_RadiusThrust(8000,384,RTF_NOIMPACTDAMAGE);
			E02L DEFGH 3;
			Goto SeeNoMissile;
	
	//--------------------------------------
	//Melee attack
	Melee:
		PLAY A 0 
		{ if(random(1,5)==5) { A_PlaySound("Doom4/Monsters/HellKnight/Attack",CHAN_AUTO); } }
		PLAY A 0 A_Jump(256,"Melee1","Melee2");
	Melee1:
		E02M ABCC 3 A_FaceTarget();
		E02M D 3 
		{
			A_FaceTarget();
			A_PlaySound("Doom4/Other/MeleeSwing");
		}
		E02M E 3 A_CustomMeleeAttack(random(10,30),"Doom4/Other/MeleeHit");
		E02M FG 5;
		Goto See;
	Melee2:
		E02N ABCC 3 A_FaceTarget();
		E02N D 3 
		{
			A_FaceTarget();
			A_PlaySound("Doom4/Other/MeleeSwing");
		}
		E02N E 3 A_CustomMeleeAttack(random(10,30),"Doom4/Other/MeleeHit");
		E02N FG 5;
		Goto See;
	
	
	Pain:
		E02P A  2;
		E02P A  2 A_Pain();
		Goto See;
		
	Pain.StunBomb:
		E02P A 0 { bNoPain = true; }
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#" 0 { bNoPain = false; }
		Goto See;

	Death:
		E02D A 3 {bThruActors = true; }
		E02D B  3 A_Scream();
		E02D C  3 ;
		E02D D  3 A_NoBlocking();
		E02D EFGH 3;
		E02D I -1 { bCorpse = true; }
		Stop;
	
	// Finisher attack with animations OFF	
	GloryEnd:
		TNT1 A 0 A_Die("MeleePunch");
	Death.BerserkKill:
	Death.MeleePunch:
	Death.ChainsawPinata:
	XDeath:
		TNT1 A 10 CanRaise
		{
			XDeathGush();
			A_NoBlocking();
		}
		---- A RezTimer CanRaise DoCorpse();
		Stop;
	Raise:
		---- A 0 CheckRespawn();
		E02D I 3 DoResurrect();
		E02D HGFEDCBA  3;
		---- A 0 DoResurrect(1);
		Goto See;
	//------------------------------------------------------------------------
	// Start of Stagger / Glory Kill states
	//------------------------------------------------------------------------
	Wound:
		"####" "#" 1
		{
			if (GetCvar("D4D_ExecutionsON"))
			{
				if (countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("D4DHellKnightHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the Monster; heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if (GetCvar("D4D_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		E02P A 0 
		{
			if (GetCvar("D4D_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		E02P U 0;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 1
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(GetCvar("D4D_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			
			return ResolveState(null);
		}
		Loop;
		
	// Finisher attack(s) with animations ON
	Death.GloryKill:
		TNT1 A 0 { bSolid = false; }
		E02I AA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION) ;
		"####" A 0
		{
			if(countinv("GloryKill1Token"))
			{	return ResolveState("GloryEnd1"); }
			
			if(countinv("GloryKill2Token"))
			{	return ResolveState("GloryEnd2"); }
			
			if(countinv("GloryKill3Token"))
			{	return ResolveState("GloryEnd3"); }
			return ResolveState(null);
		}
	GloryEnd1:
		E02I AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		E02P AAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		E02I AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd2:
		E02I AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		E02P AAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		E02I AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd3:
		E02I AAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" I 0 A_ChangeVelocity(-8,0,10,CVF_RELATIVE);
		Goto GloryEnd;
		
	//------------------------------------------------------------------------
	// End of Stagger / Glory Kill states
	//------------------------------------------------------------------------
	}
}


Class BruiserDustCloud : Actor 
{
	Default 
	{
		+CLIENTSIDEONLY
		+NOINTERACTION
		Radius 2;
		Height 2;
		RenderStyle "Translucent";
		Alpha 0.5;
		Scale 0.7;
		+FORCEXYBILLBOARD
		+ROLLSPRITE
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,"One","Two","Three","Four");
	One:
		X201 A 3 
		{
			A_FadeOut(0.023);
			A_ScaleVelocity(0.97);
			A_SetScale(Scale.X+0.04);
			A_SetRoll(roll+10,SPF_INTERPOLATE);
		}
		Loop;
	Two:
		X201 B 3 
		{
			A_FadeOut(0.023);
			A_ScaleVelocity(0.97);
			A_SetScale(Scale.X+0.04);
			A_SetRoll(roll+10,SPF_INTERPOLATE);
		}
		Loop;
	Three:
		X201 C 3 
		{
			A_FadeOut(0.023);
			A_ScaleVelocity(0.97);
			A_SetScale(Scale.X+0.04);
			A_SetRoll(roll+10,SPF_INTERPOLATE);
		}
		Loop;
	Four:
		X201 D 3 
		{
			A_FadeOut(0.023);
			A_ScaleVelocity(0.97);
			A_SetScale(Scale.X+0.04);
			A_SetRoll(roll+10,SPF_INTERPOLATE);
		}
		Loop;
	}
}


//*********************************************
Class D4HellKnightBall : D4AbstractMissile
{
	Default 
	{
		Radius 6;
		Height 8;
		Speed 18;
		FastSpeed 25;
		Damage 7;
		Projectile;
		+RANDOMIZE
		RenderStyle "Add";
		Alpha 1;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		scale 0.65;
		Translation "0:255=%[0,0,0]:[0.6,1.4,0]";
		+FORCEXYBILLBOARD
		Decal "BaronFireballScorch";
	}
	States
	{
	Spawn:
		HIB1 AB 2 BRIGHT Light("GreenMediumFlicker3")
		{
			if (HQ)
			{
				A_SpawnItemEx("DoomImpBallFlamelet",random(-2,-8),random(8,-8),random(8,-8),0,0,frandom(0,0.6),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("DoomImpBallFlamelet",random(-2,-8),random(8,-8),random(8,-8),0,0,frandom(0,0.6),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("DoomImpBallFlamelet",random(-2,-8),random(8,-8),random(8,-8),0,0,frandom(0,0.6),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("DoomImpBallSmokeTrail",-5,random(2,-2),random(2,-2),0,0,0,0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BaronBallFlareTrail",-3,random(2,-2),random(2,-2),0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
		}
		Loop;
	Death:
		TNT1 A 0
		{
			if (HQ)
			{
				A_SpawnParticle("46D200",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("46D200",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("46D200",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("46D200",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("419900",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("419900",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("419900",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("419900",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("7BFF00",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("7BFF00",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("7BFF00",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnParticle("7BFF00",SPF_FULLBRIGHT,random(45,75),8,random(0,359),0,0,0,frandom(2,-2),frandom(2,-2),frandom(3,-3));
				A_SpawnItemEx("DoomImpExploParticle",0,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("DoomImpExploParticle",0,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("DoomImpExploParticle",0,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("DoomImpExploParticle",0,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
		}
		HIB1 CC 1 BRIGHT Light("GreenMediumFlicker1")	//had to separate
		{
			A_FadeOut(0.088);
			A_SetScale(Scale.X+0.1);
		}
		HIB1 DD 1 BRIGHT Light("GreenMediumFlicker2")
		{
			A_FadeOut(0.088);
			A_SetScale(Scale.X+0.1);
		}
		HIB1 EE 1 BRIGHT Light("GreenMediumFlicker3")
		{
			A_FadeOut(0.088); 
			A_SetScale(Scale.X+0.1);
		}
		HIB1 FF 1 BRIGHT Light("GreenSmallFlicker1")
		{
			A_FadeOut(0.088);
			A_SetScale(Scale.X+0.1);
		}
		HIB1 GG 1 BRIGHT Light("GreenSmallFlicker1")
		{
			A_FadeOut(0.088);
			A_SetScale(Scale.X+0.1);
		}
		Stop;
	}
}









//================================================================================================================
//================================================================================================================
//
//	Regular Doom version 
//
//================================================================================================================
//================================================================================================================

Class D4OldHellKnight : D4AbstractBiggie // : HellKnight ////replaces HellKnight
{
	
	Default 
	{
		D4AbstractMonster.Replacing 'HellKnight';
		D4AbstractMonster.Rune "KnightRune", RuneChance_Knight;
		D4AbstractMonster.CrateDropAmount 2;
		D4AbstractMonster.CrateDropChance 16;
		D4AbstractMonster.CashAmount 60;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 50;
		Monster;
		+FLOORCLIP
		
		Health 500;
		SeeSound "knight/sight";
		ActiveSound "knight/active";
		PainSound "knight/pain";
		DeathSound "knight/death";
		HitObituary "$OB_KNIGHTHIT";
		Obituary "$OB_KNIGHT";
		
		PainChance "StunBomb", 255;
		+DONTCORPSE
		PainChance "GloryKill", 255;
		WoundHealth 80;
		Tag "Hell Knight";
	}
	States
	{
	Spawn:
		BOS2 AB 10 A_Look();
		Loop;
	See:
		BOS2 AABBCCDD 3 D4Chase();
		Loop;
	Melee:
	Missile:
		BOS2 EF 8 A_FaceTarget();
		BOS2 G 8 A_BruisAttack;
		Goto See;
	Pain:
		BOS2 H  2;
		BOS2 H  2 A_Pain();
		Goto See;
	Raise:
		BOS2 O 8;
		BOS2 NMLKJI  8;
		Goto See;
		
	Pain.StunBomb:
		"####" "#" 0 { bNoPain = true; }
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#" 0 { bNoPain = false; }
		Goto See;
	GloryEnd:
		TNT1 A 0 A_Die("MeleePunch");
	Death.BerserkKill:
	Death.MeleePunch:
	Death.ChainsawPinata:
	XDeath:
		BOS2 I 0 XDeathGush();
	Death:
		BOS2 I 5 { bThruActors = true; }
		BOS2 J 5 A_Scream();
		BOS2 K  5;
		BOS2 L 5 A_NoBlocking();
		BOS2 MN 5;
		BOS2 O -1
		{
			A_BossDeath();
			bCorpse = true;
		}
		Stop;
	//------------------------------------------------------------------------
	// Start of Stagger / Glory Kill states
	//------------------------------------------------------------------------
	Wound:
		"####" "#" 1
		{
			if(GetCvar("D4D_ExecutionsON"))
			{
				if(countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("OldHellKnightHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the Monster; heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if(GetCvar("D4D_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		BOS2 H 0 
		{
			if(GetCvar("D4D_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		BOS2 U 0;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 1
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(GetCvar("D4D_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			
			return ResolveState(null);
		}
		Loop;
		
	// Finisher attack(s) with animations ON
	Death.GloryKill:
		TNT1 A 0 { bSolid = false; }
		BOS2 AA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0
		{
			if(countinv("GloryKill1Token"))
			{	return ResolveState("GloryEnd1"); }
			
			if(countinv("GloryKill2Token"))
			{	return ResolveState("GloryEnd2"); }
			
			if(countinv("GloryKill3Token"))
			{	return ResolveState("GloryEnd3"); }
			return ResolveState(null);
		}
	GloryEnd1:
		"####" AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		"####" HHHHHH 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd2:
		"####" AAAAAAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" A 0 A_Pain();
		"####" HHHHHH 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" AAAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		Goto GloryEnd;
	GloryEnd3:
		"####" AAAA 1 A_Warp(AAPTR_TARGET,-50,0,0,180,WARPF_NOCHECKPOSITION);
		"####" I 0 A_ChangeVelocity(-8,0,10,CVF_RELATIVE);
		Goto GloryEnd;
	}
}
