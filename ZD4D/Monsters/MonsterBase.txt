//===================================================================================
//===================================================================================
//
//	Chance to spawn demon rune
//  This value is "x". Formula to spawn any rune is 
//   "if(random(1,X) == 1)" 
//===================================================================================
//===================================================================================
enum RuneChances
{
	RuneChance_Knight = 18,
	RuneChance_Baron = 15,
	RuneChance_Rev = 18,
	RuneChance_Caco = 18,
	RuneChance_Fatso = 15,
	RuneChance_PainEl = 12,
	RuneChance_Cyber = 6,
	RuneChance_Master = 3,
	RuneChance_Arach = 15,
	RuneChance_Archie = 10,
}

Class D4AbstractMonster : D4Actor abstract
{
	int StaggerTimer;
	meta Class<Actor> Replacing;
	Array<MCBeam> Beams;
	Name PowerColor, ResurrectCvar;
	Class<DemonRuneBase> RuneItem;
	int RuneDropChance;
	D4DHandler Event;
	MCHandler MC;
	uint PrevWoundHealth;
	bool ResurrectCheck;
	uint ResurrectCheckTimer;
	Name MOD;
	Actor Spawner;
	bool HQ;
	transient CVar ExecuteCheck, StaggerCheck;
	
	Property Replacing: Replacing;
	Property ResurrectCvar: ResurrectCvar;
	Property PowerColor: PowerColor;
	Default
	{
		D4AbstractMonster.ResurrectCvar '';
		D4AbstractMonster.PowerColor 'D4D';
		BloodColor "Red";
		DamageFactor "Crush", 15.0;
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		PrevWoundHealth = WoundHealth;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Event = D4DHandler.Fetch();
		MC = MCHandler.Fetch();
	}
	private bool HasRezzer;
	private Actor Rezzer;
	override bool CanResurrect(Actor other, bool passive)
	{
		if (passive)
		{
			if (ResurrectCvar == '')	return true;
			Cvar check = Cvar.FindCVar(ResurrectCvar);
			bool good = (!check || check.GetBool());
			if (good)
			{
				HasRezzer = (other != null && !other.bKILLED);
				if (HasRezzer) Rezzer = other;
			}
			return good;
		}
		return true;
	}
	
	private void CheckResurrector()
	{
		if (HasRezzer && (!Rezzer || Rezzer.bKILLED))
		{
			A_SetShootable();
			A_Die("Silent");
		}
	}
	
	void DoResurrect(int stage = 0)
	{
		if (stage == 0)
			bNOPAIN = true;
		else
		{
			PostResurrect();
			bNOPAIN = false;
		}
	}
	
	void DoCorpse()
	{
		if (bBOSSSPAWNED)	Destroy();
		else				bCORPSE = true;
	}
	
	void AimHead(Actor mo)
	{
		if (!mo)	return;
		double zoff;
		zoff = (mo.player) ? mo.player.viewz : mo.GetCameraHeight();
		A_Face(mo, 0, 0, 0, 0, FAF_BOTTOM, zoff);
	}
	
	void A_StartBeam(
		Class<MCBeam> BeamName, Vector3 Off = (0,0,0), int Count = 1,
		Class<Actor> PuffName = "D4BulletPuff", int dmg = 0, double ang = 0, double pit = 0,
		double dist = 8192)
	{
		Count = Max(1, Count);
		
		Vector3 x, y, z, origin;
		[x, y, z] = MC_CoordUtil.GetAxes(Pitch,Angle,Roll);
		origin = Vec2OffsetZ(0,0,MissileHeight) + Off.x * x + Off.y * y + Off.z * z;
		
		if (dist <= 0.0)	dist = 8192.0;
		Actor Puff = LineAttack(angle + ang, dist, pitch + pit, dmg, 'None', PuffName, LAF_NOINTERACT);
		for (int i = 0; i < Count; i++)
		{
			let Beam = MCBeam(Spawn(beamname,origin));
			Beam.Angle = Angle;
			Beam.Pitch = Pitch;
			Beam.Target = self;
			Beam.Master = self;
			Beam.Tracer = Puff;
			Beam.OffX = Off.x;
			Beam.OffY = Off.y;
			Beam.OffZ = Off.z;
			Beams.Push(Beam);
		}
	}
	
	void A_UpdateBeamTracer(
		Class<Actor> PuffName = "D4BulletPuff", int dmg = 0, double ang = 0, double pit = 0,
		double dist = 8192)
	{
		int flags = LAF_NORANDOMPUFFZ;
		if (dmg <= 0)	flags |= LAF_NOINTERACT;
		Actor Puff = LineAttack(angle + ang, dist, pitch + pit, dmg, '', PuffName, flags);
		
		if (Beams.Size() < 1)	return;
		for (int i = 0; i < Beams.Size(); i++)
		{
			let mo = Beams[i];
			if (!mo)	continue;
			
			if (Puff)	mo.Tracer = Puff;
		}
	}
	
	void A_SetBeamTranslation(Name transname)
	{
		if (Beams.Size() < 1)	return;
		for (int i = 0; i < Beams.Size(); i++)
		{
			if (Beams[i]) Beams[i].A_SetTranslation(transname);
		}
	}
	
	void A_StopBeam(Sound StopSound = "")
	{
		if (Beams.Size() > 0)
		{
			A_StopSound(CHAN_WEAPON);
			A_PlaySound(StopSound, CHAN_WEAPON);
			for (int i = 0; i < Beams.Size(); i++)
			{
				let mo = Beams[i];
				if (mo)	mo.Die(self, null);
			}
			Beams.Clear();
		}
	}
	
	// Credit to Marisa Kirisame for helping with this.
	Actor SpawnProjectile(Class<Actor> proj, Vector3 off, vector2 AP = (0,0))
	{
		if (!proj)	return null;
		
		Vector3 px, py, pz;
		[px, py, pz] = MC_CoordUtil.GetAxes(Pitch, Angle, Roll);
	//	Vector3 origin = Vec2OffsetZ(0,0,0) + off.x * px + off.y * py + off.z * pz;
		
		
		bool sp = false; Actor gren = null;
		
		[sp, gren] = A_SpawnItemEx(proj, off.x, off.y, off.z, 0, 0, 0, AP.X, SXF_NOCHECKPOSITION);
		
		if (gren)
		{
			Vector3 dir = (px + py * tan(AP.X) + pz * tan(AP.Y)).unit();
			
			gren.Target = self;
			if (gren.bSEEKERMISSILE)	gren.Tracer = Target;
			gren.vel = dir * gren.speed;
			[gren.angle, gren.pitch] = MC_S7_Math.GetVectorAngles(gren.vel);
		}
		return gren;
	}
	
	//--------------------------------------------------------------------------
	// SetupPowerLevel
	// 
	// Randomizes and sets up the power level with the help of the overridable
	// function, ChoosePowerLevel. 
	// Customizable power level RNG that can be overridden for specific monsters.
	
	
	virtual int ChoosePowerLevel()
	{
		int rng = random(1, 2000);
		if (rng <= 1)	return 7;
		if (rng <= 5)	return 6;
		if (rng <= 10)	return 5;
		if (rng <= 30)	return 4;
		if (rng <= 60)	return 3;
		if (rng <= 100)	return 2;
		if (rng <= 200)	return 1;
		return 0;
	}
	int SetupPowerLevel(int amt = -1, bool nochange = false)
	{	
		int PrevAmt = CountInv("D4MonsterUpgrader");
		if (nochange) amt = PrevAmt;
		else if (amt < 0) amt = ChoosePowerLevel();
		
		A_SetInventory("D4MonsterUpgrader",Max(0,amt));
			
		if (amt > 0)
		{
			int hp = GetSpawnHealth();
			int amp = amt + 1;
			if (hp < 1000)	amp += 1;
			if (hp <= 500) 	amp += 1;
			if (hp <= 400) 	amp += 1;
			if (hp <= 300) 	amp += 1;
			if (hp <= 200) 	amp += 1;
			if (hp <= 100) 	amp += 1;
			A_SetHealth(hp * amp);
			Mass = Default.Mass * (amt + 1);
		}
		Name suffix = PowerColor;
		Switch(amt)
		{
			Default: 
			{
				if (PrevAmt > 0 && amt < 1)
				{
					Translation = Default.Translation;
				}
				return amt;
			}
			Case 1:	suffix = suffix.."_Green";	break;
			Case 2: suffix = suffix.."_Blue";	break;
			Case 3: suffix = suffix.."_Purple";	break;
			Case 4: suffix = suffix.."_Orange";	break;
			Case 5: suffix = suffix.."_Red";	break;
			Case 6: suffix = suffix.."_Black";	break;
			Case 7:	suffix = suffix.."_White";	break;
		}
		A_SetTranslation(suffix);
		return amt;
	}
	
	void PostResurrect()
	{
		SetupPowerLevel(-1, true);
		if (bFRIENDLY)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i]) continue;
				let plr = players[i].mo;
				if (!plr || plr.CountInv("D4MonsterUpgrader")) continue;
				
				if (plr is "PlayerArchvile")
				{
					species = plr.species;
					bTHRUSPECIES = true;
					bMTHRUSPECIES = true;
				}
			}
		}
		else
		{
			Species = Default.Species;
			bTHRUSPECIES = false;
			bMTHRUSPECIES = false;
		}
	}
	
	//--------------------------------------------------------------------------
	// Checks to see if HQ monster effects cvar is on or off.
	bool CheckEffects() const
	{
		return HQEffects;
	}
	
	// Do not check for staggering if the monster dies or still has health above
	// the threshold.
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		// Don't run this if dead or not shootable.
		if (health < 1 || (!bSHOOTABLE && !bVULNERABLE) || mod == 'Silent')
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
			
		if (!(flags & DMG_FORCED) && infighting < 1 && damage < TELEFRAG_DAMAGE)
		{
			if (source && source != self)
			{
				if (source.GetClass() == GetClass() && bDONTHARMCLASS)
					return -1;
					
				if (source.species == species && !bDOHARMSPECIES)
					return -1;
			}
		}
		
		// Do nothing further if no wound state is found, let the engine handle it instead.
		let WoundState = ResolveState("Wound");
		if (!WoundState)	return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		
		// We have a wound state to deal with. Temporarily remove the wound health
		// threshold and do the damage. Then restore it and check to see if under
		// that threshold. Otherwise, the internal engine would often bug out
		// and constantly make enemies go to the wound state and this instigates
		// a LOT of quirkiness.
		if (InStateSequence(CurState, ResolveState("StagLooper")))	
			flags |= DMG_NO_PAIN;
		
		int temp = WoundHealth;		WoundHealth = -1;
		damage = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		WoundHealth = temp;
		
		if (Health > 0 && Health <= WoundHealth && damage > 0)
		{	
			// If not already in the looping state, go to the initializing state.
			if (GetCvar("D4D_ExecutionsON") && GetCvar("D4D_MonsterStagger"))
			{
				WoundHealth = PrevWoundHealth;
				if (!InStateSequence(CurState, ResolveState("StagLooper")))
					SetState(WoundState);
			}
			else
			{
				PrevWoundHealth = WoundHealth;
				WoundHealth = -1;
			}
		}
		return damage;
	}
	
	override void Deactivate(Actor activator)
	{
		A_StopBeam();
		Super.Deactivate(activator);
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		HasRezzer = false;
		Tracer = null;
		A_StopBeam();
		if (Spawner && Spawner.health > 0)
		{
			Spawner.bVULNERABLE = true;
			Spawner.A_Die();
		}
		Super.Die(source, inflictor, dmgflags);
		bSOLID = false;
		if (DamageTypeReceived == 'Crush')
		{
			let next = FindState("XDeath", true);
			if (next)	SetState(next);
		}
	}
	
	// Don't let removing scripts leave gaps.
	override void OnDestroy()
	{
		if (health > 1)
		{
			if (Spawner && Spawner.health > 0)
			{
				Spawner.bVULNERABLE = true;
				Spawner.A_Die();
			}
		}
		A_StopBeam();
		Super.OnDestroy();
	}
	
	//--------------------------------------------------------------------------
	//
	// D4Chase(melee, missile, flags, max turn)
	//
	// A_Chase enhanced, + new parameter: Max turn.
	// Specifies how much in degrees the monster should turn towards its target.
	// -1 will not turn it.
	//--------------------------------------------------------------------------
	void D4Chase(statelabel melee = "Melee", statelabel missile = "Missile", int flags = 0, double maxturn = 30.0)
	{
		HasRezzer = false;
		//Fuckin' STAY DOWN!!!
		if (bKILLED || health < 1)
		{
			SetState(ResolveState("Death"));
			return;
		}
	
		int newflags = 0;
		
		if (D4D_EnhancedChase)
		{
			// Get a target if invalid.
			
			if (!Target || Target.bKilled)
			{
				A_Chase(null, null);
				return;
			}
			
			if (Target && Target.Health > 0 && CheckSight(Target,SF_IGNOREVISIBILITY)) // Use regular A_Chase if cannot see.
			{
				bool good = false;
				double ang = angle;
				A_Face(Target, Max(0.01, maxturn), 0, flags: FAF_MIDDLE);
				if (Target)
				{
					if (bFLOAT)
					{	
						
						double c = cos(Pitch) * Speed;
						double s = -sin(Pitch) * Speed;
						Vector3 old = pos;
						Vector2 new = Vec2Angle(c, angle);
						
						SetZ(pos.z + s);
						if (TryMove(new, bDROPOFF))
							good = true;
						else SetOrigin(old, false);
						
					}
					else
					{
						Vector2 nmpos = Vec2Angle(speed,angle);
						if (TryMove(nmpos, bDROPOFF))
							good = true;
					}
					
					// Move was good. Do the chase but without actually moving. 
					if (good)
					{
						newflags = CHF_DONTMOVE|CHF_DONTTURN|CHF_NODIRECTIONTURN|CHF_NOPOSTATTACKTURN;
						if (maxturn <= 0.0)
							angle = ang;
					}	
					else
						angle = ang;
				}
			}
		}
		A_Chase(melee, missile, flags|newflags);
	}
	
	//==========================================================================
	// SpawnRune
	//
	// Moved to EventItemDrops.txt
	//==========================================================================
	
	void SpawnRune()		{	}
	int RuneChance(int id)	{	return 0;	}
	
	//==========================================================================
	//
	// XDeathGush(int bcolor)
	//
	// Splatters the enemy. Accept 0, Color_Green, Color_Blue or Color_Black
	// for blood colors on the gib dropper.
	//==========================================================================
	protected bool gibbed;
	void XDeathGush(bool simple = false, bool actualgib = true)
	{
		gibbed = actualgib;
		bTHRUACTORS = true;
		MOD = DamagetypeReceived;
		if ((MOD != 'Massacre'))
		{
			
			if (simple)
			{
				//A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);
				let cloud = D4BloodCloud(Spawn("D4BloodCloud", pos + (0,0, height * 0.5), ALLOW_REPLACE));
				if (cloud)
				{
					cloud.tracer = self;
					cloud.Translation = (CountInv("D4MonsterUpgrader") ? Translation : BloodTranslation);
				}
			}
			else
			{
				let gibs = BloodGibDropper(Spawn("BloodGibDropper", pos));
				
				if (gibs)
				{
					gibs.angle = angle;
					gibs.tracer = self;
					gibs.vel = vel;
					int tier = CountInv("D4MonsterUpgrader");
					gibs.Translation = ((tier) ? Translation : BloodTranslation);
				}
			}
			if (!simple)	A_XScream();
			A_PlaySound("Doom4/Other/GibExplode",CHAN_AUTO);
		}
	}
	
	
	
	protected void CheckRespawn()
	{
		if (!gibbed)	return;
		
		let s = FindState('XRaise');
		if (s)	SetState(s);
	}
	
	protected void XRespawn(int phase)
	{
		if (phase == 0)
		{
			let mo = Spawn("SummonerSparksAlways", pos + (0, 0, height * 0.5));
			A_UnsetShootable();
		}
		else if (phase == 1)
		{
			HasRezzer = false;
			Rezzer = null;
			let mo = Spawn("SummonTeleportFog", pos);
			A_SetShootable();
			SetState(ResolveState("See"));
		}
	}
	
	States
	{
	XRaise:
		TNT1 A 1 XRespawn(0);
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 CheckResurrector();
		TNT1 A 1 XRespawn(1);
		Wait;
	Death.Silent:
		TNT1 A 35 { bTHRUACTORS = true; }
		TNT1 A -1 
		{ 
			bCORPSE = true;
			if (bBOSS || bBOSSDEATH)	A_BossDeath();	
		}
		Stop;
	}
}


Class D4AbstractBiggie : D4AbstractMonster abstract {}
Class D4AbstractBoss : D4AbstractBiggie abstract
{
	Default
	{
		DamageFactor "BFGBlast", 0.0;
		DamageFactor "GaussSiege", 0.15;
	}
}


Class PainSoundToken : Inventory
{}




//==================================================================================================
//	Wound health values, just for reference
// 
// MONSTER NAME       HEALTH    WOUND    |     HEALTH-D4D   WOUND-D4D    |  HEAL TO
// Zombieman            20       10      |        20          10         |     15          
// ShotgunGuy           30       10      |        30          10         |     15   
// ChaingunGuy          70       30      |        70          30         |     40   
// DoomImp              60       25      |        60          25         |     30    
// Demon/spectre       150       50      |       150          50         |     60   
// LostSoul            N/A      N/A      |       N/A         N/A         |    N/A   
// Cacodemon           300       80      |       400          80         |    100          
// PainElemental       400      100      |       400         100         |    101
// Revenant            300       80      |       400          80         |    100
// HellKnight          500      100      |       500         100         |    130
// BaronOfHell        1000      150      |      1000         150         |    180
// Fatso               600      110      |       800         120         |    130
// Arachnotron         500      100      |       500         100         |    130	
// Archvile            700      120      |      1000         150         |    130 - 180
// Cyberdemon         4000      150      |      4000         150         |    201
// SpiderMastermind   3000      150      |      3000         150         |    201
//
//==================================================================================================

//===================================================================================
//	Base actor from which they inherit
//===================================================================================
Class HighlightBase : Actor
{
	int MainCounter;
	int woundvalue;
	int RecoverToAmount;
	int StgrPainCounter;
	int StaggerLength;
	bool Highlight;
	double TimeMultiplier;
	Property TimeMultiplier: TimeMultiplier;
	Property RecoverToAmount: RecoverToAmount;
	Default
	{
		HighlightBase.TimeMultiplier 1.0;
		HighlightBase.RecoverToAmount 15;
		+NOINTERACTION
		RenderStyle "Add";
		Scale 1.1;
		Translation "0:255=%[0.2,0.2,0.2]:[1.5,0.75,0.0]";
		Alpha 0.4;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		StaggerLength = int((double(GetCvar("D4D_StaggerLenght")) * 35.0) * TimeMultiplier);
		Highlight = GetCvar("D4D_ExecutionHighlight");
		if (Master)
			bSPRITEFLIP = Master.bSPRITEFLIP;
	}
	
	override void OnDestroy()
	{
		if (Master)
		{
			Master.A_SetInventory("FinisherToken",0);	// Ends the effect
			if (MainCounter >= StaggerLength && Master.Health > 0)
				Master.A_SetHealth(RecoverToAmount);	// Heals up
		}
		Super.OnDestroy();
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		Goto Looper;
	Looper:
		---- A 1 Bright //by default, is invisible
		{
			if (!Master || Master.Health < 1 || MainCounter >= StaggerLength)
				return Destroy();
			
			if (Highlight)	//if the highlight is ON
				A_CopySpriteFrame(MasterPtr,0);		//copies the sprite
			
			Warp(Master,1,0,0,0,WARPF_NOCHECKPOSITION);
			
			if ((MainCounter % 35) <= 0) //if the stagger just started or one second has passed
				Master.A_GiveInventory("PainSoundToken",1);  //makes the parent actor play pain sound
				
			MainCounter++;	//increases the main counter
		}
		Loop;
	}
}


//===================================================================================
//	Zombieman & ShotgunGuy
//===================================================================================
Class ZombieHighlight : HighlightBase
{
	Default
	{
		HighlightBase.RecoverToAmount 15;
		Scale 1.05;
	}
}

//===================================================================================
//	ChaingunGuy
//===================================================================================
Class ChaingunnerHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 40;
		Scale 1.1;
	}
}

//===================================================================================
//	Imp
//===================================================================================
Class ImpHighlight : HighlightBase
{
	Default
	{
		HighlightBase.RecoverToAmount 30;
		Scale 1.1;
	}
}

//===================================================================================
//	Demon & spectre
//===================================================================================
Class DemonHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 60;
		Scale 0.765;
	}
}
Class OldDemonHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 60;
		Scale 1.1;
	}
}

//===================================================================================
//	Cacodemon
//===================================================================================
Class CacoHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 100;
		Scale 1.1;
	}
}
//===================================================================================
//	Pain Elemental
//===================================================================================
Class D4DPainElementalHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 101;
		Scale 1.1;
	}
}
Class OldPainElementalHighlight : D4DPainElementalHighlight	{}

//===================================================================================
//	Revenant
//===================================================================================
Class D4DRevenantHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 100;
		Scale 0.95;
	}
}
Class OldRevenantHighlight : D4DRevenantHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Hell knight
//===================================================================================
Class D4DHellKnightHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 130;
		Scale 0.69;
	}
}
Class OldHellKnightHighlight : D4DHellKnightHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Baron Of Hell
//===================================================================================
Class D4DBaronHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 180;
		Scale 0.77;
	}
}
Class BaronHighlight : D4DBaronHighlight
{
	Default
	{	
		Scale 1.1;
	}
}
//===================================================================================
//	Both Fatso variations
//===================================================================================
Class D4DFatsoHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 130;
		Scale 1.2;
	}
}
Class OldFatsoHighlight : D4DFatsoHighlight
{
	Default
	{	
		Scale 1.1;
	}
}
//===================================================================================
//	Arachnotron
//===================================================================================
Class ArachnoHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 130;
		Scale 1.1;
	}
}

//===================================================================================
//	Archvile
//===================================================================================
Class D4DArchHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 180;
		Scale 1.1;
	}
}
Class OldArchHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 130;
		Scale 1.1;
	}
}

//===================================================================================
//	Cyberdemon
//===================================================================================
Class CyberdemonHighlight : HighlightBase
{
	Default
	{	
		HighlightBase.RecoverToAmount 201;
		HighlightBase.TimeMultiplier 0.5;
		Scale 1.1;
	}
}

//===================================================================================
//	Mastermind
//===================================================================================
Class MastermindHighlight : CyberdemonHighlight	{}

//==============================================================================
// Rainbow Doom
// 
// Concept borrowed with permission from Cactus Hege's Colorful Hell.
// Developed by Major Cooke
//==============================================================================

Class D4MonsterUpgrader : Inventory
{
	Default
	{
		Inventory.MaxAmount MaxRunePower;
	}
}


Class D4StealthArachnotron : D4Arachnotron			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthArachnotron'; } }
Class D4StealthArchvile : D4Archvile 				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthArchvile'; } }
Class D4StealthBaronOfHell : D4BaronOfHell			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthBaron'; } }
Class D4StealthHellKnight : D4HellKnight			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthHellKnight'; } }
Class D4StealthCacoDemon : D4CacoDemon				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthCacoDemon'; } }
Class D4StealthChaingunGuy : D4ChaingunGuy			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthChaingunGuy'; } }
Class D4StealthSergeantShield : D4SergeantShield	{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthChaingunGuy'; } }
Class D4StealthDemon : D4Demon						{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthDemon'; } }
Class D4StealthDoomImp : D4DoomImp					{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthDoomImp'; } }
Class D4StealthFatsoTech : D4FatsoTech				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthFatso'; } }
Class D4StealthFatsoHell : D4FatsoHell				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthFatso'; } }
Class D4StealthRevenant : D4Revenant				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthRevenant'; } }
Class D4StealthShotgunGuy : D4ShotgunGuy			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthShotgunGuy'; } }
Class D4StealthZombieMan : D4ZombieMan				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthZombieMan'; } }

Class D4OldStealthArachnotron : D4OldArachnotron	{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthArachnotron'; } }
Class D4OldStealthArchvile : D4OldArchvile			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthArchvile'; } }
Class D4OldStealthBaronOfHell : D4OldBaronOfHell	{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthBaron'; } }
Class D4OldStealthHellKnight : D4OldHellKnight		{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthHellKnight'; } }
Class D4OldStealthCacoDemon : D4OldCacoDemon		{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthCacoDemon'; } }
Class D4OldStealthChaingunGuy : D4OldChaingunGuy	{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthChaingunGuy'; } }
Class D4OldStealthDemon : D4OldDemon				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthDemon'; } }
Class D4OldStealthDoomImp : D4OldDoomImp			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthDoomImp'; } }
Class D4OldStealthFatso : D4OldFatso				{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthFatso'; } }
Class D4OldStealthRevenant : D4OldRevenant			{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthRevenant'; } }
Class D4OldStealthShotgunGuy : D4OldShotgunGuy		{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthShotgunGuy'; } }
Class D4OldStealthZombieMan : D4OldZombieMan		{ Default { +STEALTH D4AbstractMonster.Replacing 'StealthZombieMan'; } }