//================================================================================================================
//================================================================================================================
//
//	"D4D mode" version
//	Lost soul, sprites ...
//================================================================================================================
//================================================================================================================

/*
Rainbow Doom Monster Schematics
* Gains # health per level.

Uncommon
* 
	
Rare
* 
	
Epic
* 
	
Legendary
* 
	
Relic
* 

CURSED (Black)
* 

BLESSED (White)
* 
*/

Class D4LostSoulNoCash : D4AbstractMonster 		//see at the bottom of the file for the version that DO give cash
{
	const SpawnDelay = 2;
	int chasecount;
	int wanderdelay;
	int wanderstopped;
	int WaitTics;
	bool charging;
	Class<Actor> Flame, Flare;
	uint8 FailFlame, FailFlare;
	Actor DeathSkull;
	Default
	{	
		D4AbstractMonster.Replacing 'LostSoul';
		Health 50;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		Damage 0;
		PainChance 256;
		Monster;
		+FLOAT  +NOGRAVITY +MISSILEMORE +DONTFALL +NOICEDEATH
		+FORCEXYBILLBOARD
		SeeSound "Doom4/Monsters/LostSoul/Sight";
		//AttackSound "skull/melee";
		PainSound "Doom4/Monsters/LostSoul/Pain";
		DeathSound "skull/death";
		ActiveSound "Doom4/Monsters/LostSoul/Idle";
		Obituary "$OB_SKULL";
		PainChance "StunBomb", 255;
		+DONTCORPSE
		//Cash drops = 1
		DropItem "C1";
		Tag "Lost Soul";
	}
	override int ChoosePowerLevel() { return 0; }
	override void Tick()
	{
		Super.Tick();
		if (health < 1)	return;
				
		if (WaitTics > 0)
			WaitTics--;
		else if (health > 0)
		{
			WaitTics = SpawnDelay;
			
			if (!A_CheckSight("Null"))
			{
				if (charging)
				{
					Flame = "LostSoulRedFlame";
					Flare = "LostSoulRedFlare";
				}
				else
				{
					Flame = "LostSoulBlueFlame";
					Flare = "LostSoulBlueFlare";
				}
				
				HQ = GetCvar("HQEffects");
				FailFlame = HQ ? 85 : 160;
				FailFlare = HQ ? 0 : 128;
				
				if (HQ || charging)
				{
					if (Flame) A_SpawnItemEx(Flame,random(-5,-15),random(10,-10),25,frandom(0,-1.5),frandom(1.5,-1.5),frandom(1,2),0,SXF_NOCHECKPOSITION,FailFlame);
					if (Flare) A_SpawnItemEx(Flare,-8,random(10,-10),25+random(10,-10),0,0,frandom(0.1,0.5),0,SXF_NOCHECKPOSITION,FailFlare);
				}
			}
		}
	}
	
	States
	{
	Spawn:
		PSUL A 2 BRIGHT Light("BlueSmallFlicker1")
		{
			if(bFriendly)
			{
				A_Wander();
			}
			charging = false;
			A_Look();
		}
		Loop;
	See:
		PSUL AAA 2 BRIGHT Light("BlueSmallFlicker1")
		{
			charging = false;
			chasecount = (chasecount + 1) % 2;
			if(chasecount)
				D4Chase(); 
			else
				D4Chase(null,null);
					
		}
		Loop;
		
	Melee:
		PSUL A 1 A_Die("SkullExplo");
		Goto Death.SkullExplo;
	Missile:
		PSUL A 0 
		{
			charging = true;
			A_FaceTarget();
			if (bFriendly)	
				return ResolveState("SkipWarning");
			PlaySound("Doom4/Monsters/LostSoul/Attack",CHAN_AUTO,0.6);
			return ResolveState(null);
		}
		PSUL AAAAAAAAAA 2 BRIGHT Light("RedMediumFlicker3")
		{
			A_FaceTarget();
		}
	SkipWarning:
		PSUL B 0 BRIGHT A_SkullAttack(DefSkullSpeed);	//attack frame
		PSUL B 2 BRIGHT Light("RedMediumFlicker3")
		{
			charging = true;
			if (bFRIENDLY)
			{
				A_FaceTarget(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch) * 30, 0, -sin(pitch) * 30,CVF_RELATIVE|CVF_REPLACE);
				if (!target || target.health < 1)
				{
					A_Stop();
					return ResolveState("See");
				}				
			}
			else
			{
				A_FaceTarget(2,2,0,0,FAF_MIDDLE);
				Vel3DFromAngle(DefSkullSpeed, Angle, Pitch);
			}
			return A_JumpIfTargetInsideMeleeRange("Melee");
		}
		Wait;
	Pain: 
		PSUL C 4 BRIGHT Light("BlueSmallFlicker1")
		{
			charging = false;
		}
		PSUL C 2 BRIGHT Light("BlueSmallFlicker1")
		{
			A_Pain();
		}
		Goto See;
	Pain.StunBomb:
		PSUL C 0 { bNoPain = true; }
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#" 0 { bNoPain = false; }
		Goto See;
	Death.Massacre:
		TNT1 A 0 A_GiveInventory("DeathByMassacre", 1);
		Goto Death;
	Death.SkullExplo:	
		TNT1 A 10 
		{
			bTHRUACTORS = true;
			charging = false;
			//if lost soul is friendly, deals more damage
			if (bFRIENDLY)
			{	
				int dmg = random(50,150);
				if (target)	target.DamageMobj(master, master, dmg, "Melee");
				
				if (master && master.FindInventory("PowerDrain",true) != null)
				{
					A_DamageMaster(-(dmg * 0.05));
				}
			} 
			else
			{	
				double rad = 64.0;
				int dmg = random(30,50);
				// Allows infighting and targeting pain elementals. 
				if (master && master.health > 0)
				{
					if (target && target.health > 0)
					{
						int rdmg = GetRadiusDamage(target, dmg, rad);
						if (rdmg > 0)
						{
							if (target.player)	rdmg /= 2;
							target.DamageMobj(master, master, rdmg, "Melee");
						}
					}
					if (!MC) MC = MCHandler.Fetch();
					if (MC)
					{
						int size = MC.Monsters.Size();
						if (size > 0)
						{
							for (int i = 0; i < size; i++)
							{
								Actor mo = MC.Monsters.Actors[i];
								if (!mo || mo.health < 1 || mo == self || mo == target)
									continue;
									
								if (Distance3DSquared(mo) > (rad ** 2) || !CheckSight(mo,SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
									continue;
									
								int rdmg = GetRadiusDamage(mo, dmg, rad);
								if (rdmg > 0)
								{
									Actor blame = master;
									if (!master)	blame = self;
									mo.DamageMobj(blame, blame, rdmg, 'Melee');
								}
							}
						}
					}
				}
				else
					A_Explode(dmg,rad,XF_NOTMISSILE);
			}
			bNOINTERACTION = true;
			
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_Scream();
			XDeathGush(simple: true);
		}
		Stop;
	Death.Massacre:
	Death.BFGExploder:
	Death.BFGBeam:
		TNT1 A 10
		{
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_Scream();
			XDeathGush(simple: true);
			A_Stop();
			bNOINTERACTION = true;
		}
		Stop;
	Death:
		TNT1 A 1 
		{
			charging = false;
			bThruActors = true;
			DeathSkull = Spawn("D4LostSoulDead", pos, ALLOW_REPLACE);
			if (DeathSkull)
			{
				DeathSkull.Angle = Angle;
				DeathSkull.Pitch = Pitch;
				DeathSkull.tracer = self;
				DeathSkull.vel = vel;
			}
			A_Stop();
			bNOINTERACTION = true;
		}
		---- A 1
		{
			StateLabel next = null;
			if (!DeathSkull)	next = "EndDeath";
			return ResolveState(next);
		}
		Wait;
	EndDeath:
		/*
		TNT1 A 2 Light("BlueMediumFlicker1");
		TNT1 A 2 Light("BlueMediumFlicker2");
		TNT1 A 2 Light("BlueMediumFlicker3");
		TNT1 A 2 Light("BlueSmallFlicker1");
		TNT1 A 2 Light("BlueSmallFlicker2");
		TNT1 A 2 Light("BlueSmallFlicker3");
		*/
		TNT1 A 12;
		Stop;
	}
}

Class D4LostSoulDead : D4Actor
{
	double RollAmt;
	Default
	{
		Projectile;
		+NOTRIGGER
		+NOGRAVITY
		+THRUACTORS
		+ROLLSPRITE
		+ROLLCENTER
		+SPRITEANGLE
		+BRIGHT
		+EXPLODEONWATER
		+SKYEXPLODE
		SpriteAngle 180;
		Radius 16;
		Height 56;
		Gravity 0.5;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (random(0,1))	bSPRITEFLIP = true;
		RollAmt = frandom(5.0, 30.0) * randompick(-1,1);
	}
	
	override void Tick()
	{
		Super.Tick();
		if (bNOINTERACTION)
			return;
		if (!bNOTIMEFREEZE)
		{
			if (IsFrozen())
				return;
		}		
		A_SetRoll(Roll + RollAmt, SPF_INTERPOLATE);
		Vel.Z -= Gravity;
	}
	
	States
	{
	Spawn:
		PSUL C 1;
		Wait;
	Death:
		TNT1 A 5
		{
			bNOINTERACTION = true;
			A_Stop();
			let soul = D4LostSoulNoCash(tracer);
			if (soul)	soul.DeathSkull = null;
			
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			
			A_SpawnItemEx("D4BloodCloud",0,0,height / 2.0, flags: SXF_NOCHECKPOSITION);
			PlaySound("Doom4/Other/GibExplode",CHAN_AUTO);
		}
		Stop;
	}
}





//*********************************************
// 
Class LostSoulExploParticle : D4DFX 
{
	Default 
	{
		+NOINTERACTION
		Alpha 0.6;
		Scale 0.4;
		RenderStyle "Add";
		Alpha 0.7;
		Translation "0:255=%[0,0,0]:[0.4,0.4,1.5]";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		FX58 ABCDEFGHIJKLMNOPQ 1 BRIGHT NODELAY
		{
			A_FadeOut(0.035);
			A_SetScale(Scale.X+0.075);
		}
		Wait;
	}
}




Class LostSoulRedFlame2 : D4DFX 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Add";
		Scale 0.3;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		R031 PQRSTUVWXYZ 2 A_FadeOut(0.05);
		Wait;
	}
}
Class LostSoulRedFlame : D4DFX 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+BRIGHT
		RenderStyle "Add";
		Alpha 0.8;
		XScale 0.6;
		YScale 0.4;
		Translation "0:255=%[0,0,0]:[2.0,0.5,0.5]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NODELAY A_Jump(256,"Type1","Type2","Type3","Type4","Type5");
	Type1:
		TNT1 A 0 A_Jump(220,random(2,5));
		X052 ABCDEFGHIJKLMNOPRS 1 Bright 
		{
			A_SetScale(Scale.X-0.03,Scale.Y-0.03);
			A_FadeOut(0.05);
		}
		Stop;
	Type2:
		TNT1 A 0 A_Jump(220,random(2,5));
		X053 ABCDEFGHIJKLMNOPRSTU 1 Bright 
		{
			A_SetScale(Scale.X-0.03,Scale.Y-0.03);
			A_FadeOut(0.05);
		}
		Stop;
	Type3:
		TNT1 A 0 A_Jump(220,random(2,5));
		X054 ABCDEFGHIJKLMNOPRS 1 Bright 
		{
			A_SetScale(Scale.X-0.03,Scale.Y-0.03);
			A_FadeOut(0.05);
		}
		Stop;
	Type4:
		TNT1 A 0 A_Jump(220,random(2,5));
		X055 ABCDEFGHIJKLMNOPRS 1 Bright 
		{
			A_SetScale(Scale.X-0.03,Scale.Y-0.03);
			A_FadeOut(0.05);
		}
		Stop;
	Type5:
		TNT1 A 0 A_Jump(220,random(2,5));
		X056 ABCDEFGHIJKLMNOPR 1 Bright 
		{
			A_SetScale(Scale.X-0.03,Scale.Y-0.03);
			A_FadeOut(0.05);
		}
		Stop;
	}
}

Class LostSoulBlueFlame : LostSoulRedFlame
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[0.7,0.9,2.0]";
	}
}

Class LostSoulRedFlare : D4DFX 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.9;
		Alpha 0.7;
		Translation "0:255=%[0,0,0]:[2.0,0.5,0.5]";
	}
	
	override void PostBeginPlay()
	{
		roll = random(0,359);
		Scale.X *= randompick(-1,1);
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		TNT1 A 2 NODELAY A_Jump(256,"Type1","Type2");
	Type1:
		PROJ DEFGHI 1 Bright;
		Stop;
	Type2:
		PROJ JKLMNO 1 Bright;
		Stop;
	}
}

Class LostSoulBlueFlare : LostSoulRedFlare
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[0.7,0.9,2.0]";
	}
}


//================================================================================================================
//================================================================================================================
//
//	Regular Doom version 
//
//================================================================================================================
//================================================================================================================


Class D4OldLostSoulNoCash : D4AbstractMonster
{
	Default 
	{
		D4AbstractMonster.Replacing 'LostSoul';
		Health 100;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		Damage 3;
		PainChance 256;
		Monster;
		+FLOAT  +NOGRAVITY +MISSILEMORE +DONTFALL +NOICEDEATH
		AttackSound "skull/melee";
		PainSound "skull/pain";
		DeathSound "skull/death";
		ActiveSound "skull/active";
		RenderStyle "SoulTrans";
		Obituary "$OB_SKULL";
		
		PainChance "StunBomb", 255;
		Tag "Lost Soul";
	}
	States
	{
	Spawn:
		SKUL AB 10 BRIGHT A_Look();
		Loop;
	See:
		SKUL AB 6 BRIGHT D4Chase();
		Loop;
	Missile:
		SKUL C 10 BRIGHT A_FaceTarget();
		SKUL D 4 BRIGHT A_SkullAttack;
		SKUL CD 4 BRIGHT;
		Goto Missile+2;
	Pain:
		SKUL E 3 BRIGHT;
		SKUL E 3 BRIGHT A_Pain();
		Goto See;
	Death:
		SKUL F 6 BRIGHT;
		SKUL G 6 BRIGHT A_Scream();
		SKUL H 6 BRIGHT;
		SKUL I 6 BRIGHT A_NoBlocking();
		SKUL J 6;
		SKUL K 6;
		Stop;
		
	Pain.StunBomb:
		"####" "#" 0 { bNoPain = true; }
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#######" 5 A_SpawnItemEx("StunBombSpark",0,random(10,-10),random(10,50),0,frandom(2,-2),frandom(0.1,2),0,SXF_NOCHECKPOSITION);
		"####" "#" 0 { bNoPain = false; }
		Goto See;
	Death:
		SKUL F 3 Bright A_Stop();
		SKUL G 3 Bright A_Scream();
		SKUL H 3 Bright;
		TNT1 A 0 
		{
			{ bThruActors = true; }
			if (HQ)
			{
				A_SpawnItemEx("LostSoulExploParticleRed",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticleRed",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticleRed",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticleRed",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticleRed",0,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			}
		}
		SKUL I 3 Bright A_NoBlocking();
		SKUL J 3;
		SKUL K 3;
		Stop;
	}
}


Class LostSoulExploParticleRed : D4DFX 
{
	int counter;
	Default 
	{
		+NOINTERACTION
		Alpha 0.6;
		Scale 0.4;
		RenderStyle "Add";
		Alpha 0.7;
		Translation "0:255=%[0,0,0]:[1.5,0.0,0]";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		FX58 ABCDEFGHIJKLMNOPQ 1 BRIGHT NODELAY
		{
			A_FadeOut(0.035);
			A_SetScale(Scale.X+0.075);
		}
		Wait;
	}
}





//================================================================================================================
//================================================================================================================
//
//	Lost souls WITH CASH, these are the ones used in the spawners
//
//================================================================================================================
//================================================================================================================

Class D4LostSoul : D4LostSoulNoCash //replaces LostSoul
{
	Default 
	{
		D4AbstractMonster.Replacing 'LostSoul';
		Health 50;
		+DONTCORPSE
	}
}

Class D4OldLostSoul : D4OldLostSoulNoCash
{
	Default 
	{
		D4AbstractMonster.Replacing 'LostSoul';
		+DONTCORPSE
	}
}