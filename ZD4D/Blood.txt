//================================================================
//================================================================
//
//	3.X New Blood Effects
//
//================================================================
//================================================================

Class ShortGibToken		: Inventory { Default { +INVENTORY.IGNORESKILL } }
Class BloodSpriteToken	: Inventory { Default { +INVENTORY.IGNORESKILL Inventory.MaxAmount 2;	Inventory.InterHubAmount 2; } }

Class MCBloodSprite : Actor
{
	double RollAmt;
	Default
	{
		+NOINTERACTION
		+DONTSPLASH
		+ROLLSPRITE
		//+NOTIMEFREEZE
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		-NOGRAVITY;
		RenderStyle "Translucent";
		Radius 1;
		Height 1;
		Gravity 0.20;
		Scale 0.3;
		//DistanceCheck "D4D_MaxDrawDistance";
		
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		RollAmt = frandom[r](2.0, 10.0) * frandompick[r](-1, 1);
		bXFLIP = random(0,1);
		bYFLIP = random(0,1);
	}
	
	override void Tick()
	{
		if (!bNOTIMEFREEZE)
		{
			if (IsFrozen())
				return;
		}
		Super.Tick();
		A_SetRoll(roll + RollAmt, SPF_INTERPOLATE);
		if (!bNOGRAVITY)
			vel.z -= abs(Gravity);
	}
	
	
	States
	{
	Spawn:
		TNT1 A 0 A_Jump(256,"B1Play","B2Play","B3Play");
	B1Play:
		X057 ABCDEF 2 A_FadeOut(0.05);
		"####" GHIJK 1 A_FadeOut(0.05);
		"####" LMNOPQRS 1 A_FadeOut(0.03);
		Wait;
	B2Play:
		X058 ABCDEF 2 A_FadeOut(0.05);
		"####" GHIJK 1 A_FadeOut(0.05);
		"####" LMNOPQR 1 A_FadeOut(0.03);
		Wait;
	B3Play:
		X059 ABCD 2 A_FadeOut(0.03);
		"####" EFGHIJ 1 A_FadeOut(0.04);
		"####" KLM 1 A_FadeOut(0.05);
		Wait;
	}
}

//--------------------------------
Class D4BloodCloud : Actor
{
	Default
	{
		+NOINTERACTION
		+CLIENTSIDEONLY
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		Scale 0.45;
	}
	double GibletsDropped;
	double GrowIncrement;
	States
	{
	Precache:
		X050 CDEFGH 0;
	Spawn:
		X050 C 0 NODELAY
		{
			Roll = frandom(0,359);
			bSPRITEFLIP = random(false, true);
			Frame = random(Fr_C, Fr_H);
			GibletsDropped = D4D_Giblets; //copy the value from the "gore level" in menu
			GrowIncrement = 0.03+(GibletsDropped/150); //base value (RAdd) + number of "gore level"
			StateLabel next = "MinGore";
			if (GibletsDropped)	next = "IncreasedGore";
			return ResolveState(next); 
		}
	PlayOut:
		"####" "#" 0
		{
			if (GibletsDropped)		return ResolveState("IncreasedGore");
			return ResolveState("MinGore");
		}
	MinGore:	//when gore = 0, will grow to 0.03
		"####" "#" 1 
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X+0.03);
		}
		Wait;
	IncreasedGore: //when gore != 0, will increase depending on the gore level
		"####" "#" 1 
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X + GrowIncrement);
		}
		Wait;
	}
}

//***************************************
Class NewJunk : Junk //replaces Junk
{
	Default
	{
		+NOTELESTOMP
		+THRUACTORS
		+NOTONAUTOMAP
	}
}


Class GibSpawnerBase : D4DFX
{
	const MulMin = 1.0;
	const MulMax = 2.0;
	bool simple, ShortGibTime;
	Color BC;
	double RAdd;
	
	Array<Class<Actor> > Gib;
	Array<Int> Amt;
	Array<int> SimpleGib;
	
	Property ShortGibTime: ShortGibTime;
	Property RAdd: RAdd;
	//--------------------------------------------------------------------------
	// PostBeginPlay
	//
	// Since we have no reason to even do anything else, take care of business 
	// go away.
	//--------------------------------------------------------------------------
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		DropItem di;   // di will be our drop item list iterator
		DropItem drop; // while drop stays as the reference point.
		
		drop = GetDropItems();
		if (!drop)	{	Destroy();	return;	}
		if (!simple && A_CheckSightOrRange(BloodDistanceLimit,"Null"))
			simple = true;
		
		Actor trc = tracer; 
		if (!trc)	trc = self;
		int Clouds = D4D_BloodClouds * 2;
		for (int i = 0; i < Clouds; i++)
		{
			let cloud = D4BloodCloud(Spawn("D4BloodCloud", pos + (0,0, random[rng](20,40)), ALLOW_REPLACE));
			if (cloud)
			{
				cloud.tracer = trc;
				cloud.Translation = (trc.CountInv("D4MonsterUpgrader") ? trc.Translation : trc.BloodTranslation);
			}
		}
		
		bool first = true;
		int GibMax = (simple) ? 1 : D4D_SplatterGiblets;
		for (di = drop; di != null; di = di.Next)
		{
			int Amount = di.Amount;
			int Prob = di.Probability;
			if (Amount == 0 || Prob < 1 || (simple && !first))	continue;
			
			if (Amount < 0)	Amount = 1;
		
			if (di.Name == 'None')
			{
				Destroy();
				return;
			}
			Class<Actor> Check = di.Name;
			if (!Check)
			{
				Console.Printf(di.Name..": bad actor");
				continue;
			}
			
			double r = radius, h = height;
			if (tracer)
			{
				r = tracer.radius;
				h = tracer.height;
			}
			for (int k = 0; k < GibMax; k++)
			{
				for (int j = 0; j < Amount; j++)
				{
					if (simple && !first)
						continue;
						
					if (Prob < random[rng](1,254))
						continue;
						
					first = false;
					
					let spawned = FlyingFlesh(Spawn(Check, pos));
					// The target is intentionally set to this
					if (spawned)	
					{	
						
						spawned.Warp(self, 
							frandom(-r,r),frandom(-r,r),frandom(0.0,h),frandom(0,359),WARPF_NOCHECKPOSITION);
						spawned.Pitch = Pitch;
						spawned.Angle = Angle;
						spawned.Target = self; 
						spawned.Master = Master;
						spawned.Tracer = Tracer;
						spawned.ShortGibTime = ShortGibTime;
						Vector3 tvel = tracer ? tracer.vel : (frandom(-5.0,5.0), frandom(-5.0,5.0), frandom(0.0,5.0));
						spawned.A_ChangeVelocity(
							tvel.X * frandom(MulMin,MulMax) + frandom(-RAdd,RAdd),
							tvel.Y * frandom(MulMin,MulMax) + frandom(-RAdd,RAdd),
							tvel.Z * frandom(MulMin,MulMax) + frandom(-RAdd,RAdd),
							CVF_REPLACE);
						
						spawned.Translation = (tracer) ? tracer.Translation : Translation;
						//else		spawned.BC = Color(255, 255, 0, 0);
					}
				}
			}
		}
		Destroy();
		return;
	}
	Default
	{
		Radius 25;
		Height 50;
		GibSpawnerBase.RAdd 8;
		GibSpawnerBase.ShortGibTime false;
		+NOTELESTOMP
		+NOTONAUTOMAP
		+NOINTERACTION
		+INVISIBLE
		RenderStyle "None";
		BloodColor "Red";
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}
//===============================================================================
//===============================================================================
//
//	Blood style gibs
//
//===============================================================================
//===============================================================================

Class BloodGibDropper : GibSpawnerBase
{
	Default
	{
		DropItem "NewMeat", 256, 1;
		DropItem "NewMeat", 192, 1;
		DropItem "NewMeat", 128, 1;
		DropItem "NewMeat", 64, 1;
		DropItem "BloodGib1", 56, 1;
		DropItem "BloodGib2", 56, 1;
		DropItem "BloodGib3", 56, 1;
		DropItem "BloodGib4", 56, 1;
	}
}

Class BloodGibDropperOld : Actor
{
	const RAdd = 5;
	bool ShortGibTime;
	double  GibletsDropped;
	double  GibletsXYForce;
	double  GibletsZForce;
	int Count, Clouds;
	Color BC;
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0
		{
			if (A_CheckRange(2048,"Null"))
			{	return ResolveState("CloudOnly");	}
						
			Clouds = 			D4D_BloodClouds;
			GibletsDropped = 	D4D_SplatterGiblets; 		//copy the value from the "gore level" in menu
			GibletsXYForce = 	RAdd + (GibletsDropped/1.5); 	//base value (RAdd) + number of "gore level"
			GibletsZForce = 	RAdd + (GibletsDropped/2); 	//base value (RAdd) + (number of "gore level"+(number of "gore level" /2))
			A_FaceMovementDirection(0,0);
			
			if (A_CheckSight("Null"))
				return ResolveState("Simple");
				
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					Actor plr = players[i].mo;
					if (plr && plr.AbsAngle(plr.angle, plr.AngleTo(self)))
					{
						return ResolveState(1);
					}
				}
			}
			return ResolveState("Simple");
		}
		TNT1 A 0
		{
			for (int i = 0; i < Clouds; i++)
				A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);	
				
			
			if (GibletsDropped <= 0)
				return ResolveState("Null");
			return ResolveState(1);
		}
	SpawnGiblets:
		TNT1 A 1
		{
			/*
			for (int i = 0; i < GibletsDropped; i++)
			{	
				int j = 0;
				for (j = 0; j < 4; j++)
					A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50), vel.x+frandom(GibletsXYForce,-GibletsXYForce), vel.y+ frandom(GibletsXYForce,-GibletsXYForce), frandom(3,GibletsZForce+4), 0,GibFlags,j * 64);
				
				
				static const Class<Actor> gibs[] = 
				{ "BloodGib1", "BloodGib2", "BloodGib3", "BloodGib4" };
				int size = gibs2.Size();
				for (j = 0; j < size; j++)								
					A_SpawnItemEx(gibs[i],random(25,-25),random(25,-25),random(10,50), vel.x+frandom(GibletsXYForce,-GibletsXYForce), vel.y+ frandom(GibletsXYForce,-GibletsXYForce), frandom(3,GibletsZForce+4), 0,GibFlags,200);
			}
			*/
		}
		Stop;
	Simple:
		TNT1 A 0 { if (Clouds > 0)	{	A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);	} }
		TNT1 A 1
		{
			if (GibletsDropped <= 0)
			{	Destroy(); return;	}
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags);
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags);
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags);
			A_SpawnItemEx("NewMeat",random(25,-25),random(25,-25),random(10,50),random(1,2)*vel.x+frandom(-5,5),random(1,2)*vel.y+frandom(-5,5),frandom(1,2)*vel.z+frandom(1,10),random(-30,30),GibFlags);
			A_SpawnItemEx("BloodGib1",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags);
			A_SpawnItemEx("BloodGib2",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags);
			A_SpawnItemEx("BloodGib3",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags);
			A_SpawnItemEx("BloodGib4",random(25,-25),random(25,-25),random(10,50),vel.x*frandom(1,2)+frandom(-RAdd,RAdd),vel.y*frandom(1,2)+frandom(-RAdd,RAdd),frandom(0.5,RAdd),0,GibFlags);
		}
		Stop;
	CloudOnly:
		TNT1 A 0
		{
			A_SpawnItemEx("D4BloodCloud",random(15,-15),random(15,-15),random(20,40),0,0,0,0,CloudFlags);
		}
		Stop;
	}
}

//==============================================================================
//==============================================================================
//
//	A_TossGib with blood trails
//
//==============================================================================
//==============================================================================
Class FlyingFlesh : Actor
{
	bool ShortGibTime;
	double RollAmt;
	
	void SpawnBloodTrail()
	{
		let blood = Actor(Spawn("MCBloodSprite", pos));
		if (blood)
		{
			blood.vel = vel * frandom(0.2, 0.4);
			blood.Translation = Translation;
			blood.A_FaceMovementDirection();			
		}
	}
	
	override void PostBeginPlay()
	{
		Actor.PostBeginPlay();
		Roll = random(0,359);
		RollAmt = frandom(-10.0, 10.0);
	}
	
	override void Tick()
	{
		if (!bNOTIMEFREEZE)
		{
			if (IsFrozen())
				return;
		}
		if (bROLLSPRITE)	A_SetRoll(roll + RollAmt, SPF_INTERPOLATE);
		Super.Tick();
	}
}

Class BloodGiblet : FlyingFlesh
{
	bool other;				// External reasons, nothing to see here! >.>;
	
	Default
	{
		Projectile;
		-NOGRAVITY
		+THRUACTORS
		+ROLLSPRITE
		Damage 0;
		Height 3;
		Radius 2;
		//Speed 10;
		Gravity 0.5;
		Scale 0.2;
	//	Translation "0:255=%[0,0,0]:[1,0,0]";
		Decal "BloodSplat";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			return ResolveState("Moving");
		}
	Moving:
		ANYG PQRS 2 
		{
			if (D4D_BloodTrails > 0)
				SpawnBloodTrail();
		}
		Loop;
	Death:
		ANYG T 1 { bROLLSPRITE = false; }
		Stop;
	}
}

Class NewMeat : FlyingFlesh //replaces Meat
{
	int Timer;
	Default
	{
		Projectile;
		-NOGRAVITY
		+THRUACTORS
		-NOLIFTDROP
		+DROPOFF
		+NOTELEPORT
		+NOTELESTOMP
		+NOTONAUTOMAP
		-NOGRAVITY
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		-BOUNCEONWALLS
		+MOVEWITHSECTOR
		Radius 6;
		Height 5;
		Gravity 0.6;
		BounceFactor 0.2;
		BounceType "Doom";
		Decal "BloodSplat";
		//speed 30 //for testing
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	}
	
	void GibTick (int TimeLimit = 172)
	{
		if (Timer++ > TimeLimit || pos.z <= GetZAt())
		{	ExplodeMissile(null, null);	return;	}
		else if (!A_CheckSightOrRange(BloodDistanceLimit,"Null"))
			SpawnBloodTrail();
	}
	
	void GibDeath()
	{
		bROLLSPRITE = false;
		A_SetTics(random(300,600));
		if (D4D_BloodSplatters && !A_CheckRange(BloodDistanceLimit,"Null",true))
		{	
			if (pos.z - floorz <= 16)
			{	A_SpawnItemEx("D4BloodSplatFloor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
			if (ceilingz - (pos.z + height) <= 16)
			{	A_SpawnItemEx("D4BloodSplatCeiling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	}
		}
		bNoLiftDrop = false;
		int Tics = (ShortGibTime || D4D_ShortGibLives > 0) ? 0 : random(300,600);
		A_SetTics(Tics);
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			Frame = random(Fr_A, Fr_T);
			return ResolveState("Play1");
			//A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
		}
		MEAT ABCDEFGHIJLKMNOPQRST 0 { return ResolveState("Play1"); }
	Play1:
		"####" "#" 2 GibTick();
		Loop;
	md1:
	Death:
		"####" "#" 350 GibDeath();
		"####" "#" 1 A_FadeOut();
		Wait;
	}
}


Class BloodGib1 : NewMeat
{
	Default
	{
		Projectile;
		-NOGRAVITY
		+THRUACTORS
		-NOLIFTDROP
		+DROPOFF
		+NOTELEPORT
		+NOTELESTOMP
		+NOTONAUTOMAP
		-NOGRAVITY
		BounceFactor 0.2;
		BounceType "Doom";
		+BOUNCEONFLOORS	
		+BOUNCEONCEILINGS
		-BOUNCEONWALLS
		+MOVEWITHSECTOR
		Scale 0.6;
		Radius 6;
		Height 5;
		Gravity 0.7;
		// speed 30 //for testing
		Decal "BloodSplat";
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SetScale((Scale.X-(Scale.X*frandom(-0.10,0.10)))*randompick(-1,1),Scale.Y-(Scale.Y*frandom(-0.10,0.10)));
			//ThrustThingZ(0,random(12,80),0,1);
		}
		Goto Looping;
	Looping:
		ANYG AABBCCDD 2 GibTick(80);
		Loop;
	Death:
		ANYG E 300 GibDeath();
		ANYG E 1 A_FadeOut();
		Wait;
	}
}

Class BloodGib2 : BloodGib1		//eye
{
	Default
	{
		Scale 0.4;
		Speed 7;
		Decal "BloodSplat";
	}
	States
	{
	Looping:
		ANYG FFGGHHII 2 GibTick(80);
		Loop;
	Death:
		ANYG J 300 GibDeath();
		ANYG J 1 A_FadeOut();
		Wait;
	}
}

Class BloodGib3 : BloodGib1		//liver
{
	Default
	{
		Scale 0.6;
		Speed 7;
		Decal "BloodSplat";
	}
	States
	{
	Looping:
		ANYG KKLLMMNN 2 GibTick(80);
		Loop;
	Death:
		ANYG O 300 GibDeath();
		ANYG O 1 A_FadeOut();
		Wait;
	}
}

Class BloodGib4 : BloodGib1		//bloodthing
{
	Default
	{
		Scale 0.6;
		Speed 7;
		Decal "BloodSplat";
	}
	States
	{
	Looping:
		ANYG PPQQRRSS 2 GibTick(80);
		Loop;
	Death:
		ANYG T 300 GibDeath();
		ANYG T 1 A_FadeOut();
		Wait;
	}
}

/*==============================================================================
================================================================================
								Blood Splats

						  Developed by Major Cooke
	
	Kinsie has my direct permission to use this however he wants. I made it
	for him after all.
================================================================================
==============================================================================*/

Class D4BloodSplatFloor : Actor
{
	enum Blood
	{
		CosStart = 90,
		MinTics = 35*1,	//Smallest time it takes to reach full size in seconds.
		MaxTics = 35*2,	//Largest time it takes to reach full size in seconds.
		WarpFlagsFloor = WARPF_NOCHECKPOSITION|WARPF_TOFLOOR,
		WarpFlagsCeiling = WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION
	};
	int TimeLimit;
	int LifeTime;
	int user_water;
	int ScaleTimeTics;
	double StartScale;
	double UCos;
	double UZ;
	double UXyza;
	double UXyzb;
	double UXyzc;
	int WarpFlags;
	Default
	{
		Radius 1;
		Height 1;
		Scale 0;
		Projectile;
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTRIGGER
		+NOTELESTOMP
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		+DONTSPLASH
		+FLATSPRITE
		+ROLLCENTER
		+NOTONAUTOMAP
		//RenderStyle "Shaded";
		//StencilColor "7b 00 00";
		Species "BloodSplat";
	}
	States
	{
	Precache:
		DBLD ABCDEFGHIJKLMNOPQRS 0;
	Spawn:
		TNT1 A 0 NoDelay 
		{
			WarpFlags = WarpFlagsFloor;
			UXyza = 0;
			UXyzb = 0;
			UXyzc = frandom(0.0100000, 0.0199999);
		}
		Goto Prepare;
	Prepare:
		DBLD A 0 
		{
			StartScale =		0.5;
			pitch = 			0;
			angle += 			random(-20,20);
			TimeLimit = 		int(GetCvar("D4D_BloodTime") * 35);
			UCos = 				CosStart;
			ScaleTimeTics = 	random(MinTics,MaxTics);
			//This should only be needed once. MOVEWITHSECTOR and RELATIVETOFLOOR
			//should, in theory,  take care of everything else.
			
			Warp(self,UXyza,UXyzb,UXyzc,0,WarpFlags);
			UZ = 			pos.z;
			
			Frame = random(Fr_A, Fr_S);
			return ResolveState("ScaleIn");	
		}
	ScaleIn:
		"####" "#" 1
		{
			UCos -= 		(CosStart / ScaleTimeTics);
			A_SetScale(cos(UCos) * StartScale);
			if (UCos <= 0)
			{	return ResolveState("Waiting");	}
			return ResolveState(null);
		}
		Wait;
	Waiting:
		"####" "#" 35
		{
			if (waterlevel >= 1)
			{
				A_SetTics(1);
				A_SetScale(Scale.X + 0.01);
				A_FadeOut(0.01);
				return ResolveState(null);
			}
			
			if (GetClass() == "D4BloodSplatCeiling" && ceilingz < pos.z)
			{
				UXyzc = ceilingz - frandom(0.0100000, 0.0199999);
				Warp(self,UXyza,UXyzb,UXyzc,0,WarpFlags);
				UZ = pos.z;
			}
			else if (UZ != pos.z)
			{
				UXyzc = frandom(0.0100000, 0.0199999);
				Warp(self,UXyza,UXyzb,UXyzc,0,WarpFlags);
				UZ = pos.z;
			}
		
			// If still ticking up the clock...
			if (LifeTime < TimeLimit)
			{
				//Keep going.
				LifeTime += 35;
				return ResolveState(null);
			}
			return ResolveState("FadeOut");
		}
		Wait;
	FadeOut:
		"####" "#" 1 A_FadeOut(0.02);
		Wait;
	}
}

Class D4BloodSplatCeiling : D4BloodSplatFloor
{
	Default
	{
		-RELATIVETOFLOOR
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			WarpFlags = WarpFlagsCeiling;
			UXyza = pos.x;
			UXyzb = pos.y;
			UXyzc = ceilingz - frandom(0.0100000, 0.0199999);
		}
		Goto Prepare;
	}
}