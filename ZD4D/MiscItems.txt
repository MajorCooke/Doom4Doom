Class DebugMonstersToken : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugBiggiesToken  : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugBossesToken   : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugMissilesToken : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugFarMonstersToken : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugFarBiggiesToken  : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugFarBossesToken   : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}
Class DebugFarMissilesToken : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; }}

Class FireToken :    Inventory { Default { Inventory.InterhubAmount 0; }}
Class AltFireToken : Inventory { Default { Inventory.InterhubAmount 0; }}

Class RewardToken : Inventory
{
	Default 
	{
		Inventory.MaxAmount 5;
		Inventory.InterhubAmount 0;
	}
}

Class Counter : Inventory  
{
	Default 
	{
		Inventory.MaxAmount 52;
		Inventory.InterhubAmount 0 ;
	}
}

Class NoReticle : Inventory {}
 
Class      HealthToken : Inventory { Default { Inventory.MaxAmount 100; }}
Class SuperHealthToken : Inventory { Default { Inventory.MaxAmount 100; }}
Class SuperArmorToken  : Inventory { Default { Inventory.MaxAmount 100; }}
Class SuperAmmoToken   : Inventory { Default { Inventory.MaxAmount 100; }}
Class      AmmoToken   : Inventory { Default { Inventory.MaxAmount 100; }}
 
Class Nothing : Inventory { Default { Inventory.MaxAmount 0; }}
Class KonamiToken : Inventory { Default { Inventory.MaxAmount 10; }}

Class DeathByMassacre : Inventory {}
Class ShowSurroundings : Inventory {}

//==============================================================================
// Upgrades
//==============================================================================

Class D4HigherJump : 	Inventory { Default { Inventory.InterhubAmount 1; +INVENTORY.UNDROPPABLE }}
Class D4MultiJump : 	Inventory { Default { Inventory.MaxAmount 3; Inventory.InterHubAmount 3; +INVENTORY.UNDROPPABLE }}
Class D4AirControl : 	Inventory { Default { Inventory.InterhubAmount 1; +INVENTORY.UNDROPPABLE }}

Class CashPercentBonus : Inventory
{
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 1000000;
		Inventory.InterhubAmount 1000000;
	}
}

Class CashPercentBonusTemp : Inventory
{
	Default
	{
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 1000000;
		Inventory.InterhubAmount 0;
	}
}

//Strangely, this doesn't work the way it's supposed to. Oh well.
Class D4HealthUpgrade : UpgradeStamina
{
	Default 
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 1;
		Inventory.MaxAmount 100;
	}
}

Class D4ArmorCapRaiser : Inventory { Default { Inventory.MaxAmount 100; +INVENTORY.UNDROPPABLE }}

Class D4CrateUpgrade : Inventory { Default { Inventory.MaxAmount 3;	Inventory.InterhubAmount 3;	+INVENTORY.UNDROPPABLE}}
 
// Environment protection
Class ProtectionBonus1 : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 1.0;
		DamageFactor "Drowning",0.5;
		DamageFactor "Slime", 	0.5;
		DamageFactor "Fire", 	0.5;	// for lava
		DamageFactor "Crush", 	0.5;
		DamageFactor "Falling", 0.5;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		Powerup.Duration 0x7FFFFFFD;
		Inventory.MaxAmount 1;
	}
}

// Self-damage protection
Class ProtectionBonus2 : Inventory { Default { +INVENTORY.UNDROPPABLE }}

// AoE damage protection
Class ProtectionBonus3 : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 1.0;
		RadiusDamageFactor 0.5;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		Powerup.Duration 0x7FFFFFFD;
		Inventory.MaxAmount 1;
	}
}

Class D4Stamina : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 100; Inventory.InterhubAmount 100; } }

Class UpgradeUpdater : CustomInventory
{
	
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_SetInventory("PistolUpgradeAltCharge",int(GetCvar("PistolUpgradeAltCharge"))); 
			A_SetInventory("PistolUpgradeAltDamage",int(GetCvar("PistolUpgradeAltDamage"))); 
			A_SetInventory("PistolUpgradeDamage",int(GetCvar("PistolUpgradeDamage"))); 
			A_SetInventory("PistolUpgradeAutomatic",int(GetCvar("PistolUpgradeAutomatic"))); 
			A_SetInventory("PistolUpgradeLance",int(GetCvar("PistolUpgradeLance"))); 
			A_SetInventory("ShotgunMod1",int(GetCvar("ShotgunMod1"))); 
			A_SetInventory("ShotgunMod2",int(GetCvar("ShotgunMod2"))); 
			A_SetInventory("AssaultRifleMod1",int(GetCvar("AssaultRifleMod1")));	
			A_SetInventory("AssaultRifleMod2",int(GetCvar("AssaultRifleMod2")));	
			A_SetInventory("ChaingunMod1",int(GetCvar("ChaingunMod1")));		
			A_SetInventory("ChaingunMod2",int(GetCvar("ChaingunMod2")));		
			if (GetCvar("ChaingunMod3") && !CountInv("SovietToken"))
			{	
				//A_PrintBold("\ckChaingun Special Mode toggles Soviet mode.\nOptions->D4D Mod Options->Customize Keybinds");
				A_GiveInventory("SovietToken"); 
				A_GiveInventory("SovietActive");		
			}
			A_SetInventory("GaussCannonMod1",int(GetCvar("GaussCannonMod1")));	
			A_SetInventory("GaussCannonMod2",int(GetCvar("GaussCannonMod2")));	
			A_SetInventory("PlasmaRifleMod1",int(GetCvar("PlasmaRifleMod1")));	
			A_SetInventory("PlasmaRifleMod2",int(GetCvar("PlasmaRifleMod2")));	
			A_SetInventory("RocketLauncherMod1",int(GetCvar("RocketLauncherMod1")));	
			A_SetInventory("RocketLauncherMod2",int(GetCvar("RocketLauncherMod2")));	
			// Reload Speed
			A_SetInventory("SSGUpgrade1",int(GetCvar("SSGUpgrade1")));		
			// Piercing Shot
			A_SetInventory("SSGUpgrade2",int(GetCvar("SSGUpgrade2")));		
			// Double Shot
			A_SetInventory("SSGUpgrade3",int(GetCvar("SSGUpgrade3")));		
			// Spread Decrease
			A_SetInventory("SSGUpgrade4",int(GetCvar("SSGUpgrade4")));		
			
			A_SetInventory("LGUpgradeAmmo",int(GetCvar("LGUpgradeAmmo")));		
			A_SetInventory("LGUpgradeRange",int(GetCvar("LGUpgradeRange")));		
			A_SetInventory("LGUpgradeDamage",int(GetCvar("LGUpgradeDamage")));		
			A_SetInventory("LGUpgradeAltFire",int(GetCvar("LGUpgradeAltFire")));	
			A_SetInventory("StaticUpgrade1",int(GetCvar("StaticUpgrade1")));		
			A_SetInventory("StaticUpgrade2",int(GetCvar("StaticUpgrade2")));		
			A_SetInventory("StaticUpgrade3",int(GetCvar("StaticUpgrade3")));		
			A_SetInventory("StaticUpgrade4",int(GetCvar("StaticUpgrade4")));		
			A_SetInventory("BFGUpgrade1",int(GetCvar("BFGUpgrade1")));	ACS_NamedExecute("UpdateBFGAmmo",0,0,0,0); 	
			A_SetInventory("BFGUpgrade2",int(GetCvar("BFGUpgrade2")));		
			A_SetInventory("BFGUpgrade3",int(GetCvar("BFGUpgrade3")));		
			A_SetInventory("BFGUpgrade4",int(GetCvar("BFGUpgrade4")));		
			A_SetInventory("VortexUpgradeDamage",int(GetCvar("VortexUpgradeDamage")));		
			A_SetInventory("VortexUpgradeAmmo",int(GetCvar("VortexUpgradeAmmo")));		
			A_SetInventory("VortexUpgradeAltSpeed",int(GetCvar("VortexUpgradeAltSpeed")));		
			A_SetInventory("VortexUpgradeAltPierce",int(GetCvar("VortexUpgradeAltPierce")));		
			A_SetInventory("RepeaterUpgradePiercing",int(GetCvar("RepeaterUpgradePiercing")));		
			A_SetInventory("RepeaterUpgradeDamage",int(GetCvar("RepeaterUpgradeDamage")));		
			A_SetInventory("RepeaterUpgradeAltDamage",int(GetCvar("RepeaterUpgradeAltDamage")));	
			A_SetInventory("RepeaterUpgradeAltAmmo",int(GetCvar("RepeaterUpgradeAltAmmo")));		
			A_SetInventory("CarrionUpgradePickup",int(GetCvar("CarrionUpgradePickup")));	
			A_SetInventory("CarrionUpgradeAmmo",int(GetCvar("CarrionUpgradeAmmo")));	
			A_SetInventory("CarrionUpgradeStun",int(GetCvar("CarrionUpgradeStun")));	
			A_SetInventory("CarrionUpgradeTime",int(GetCvar("CarrionUpgradeTime")));	
			
			A_SetInventory("D4HigherJump",int(GetCvar("D4HigherJump")));
			A_SetInventory("D4AirControl",int(GetCvar("D4AirControl")));
			A_SetInventory("ProtectionBonus1",int(GetCvar("ProtectionBonus1")));
			A_SetInventory("ProtectionBonus2",int(GetCvar("ProtectionBonus2")));
			A_SetInventory("ProtectionBonus3",int(GetCvar("ProtectionBonus3")));
			
			A_SetInventory("D4CrateUpgrade",int(GetCvar("D4CrateUpgrade")));
			
			if (GetCvar("D4Stamina") > Stamina)		
			{
				A_GiveInventory("D4Stamina",int(GetCvar("D4Stamina") - Stamina));			// Tokens
				A_GiveInventory("D4HealthUpgrade",int(GetCvar("D4Stamina") - Stamina)); 	// Real Stamina
			}

			A_SetInventory("D4ArmorCapRaiser", int(GetCvar("D4ArmorCapRaiser")));
			
			if (GetCvar("CashPercentBonus") <= 30)
			{
				A_SetInventory("CashPercentBonus",int(GetCvar("CashPercentBonus")));
			}
			
			//Special handling for these types of items
			A_SetInventory("D4MultiJump",int(GetCvar("D4MultiJump")));
			A_SetInventory("D4CrateUpgrade",int(GetCvar("D4CrateUpgrade")));
			ACS_NamedExecute("RefreshCredits",0,0,0,0);
		}
		Stop;
	}
}

Class stfu : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Dummy:
		//Shuts up the warnings.
		M666 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M667 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M668 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M669 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M670 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M671 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M672 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M673 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		M674 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		Stop;
	}
}