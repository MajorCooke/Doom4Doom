//=================================================================================================
//=================================================================================================

//		Pain elemental

//=================================================================================================
//=================================================================================================
Class PainElementalRune : DemonRuneBase
{
	Default 
	{
		DemonRuneBase.Morph "PainElementalMorpher", "IamPainElemental";
		Inventory.PickupMessage "Pain Elemental rune";
	}
}

Class PainElementalMorpher : PowerupGiver
{
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Powerup.Type "PowerPainElementalMorph";
		Powerup.Duration -60;
		+Inventory.AutoActivate
	}
	States
	{
		Spawn:
			PLAY A 3;
			Loop;
	}
}

Class PowerPainElementalMorph : PowerRuneBase
{
	Default 
	{
		PowerMorph.PlayerClass "PlayerPainElemental";
		PowerMorph.MorphStyle (MRF_FULLHEALTH|MRF_UNDOBYDEATH|MRF_UNDOBYDEATHSAVES|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR|MRF_UNDOALWAYS|MRF_FAILNOTELEFRAG);
		PowerMorph.UnMorphFlash "DemonRuneMorphOff";
		PowerMorph.MorphFlash "DemonRuneMorphOn";
	}
}



Class PlayerPainElemental : DemonPlayerBase
{
	Default 
	{
		Speed 1;
		Friction 1.06;
		Health 400;
		Radius 20;
		Height 56;
		Mass 400;
		PainChance 40;
		Gravity 0.5;
		Player.JumpZ 10;
		Player.MorphWeapon "D4DPainElementalWeapon";
		Player.ViewHeight 53;
		Player.AttackZOffset 15;
		Player.CrouchSprite "INFR";
		Player.SoundClass "PlayerDemonCommon";
		PainSound "Doom4/Monsters/PainElemental/Pain";
		DeathSound "Doom4/Monsters/PainElemental/Death";
		Player.ForwardMove 0.6, 0.3;
		Player.SideMove 0.6, 0.3;
		Scale 1.15;
		DamageFactor "Normal", 0.35;
		Species "PlayerPElemental";
		+THRUSPECIES
		+EXTREMEDEATH
		+FORCERADIUSDMG
	}
	
	States
	{
	Spawn:
		PAIN A -1;
		Loop;
	See:
		PAIN AABBCC 3;
		Loop;
	Pain:
		PAIN G 5 A_Pain();
		Goto Spawn;
	Missile:
		PAIN DEF 4;
		Goto Spawn;
	Death:
		TNT1 A -1;
		Stop;
	
	Overlay.IdleSound:
		TNT1 A 35;
		TNT1 A 0 
		{
			if (!GetCvar("D4D_SilentMorphs") && random(1,8)==8)
			{
				PlaySound("Doom4/Monsters/PainElemental/Idle",5);
			}
		}
		Loop;
	}
}

Class D4DPainElementalWeapon : DemonWeaponBase
{
	int cooldown;
	Default 
	{
		Tag "Internal Inferno";
	}
	
	action bool FireLostSoul(bool cooldown = true)
	{
		PlaySound("Player/Demon/LostSoul/Attack",CHAN_WEAPON);
		Actor b; bool a;
		[a, b] = A_SpawnItemEx("LostSoulFriend",20*cos(pitch),0,5-sin(pitch)*20,cos(-pitch)*22,0,-sin(pitch)*22,0,SXF_SETMASTER);
		if (a && b)	//if succesful spawn
		{
			if (invoker.target && !invoker.target.bFRIENDLY)
				b.target = invoker.target;
				b.LastEnemy = b.target;
				b.LastHeard = b.target;
			if (cooldown)
				invoker.cooldown = 25;	//long cool off
			return true;
		}		
		A_SpawnItemEx("LostSoulDeatherer",0,0,0,22,0,0,0,SXF_SETMASTER);	//this is if failed spawn
		if (cooldown)
			invoker.cooldown = 10;		//slight cool off 
		return false;
	}
	
	States
	{
	Overlay.LostSoulCooler:
		M666 A 1
		{
			if (invoker.cooldown > 0)	
				invoker.cooldown--;
			
		}
		Wait;
	Ready:
		TNT1 A 0 
		{
			A_GiveInventory("FlyingMonsterPowerup",1);
		}
	AReady:
		TNT1 A 1 
		{
			
			int flags = WRF_DISABLESWITCH;
			if (invoker.cooldown > 0)
				flags |= WRF_NOPRIMARY;
			A_WeaponReady(flags);
		}
		Wait;
	Deselect:
		TNT1 A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 1 A_Raise;
		Wait;
	Fire:
		---- A 1 
		{
			let o = invoker.owner;
			if (o)
			{
				
				A_Overlay(6010,"Overlay.LostSoulCooler",true);
				FTranslatedLineTarget t;
				let o = invoker.owner;
				LineAttack(angle, 32766, pitch, 0, 'Normal', "LSTargetPuff", LAF_NOINTERACT|LAF_OVERRIDEZ, t, invoker.owner.player.viewz);
				invoker.target = t.linetarget;
				if (!invoker.target)
					invoker.target = o.target;
			}
			return CheckPrimary();
		}
		
		Goto AReady;
	FireP7:
		---- A 1 FireLostSoul();
		---- AAAAAAA 1 FireLostSoul(false);
		Goto AReady;
	FireP6:
		---- A 1 FireLostSoul();
		---- AAAAAA 1 FireLostSoul(false);
		Goto AReady;
	FireP5:
		---- A 1 FireLostSoul();
		---- AAAAA 1 FireLostSoul(false);
		Goto AReady;
	FireP4:
		---- A 1 FireLostSoul();
		---- AAAA 1 FireLostSoul(false);
		Goto AReady;
	FireP3:
		---- A 1 FireLostSoul();
		---- AAA 1 FireLostSoul(false);
		Goto AReady;
	FireP2:
		---- A 1 FireLostSoul();
		---- AA 1 FireLostSoul(false);
		Goto AReady;
	FireP1:
		---- A 1 FireLostSoul();
		---- A 1 FireLostSoul(false);
		Goto AReady;
	FireP0:
		TNT1 A 1 FireLostSoul();
		Goto AReady;
	
	AltFire:
		---- A 1 CheckSecondary();
		Goto AReady;
	AltFireP1:
	AltFireP2:
	AltFireP3:
	AltFireP4:
	AltFireP5:
	AltFireP6:
	AltFireP7:
	AltFireP0:
		TNT1 AAAAAAAAAA 1 A_SetPitch(pitch-0.8, SPF_INTERPOLATE);
		TNT1 AAAA 1 A_SetPitch(pitch+4, SPF_INTERPOLATE);
		TNT1 A -1 
		{
			int TimeLeft = 0;
			let inv = PowerMorph(FindInventory("PowerMorph",true));
			if (inv)	TimeLeft = Max(0, inv.EffectTics - (60 * 35));
				
			int ExploDamage = Max(1000, 1000 + TimeLeft);
			int ExploRadius = Max(768, 768 + TimeLeft);
			A_Explode(ExploDamage,ExploRadius,XF_NOTMISSILE,0,512);
			A_SpawnItemEx("PainKamikazeExploFX",0,0,25,0,0,pitch,0,SXF_NOCHECKPOSITION);
			
			if (invoker && invoker.Owner)
			{
				let plr = DemonPlayerBase(invoker.Owner);
				if (plr)	plr.EndMe = true;
			}
			else if (inv)
			{	// Failsafe in the event the above doesn't work.
				inv.EffectTics = 1;
			}
			
		}
		Goto Ready+1;
		
	Flash:
		SHTF A 1 Bright A_Light1();
		SHTF B 1 Bright A_Light2();
		Goto LightDone;
	Spawn:
		SHOT A 0;
		Stop;
	}
}

Class LostSoulCoolerToken : Inventory
{
	Default 
	{
		Inventory.MaxAmount 50;
	}
}

Class LostSoulFriend : D4LostSoulNoCash
{
	Default 
	{
		+NOBLOCKMONST
		+FRIENDLY	
		-COUNTKILL
		+THRUSPECIES
		+MTHRUSPECIES
		Species "PlayerPElemental";
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (!passive && bFRIENDLY)
		{
			if (other.bFRIENDLY)
				return false;
			else if (other.bISMONSTER && other.health > 0)
			{
				target = other;
			}
			
		}
		return true;
		
	}
}

Class LSTargetPuff : D4Actor
{
	Default
	{
		+ALLOWTHRUFLAGS
		+THRUSPECIES
		+MTHRUSPECIES
		+PUFFONACTORS
		+BLOODLESSIMPACT
		+PAINLESS
		+PUFFGETSOWNER
		+INVISIBLE
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class LostSoulDeatherer : D4DFX 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 10 NODELAY
		{
			PlaySound("skull/death");
			A_Explode(random(30,50),64,0);
			if (GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("LostSoulExploParticle",5,0,25,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,359),SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

Class PainKamikazeExploFX : D4DFX 
{
	int UAngle;
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0;
	LooperLooper:
		TNT1 A 0 
		{
			if (UAngle<=360)
			{
				A_SpawnItemEx("PainElementalExplosionSpriteSlower",0,0,0,20,0,frandom(2,-2),UAngle,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(1.5,3.5),frandom(1.5,3.5),frandom(-3.5,3.5),random(0,359),SXF_NOCHECKPOSITION,64);
				UAngle += 10;
				return ResolveState(null);
			}
			return ResolveState("Ender");	//dies
		}
		Loop;
	Ender:
		TNT1 A 200 A_QuakeEx(4,4,0,200,0,1024,"",QF_SCALEDOWN,0,0,0,0,0,1);
		Stop;
	}
}

Class PainElementalExplosionSpriteSlower : D4DFX 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Alpha 0.5;
		Scale 0.7;
		RenderStyle "Add";
		+ROLLSPRITE
		+ROLLCENTER
		Alpha 0.99;
		//Translation "0:255=%[0,0,0]:[0.6,1.4,0]"
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			A_SetScale(frandom(0.25,0.5));
			A_SetRoll(frandom(0,359.99));
			A_SetTranslucent(frandom(0.7,1.0),1);
		}
		PROJ DEFGHI 1 Bright
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X+0.2);
			A_ScaleVelocity(0.85);
		}
		Wait;
	}
}