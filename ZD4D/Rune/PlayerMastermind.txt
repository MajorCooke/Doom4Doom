//=================================================================================================
//=================================================================================================

//		Mastermind

//=================================================================================================
//=================================================================================================
Class MastermindRune : DemonRuneBase
{
	Default 
	{
		DemonRuneBase.Morph "MastermindMorpher", "IamSpiderMastermind";
		Inventory.PickupMessage "Spider Mastermind rune";
		Scale 0.13;
	}
}

Class MastermindMorpher: PowerupGiver
{
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Powerup.Type "PowerMastermindMorph";
		Powerup.Duration -60;
		+Inventory.AutoActivate
	}
	States
	{
		Spawn:
			PLAY A 3;
			Loop;
	}
}

Class PowerMastermindMorph : PowerRuneBase
{
	Default 
	{
		PowerMorph.PlayerClass "PlayerMastermind";
		PowerMorph.MorphStyle (MRF_FULLHEALTH|MRF_UNDOBYDEATH|MRF_UNDOBYDEATHSAVES|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR|MRF_UNDOALWAYS|MRF_FAILNOTELEFRAG);
		PowerMorph.UnMorphFlash "DemonRuneMorphOff";
		PowerMorph.MorphFlash "DemonRuneMorphOn";
	}
}


Class PlayerMastermind : DemonPlayerBase
{
	int PrevPowerLevel;
	Default 
	{
		Speed 1;
		Health 3000;
		Radius 40;
		Height 90;
		Mass 800;
		PainChance 20;
		Gravity 0.7;
		Player.JumpZ 11;
		Player.MorphWeapon "D4DMastermindWeapon";
		Player.ViewHeight 80;
		Player.AttackZOffset 20;
		Player.CrouchSprite "SPID";
		Player.SoundClass "PlayerDemonCommon";
		PainSound "Doom4/SpiderMastermind/Pain";
		DeathSound "Doom4/SpiderMastermind/Death";
		Player.ForwardMove 0.8, 0.4;
		Player.SideMove 0.8, 0.4;
		DamageFactor "Normal", 0.5;
		+EXTREMEDEATH
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		PrevPowerLevel = 0;
	}
	
	override void Tick()
	{
		// Ignore voodoo dolls.
		if (!player || !player.mo || player.mo != self || health < 1)
		{
			Super.Tick();
			return;
		}
		// The bigger the power, the smaller the size.
		// Grab the 
		if (PrevPowerLevel != PowerLevel && PowerLevel > 0)
		{
			let def = GetDefaultByType("DoomPlayer");
			double PowerScale = (1.0 - (double(PowerLevel) / double(MaxRunePower)));
			Vector2 NewRH = (Radius, Height);
			NewRH.X = MC_GlobalMaths.LerpDouble(def.Radius, Default.Radius, PowerScale);
			NewRH.Y = MC_GlobalMaths.LerpDouble(def.Height, Default.Height, PowerScale);
			
			A_SetSize(NewRH.X, NewRH.Y);
			AttackZOffset = MC_GlobalMaths.LerpDouble(def.AttackZOffset, Default.AttackZOffset, PowerScale);
			ViewHeight = MC_GlobalMaths.LerpDouble(def.ViewHeight, Default.ViewHeight, PowerScale);
			
			PrevPowerLevel = PowerLevel;
		}
		
		Super.Tick();
	}
	
	States
	{
	Spawn:
		SPID A -1;
		Stop;
	See:
		SPID ABCDEF 3;
		Loop;
	Pain:
		SPID I 5 A_Pain();
		Goto Spawn;
	Missile:
	Melee:
		SPID GH 4;
		Goto Spawn;
	Death:
		TNT1 A 3 A_Scream();
		TNT1 B 3 A_NoBlocking();
		TNT1 CDEFGH 3;
		TNT1 I -1;
		Stop;
	Overlay.IdleSound:
		TNT1 A 35;
		TNT1 A 0 
		{
			NoFastOverlay(OverlayID());
			if (!GetCvar("D4D_SilentMorphs") && random(1,12)==12)
			{
				A_PlaySound("Doom4/SpiderMastermind/Idle",5,0.5);
			}
		}
		Loop;
	Overlay.Steps:
		TNT1 A 12
		{
			NoFastOverlay(OverlayID());
			if((vel.XY dot vel.XY > 1.0 ** 2) && A_CheckFloor("Null"))
			{
				A_PlaySound("Player/Demon/MastermindStep",6);
			}
		}
		Loop;
	}
}

Class D4DMastermindWeapon : DemonWeaponBase
{
	int count;
	const Overlay_Beamer = 6010;
	const ChargeMax = 20;
	Default 
	{
		Tag "Experimental Energy Cannon";
	}
	
	action void FirePlasma()
	{
		A_FireProjectile("SMMPlayerPlasma",0,0,0);
		for (int i = 0; i < 3; i++)
			A_FireProjectile("SMMPlayerPlasmaScatter",0,0,0);
	}
	
	States
	{
	Ready:
		M024 A 1 
		{
			invoker.count = 0;
			A_WeaponReady(WRF_DISABLESWITCH);
		}
		Loop;
	Deselect:
		M024 A 1 A_Lower;
		Loop;
	Select:
		M024 A 1 A_Raise;
		Loop;
	Fire:
		---- A 1 CheckPrimary();
		Goto Ready;
	AltFire:
		---- A 1 CheckSecondary();
		Goto Ready;
	FireP1:
	FireP2:
	FireP3:
	FireP4:
	FireP5:
	FireP6:
	FireP7:
	FireP0:
		M024 C 1 
		{
			FirePlasma();
			A_SetPitch(pitch-1);
			A_GunFlash();
		}
		---- AA 1 A_SetPitch(pitch+0.5);
		M024 B 1 
		{
			FirePlasma();
			A_SetPitch(pitch-1);
			A_GunFlash();
		}
		---- AA 1 A_SetPitch(pitch+0.5);
		---- A 0 A_Refire;
		Goto Ready;
	Flash:
		TNT1 A 1 A_Light2();
		TNT1 A 1 A_Light1();
		TNT1 A 0 A_Light0();
		Stop;
		
	AltFireP1:
	AltFireP2:
	AltFireP3:
	AltFireP4:
	AltFireP5:
	AltFireP6:
	AltFireP7:
	AltFireP0:
		M024 A 0 
		{
			A_Overlay(Overlay_Beamer, "Null");
			A_SpawnItemEx("MastermindPlayerMuzzleRed",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_PlaySound("Doom4/SpiderMastermind/LaserCharge",7,0.5);
			//A_PlaySound("Doom4/Monsters/MastermindLaserCharge",5);
		}
		
		FireLooper:
			M024 AAAAAA 1 
			{
				StateLabel next = null;
				A_FireProjectile("MastermindPlayerSpark",0,0,0);
				if (invoker.count++ >= ChargeMax)
					next = "FireLaser";
				return ResolveState(next);
			}
			---- A 0 A_ReFire("FireLooper");
			---- A 0
			{
				A_StopSound(6);
				A_StopSound(7);
				A_RemoveChildren(true,RMVF_EVERYTHING,"MastermindPlayerMuzzleRed");
			}
			Goto Ready;
			
			FireLaser:
				M024 A 0 
				{
					A_PlaySound("Doom4/SpiderMastermind/LaserLoop",7,1,1);
					A_PlaySound("Doom4/Monsters/ElectricDischarge",6);
					A_RemoveChildren(true,RMVF_EVERYTHING,"MastermindPlayerMuzzleRed");
					invoker.count = 0;
					A_GunFlash();
					A_Overlay(Overlay_Beamer, "Overlay.Beamer");
				}
				M024 BBBCCCCCCCCCCCCCCCBB 2 
				{
					A_RailAttack(20*random(1,8),0,0,"","",RGF_SILENT,0,"NonPacifistPuffExtreme",0,0,32767);
					//A_FireProjectile("SMMLaserThru",0,0,0);
				}
				M024 A 0 A_StopSound(7);
				Goto Ready;
		
		
	AltFlash:
		TNT1 AAAAAAAAAAAAAAAAAAAA 2 A_Light2();
		TNT1 A 4 A_Light1();
		TNT1 A 0 A_Light0();
		Stop;

	Overlay.Beamer:
		TNT1 A 0
		{
			StateLabel next = null;
			if (Doom4Weapon.IsDoubleSpeedGlobal(invoker.owner))
				next = "BeamerDoubleSpeed";
			return ResolveState(next);
			//A_StartBeam("SMMBeamPlayer", (10.0, 0.0, -12.0), 1, "PacifistPuff", 0, 0, 0, 4096);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
		{
			//A_UpdateBeamTracer("PacifistPuff", 0, 0, 0, 4096);
			A_FireBullets(0,0,1,0,"PacifistPuff",FBF_PUFFTRACER|FBF_NORANDOMPUFFZ,4096, "BigRedLaserDrillSMMPlayerSpawner",0);
		}
		Goto EndBeamer;
	BeamerDoubleSpeed:
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_FireBullets(0,0,1,0,"PacifistPuff",FBF_PUFFTRACER|FBF_NORANDOMPUFFZ,4096, "BigRedLaserDrillSMMPlayerSpawner",0);
	EndBeamer:
		TNT1 A 0 A_StopBeam();
		Stop;
	Spawn:
		SHOT A 0;
		Stop;
	}
}

Class SMMLaserThru : SMMLaserStrong
{	Default { +THRUACTORS } }

Class SMMPlayerPlasma : Actor 
{
	Default 
	{
		Projectile;
		Radius 7;
		Height 12;
		Scale 0.27;
		RenderStyle "Add";
		Alpha 0.99;
		Speed 25;
		FastSpeed 30;
		Damage 10;
		SeeSound "Doom4/Monsters/PlasmaShot";
		Translation "0:255=%[0,0,0]:[1.3,0.7,0.3]";
		+FORCEXYBILLBOARD
		Decal "D4PlasmaMonsterBig";
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY;
		Goto Looper;
	Looper:
		SPIR P 2 Bright Light("OrangeSmallPoint2")
		{
			if (GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("SSMPlasmaTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
		}
		Loop;
	Death:
		TNT1 A 0 A_SpawnItemEx("SMMPlasmaBallPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		TNT1 A 3 Light("OrangeSmallPoint1");
		TNT1 A 3 Light("OrangeSmallPoint2");
		TNT1 A 3 Light("OrangeSmallPoint3");
		Stop;
	}
}

Class SMMPlayerPlasmaScatter : SMMPlayerPlasma
{
	Default
	{
		Damage 3;
		SeeSound "";
	}
	override void PostBeginPlay()
	{
		A_FaceMovementDirection();
		angle += frandom(-5.0, 5.0);
		pitch += frandom(-5.0, 5.0);
		A_ChangeVelocity(cos(pitch) * speed, 0, -sin(pitch)*speed, CVF_RELATIVE|CVF_REPLACE);
		Super.PostBeginPlay();
	}
}

Class MastermindPlayerMuzzleRed : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 20;
	const YOff = 0;
	const ZOff = 73;
	double  UPos;
	int user_t;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.8;
		Alpha 0.01;
		+FORCEXYBILLBOARD
		Translation "0:255=%[0,0,0]:[2.0,0.2,0.2]";
	}
	States
	{
	Spawn:
		X060 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 BRIGHT NoDelay
		{
			if (master && master.player) { pitch = master.pitch; } //Grab the pitch...
			else return Destroy();
			// And set a multiplier for taking from the distance so it actually goes well with the gun.
			
			if (pitch > 0) //Looking down
			{	UPos = (sin(pitch) * 12);	}
			else //Looking up
			{	UPos = (sin(pitch) * 6);	}
			
			Vector3 px, py, pz, origin;
			[px, py, pz] = MC_CoordUtil.GetAxes(Master.Pitch,Master.Angle,Master.Roll);
			origin = Master.Vec2OffsetZ(0,0,Master.player.viewz) + 20.0 * px + 0.0 * py - 8.0 * pz;
			SetOrigin(origin, true);
			/*
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - UPos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			*/	
			A_FadeIn(0.1);
			if (Scale.X > 0.01)	//while charging
			{
				A_SetScale(Scale.X*0.82);
			}
			else //once it reaches full charge
			{
				A_SpawnItemEx("MastermindPlayerSpark",0,0,-3,sin(-pitch)*frandom(0.1,0.5),frandom(-0.7,-1.3),cos(pitch)*frandom(1.2,-5.0),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("MastermindPlayerSpark",0,0,-3,sin(-pitch)*frandom(0.1,0.5),frandom(0.7,1.3),cos(pitch)*frandom(1.2,-5.0),0,SXF_NOCHECKPOSITION);
			}
			
		}
		Loop;
	Nothing:
		TNT1 A 100;
		Stop;
	}
}

Class FullyCharged : Inventory {}

Class MastermindPlayerSpark : Actor 
{

	Default 
	{
		+NOINTERACTION
		Scale 0.05;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[1.0,0.0,0.0]";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,1,2,3,4,5,6,7,8);
		X079 ABCDEFGH 0	A_Jump(256,"Perform");
	Perform:
		"####" "#" 1 Bright 
		{
			A_SetScale(Scale.X+0.01);
			A_FadeOut(0.05);
		}
		Loop;
	}
}


