//=================================================================================================
//=================================================================================================

//		Hell Knight

//=================================================================================================
//=================================================================================================
Class KnightRune : DemonRuneBase
{
	Default 
	{
		DemonRuneBase.Morph "KnightMorpher", "IamHellKnight";
		Inventory.PickupMessage "Hell Knight rune";
	}
}

Class KnightMorpher: PowerupGiver
{
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Powerup.Type "PowerKnightMorph";
		Powerup.Duration -60;
		+Inventory.AutoActivate
	}
	States
	{
		Spawn:
			PLAY A 3;
			Loop;
	}
}

Class PowerKnightMorph : PowerRuneBase
{
	Default 
	{
		PowerMorph.PlayerClass "PlayerKnight";
		PowerMorph.MorphStyle (MRF_FULLHEALTH|MRF_UNDOBYDEATH|MRF_UNDOBYDEATHSAVES|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR|MRF_UNDOALWAYS|MRF_FAILNOTELEFRAG);
		PowerMorph.UnMorphFlash "DemonRuneMorphOff";
		PowerMorph.MorphFlash "DemonRuneMorphOn";
	}
}

Class PlayerKnight : DemonPlayerBase
{
	double  USpeed;
	Default 
	{
		Speed 1;
		Health 500;
		Radius 18;
		Height 60;
		Mass 800;
		PainChance 40;
		Gravity 0.5;
		Player.JumpZ 10;
		Player.MorphWeapon "D4DKnightWeapon";
		Player.ViewHeight 54;
		Player.AttackZOffset 10;
		Player.CrouchSprite "E02I";
		Player.SoundClass "PlayerDemonCommon";
		PainSound "Doom4/Monsters/HellKnight/Pain";
		DeathSound "Doom4/Monsters/HellKnight/Death";
		Scale 0.65;
		DamageFactor "Normal", 0.5;
		+SLIDESONWALLS
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		E02I A -1;
		Stop;
	See:
		E02W ABCDEFGH 3;
		Loop;
	Pain:
		E02P A 5 A_Pain();
		Goto Spawn;
	Missile:
	Melee:
		E02M A 0 A_Jump(256,"Missile1","Missile2");
	Missile1:
		E02M ABCDEFG 3;
		Goto Spawn;
	Missile2:
		E02N ABCDEFG 3;
		Goto Spawn;
	Death:
		E02D A 3 A_Scream();
		BOS2 B 3 A_NoBlocking();
		BOS2 CDEFGH 3;
		BOS2 I -1;
		Stop;
	Overlay.IdleSound:
		TNT1 A 35;
		TNT1 A 0
		{
			NoFastOverlay(OverlayID());
			if (!GetCvar("D4D_SilentMorphs") && random(1,5)==5)
			{
				PlaySound("Doom4/Monsters/HellKnight/Idle",5);
			}
		}
		Loop;
	Overlay.Steps:
		TNT1 A 5
		{
			NoFastOverlay(OverlayID());
			USpeed = vel.XY dot vel.XY;
			if(A_CheckFloor("Null"))
			{
				if(USpeed > 150)
				{
					PlaySound("Player/Demon/HeavyStep",CHAN_AUTO,0.7);
					A_SetTics(12);
				}
				else if(USpeed > 20)
				{
					PlaySound("Player/Demon/HeavyStep",CHAN_AUTO,0.7);
					A_SetTics(15);
				}
			}
		}
		Loop;
	}
}


Class D4DKnightWeapon : DemonWeaponBase
{
	Default 
	{
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.7;
		Weapon.BobRangeY 0.5;
		Tag "Knight Hands";
	}
			
	
	
	private action void ViewSwing(bool left)
	{
		StateLabel	next = "Overlay.SwingRight";
		if (left)	next = "Overlay.SwingLeft";
		for (int i = 1000; i < 2000; i++)
		{
			if (A_Overlay(i, next, true))
				return;
		}
	}
	
	States
	{
	Ready:
		HB2S A 0 A_SetInventory("PunchedAlready",0);
		HB2S A 1 A_WeaponReady(WRF_DISABLESWITCH);
		Wait;
	Deselect:
		HB2S A 1 A_Lower;
		Loop;
	Select:
		HB2S A 1 A_Raise;
		Wait;
	Fire:
		---- A 1 CheckPrimary();
		Goto Ready;
	AltFire:
		---- A 1 CheckSecondary();
		Goto Ready;
	User2:
	FireP1:
	FireP2:
	FireP3:
	FireP4:
	FireP5:
	FireP6:
	FireP7:
	FireP0:
		TNT1 A 0 { if(random(1,6)==6) { PlaySound("Doom4/Monsters/HellKnight/Attack",7); } }
		TNT1 A 0 A_Jump(256,"SwingRight","SwingLeft");
	SwingRight:
		HB2M A 1		ViewSwing(true);
		#### BC 1		;
		HB2M D 1 		DemonPunch(random(90,200), 66);
		HB2M EF 1 		DemonPunch(random(90,200), 80);
		HB2M GH 1 		DemonPunch(random(90,200), 66);
		W666 AAAAAA 1 	DemonPunch(random(45,100), 60); 
		W666 A 1 		;
		W666 AAA 1 		;
		W666 A 3		;
		Goto Ready;
	SwingLeft:
		HB2N A 1		ViewSwing(false);
		#### BC 1		;
		HB2N D 1 		DemonPunch(random(90,200), 66);
		HB2N EF 1 		DemonPunch(random(90,200), 80);
		HB2N GH 1 		DemonPunch(random(90,200), 66);
		W666 AAAAAA 1 	DemonPunch(random(45,100), 60);
		W666 A 1		;
		W666 AAA 1		;
		W666 A 3		;
		Goto Ready;
	
	Overlay.SwingLeft:
		TNT1 A 1		A_SetViewAPR((2,	1.0,	-3),true);
		TNT1 AA 1		A_SetViewAPR((2,	1.0,	0),true);
		TNT1 AA 1		A_SetViewAPR((-0.5, -.25,	0),true);
		TNT1 AAAAAA 1	A_SetViewAPR((-0.5, -.25,	0),true);
		TNT1 A 1		A_SetViewAPR((-0.5, -.25,	3),true);
		TNT1 AAA 1		A_SetViewAPR((-0.5, -.25,	0),true);
		Stop;
	Overlay.SwingRight:
		TNT1 A 1		A_SetViewAPR((-2,	1.0,	3),true);
		TNT1 AA 1		A_SetViewAPR((-2,	1.0,	0),true);
		TNT1 AA 1		A_SetViewAPR((0.5,	-.25,	0),true);
		TNT1 AAAAAA 1	A_SetViewAPR((0.5,	-.25,	0),true);
		TNT1 A 1		A_SetViewAPR((0.5,	-.25,	-3),true);
		TNT1 AAA 1		A_SetViewAPR((0.5,	-.25,	0),true);
		Stop;
		
	
		
		
	AltFireP1:
	AltFireP2:
	AltFireP3:
	AltFireP4:
	AltFireP5:
	AltFireP6:
	AltFireP7:
	AltFireP0:
		W666 A 0
		{
			if (invoker.owner.bONMOBJ || A_CheckFloor("Null")) //if its in the floor or if vel.z is zero...
			{	return ResolveState("CantDoGroundAttack"); } //...will jump slightly
			else
			{	return ResolveState("CanDoGroundAttack"); }
		}
		
		CanDoGroundAttack:
			W666 A 0 
			{	
				A_ChangeVelocity(vel.x,vel.y,-8,CVF_REPLACE);
			}
			W666 A 1; //waits a bit to register the negative v-speed
			
			W666 A 1
			{
				if (viewpitch<50)
				{	A_SetViewPitch(viewpitch+5, SPF_INTERPOLATE); }
				
				if (invoker.owner.bONMOBJ || A_CheckFloor("Null"))
				{
					return ResolveState("Crashing");
				}
				return ResolveState(null); 
			}
			Wait;
			
			Crashing:
				HB2S A 0
				{	
					let o = invoker.owner;
					if (o && o.bONMOBJ)
					{
						Array<Actor> Temp; Temp.Clear();
						bool found = false; Actor mo = null;
						
						for (int i = 0; i < 50; i++)
						{
							[found, mo] = TestMobjZ(true);
							if (!mo)	break;
							
							if (mo == invoker.owner)	continue;
							
							mo.DamageMobj(self, self, 200 * GetPowerLevel(true), "Melee");
							mo.bSOLID = false;
							Temp.Push(mo);
						}
						
						if (Temp.Size() > 0)
						{
							for (int i = 0; i < Temp.Size(); i++)
								Temp[i].bSOLID = true;
						}
						Temp.Clear();
					}
					A_Stop();
					A_Explode(128 * GetPowerLevel(true),256,XF_NOTMISSILE);
					PlaySound("Doom4/Monsters/BaronCrash",7);
					
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(0.5,2.5),random(0,359),SXF_NOCHECKPOSITION);
					A_SpawnItemEx("BaronShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				}
				HB2S A 1
				{
					if (viewpitch>0)
					{	A_SetViewPitch(viewpitch-5, SPF_INTERPOLATE);
						return ResolveState(null);
					}
					else
					{ return ResolveState("EndGroundAttack");}
				}
				Wait;
				
				EndGroundAttack:
					HB2S AAAAAAAAAA 3 A_WeaponReady(WRF_NOSECONDARY|WRF_ALLOWUSER1);
					Goto Ready;
		
		
	CantDoGroundAttack:
		W666 A 8 A_ChangeVelocity(8,0,8,CVF_RELATIVE) ;
		Goto Ready;

	Spawn:
		SHOT A 0;
		Stop;
	}
}