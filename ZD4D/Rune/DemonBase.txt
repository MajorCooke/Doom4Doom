
#include "ZD4D/Rune/PlayerArachnotron.txt"
#include "ZD4D/Rune/PlayerArchvile.txt"
#include "ZD4D/Rune/PlayerBaron.txt"
#include "ZD4D/Rune/PlayerCacodemon.txt"
#include "ZD4D/Rune/PlayerCyberdemon.txt"
#include "ZD4D/Rune/PlayerFatso.txt"
#include "ZD4D/Rune/PlayerHellknight.txt"
#include "ZD4D/Rune/PlayerMastermind.txt"
#include "ZD4D/Rune/PlayerPainElemental.txt"
#include "ZD4D/Rune/PlayerRevenant.txt"


Class IamADemonToken  : Inventory { Default { Inventory.MaxAmount 1;    Inventory.InterHubAmount 0; }}
Class DemonTimerToken : Inventory { Default { Inventory.MaxAmount 2100; Inventory.InterHubAmount 0; }}
//Class DemonTimerTotal : Inventory { Default { Inventory.MaxAmount 25200; Inventory.InterHubAmount 0; }}

Class OverlaysStarted : Inventory { Default { Inventory.MaxAmount 1;    Inventory.InterHubAmount 0; }}

Class IamHellKnight 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamBaronOfHell 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamRevenant 			: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamCacodemon 			: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamFatso 				: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamPainElemental 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamCyberdemon 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamSpiderMastermind 	: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamArchvile 			: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamArachnotron 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}

/*==============================================================================
================================================================================
	Demon Player Base
	-----------------
	Initializes all shared overlays and plays the starting sound of the
	appropriate type, thanks to virtual override functions like PostBeginPlay.
	
	NOTICE:
	Whenever overriding an internal core function as part of the Actor class
	itself, remember to call the super function to ensure proper working order!
	
	The following are internal overrideable functions:
	- BeginPlay
	- PostBeginPlay
	- Tick
	- Activate
	- Deactivate
	
	See this for more information:
	http://zdoom.org/wiki/Converting_DECORATE_code_to_ZScript#Virtuals
	
================================================================================
==============================================================================*/

Class DemonPlayerBase : Doom4Player
{
	Class<Inventory> RuneBase;
	int TicDelay;
	int prevTic, currTic, nextTic;
	int PowerLevel;
	const interTic = 15;
	const Minute = 60 * 35;
	bool EndMe;
	
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		PlayerPawn.Die(source, inflictor, dmgflags, MeansOfDeath);
	}
		
	// Only ever called once.
	override void PostBeginPlay()
	{
		// Skip the Doom4Player's version of PostBeginPlay. We dont need that stuff.
		PlayerPawn.PostBeginPlay(); 
		if (!player || !player.mo || player.mo != self)
			return;		
		
		MaxHealth = Health;
		static const String Demons[] =
		{
			"PlayerArachnotron",		"ArachnotronRune",
			"PlayerBaron",				"BaronRune",
			"PlayerCacodemon",			"CacodemonRune",
			"PlayerCyberdemon",			"CyberdemonRune",
			"PlayerFatso",				"FatsoRune",
			"PlayerKnight",				"KnightRune",
			"PlayerMastermind",			"MastermindRune",
			"PlayerPainElemental",		"PainElementalRune",
			"PlayerRevenant",			"RevenantRune",
			"PlayerArchvile",			"ArchvileRune"
		};
		
		for (int i = 0; i < Demons.Size(); i += 2)
		{
			if (GetClass() == Demons[i])
			{
				RuneBase = Demons[i + 1];
				break;
			}
		}
		let inv = PowerMorph(FindInventory("PowerMorph",true));
		if (inv)	
		{
			currTic = inv.EffectTics;
			//Strangely, the timer visual runs out at least a few seconds before.
			SetInventory("DemonTimerToken",inv.EffectTics + 70, true);
		}
		
		PowerLevel = Clamp(abs(PowerLevel), 0, MaxRunePower);
		PlayDemonSightSound();
		StartDemonOverlays();
	}
	
	void PlayDemonSightSound()
	{
		static const Class<Actor> Demons[] =
		{
			"PlayerArachnotron",
			"PlayerBaron",
			"PlayerCacodemon",
			"PlayerCyberdemon",
			"PlayerFatso",
			"PlayerKnight",
			"PlayerMastermind",
			"PlayerPainElemental",
			"PlayerRevenant",
			"PlayerArchvile"			// The last one is comma conscientious. 
		};
		
		static const Sound SightSound[] =
		{
			"Doom4/Monsters/Arachnotron/Sight",
			"Doom4/Monsters/Baron/Sight",
			"Doom4/Monsters/Cacodemon/Sight",
			"Doom4/Cyberdemon/Sight",
			"Doom4/Monsters/Mancubus/Sight",
			"Doom4/Monsters/HellKnight/Sight",
			"Doom4/SpiderMastermind/Sight",
			"Doom4/Monsters/PainElemental/Sight",
			"Doom4/Monsters/Revenant/Sight",
			"Doom4/Monsters/Archvile/Sight"
		};
		
		for (int index = 0; index < Demons.Size(); index++)
		{
			if (self is Demons[index])
			{
				A_PlaySound(SightSound[index], 5);
				return;
			}
		}
	}
	
	virtual void StartDemonOverlays()
	{
		A_ClearOverlays();
		A_Overlay(6000,"Overlay.IdleSound",true);
		A_Overlay(6001,"Overlay.Steps",true);
		A_OverlayFlags(6000, PSPF_POWDOUBLE, false);
		A_OverlayFlags(6001, PSPF_POWDOUBLE, false);
		
	}
	
	//--------------------------------------------------------------------------
	// Tick
	//--------------------------------------------------------------------------
	override void Tick()
	{
		Super.Tick();
		
		bPICKUP = (SpawnTime >= 35);
		
		if (!player || !player.mo || player.mo != self)
			return;
		
		if (EndMe || GetPlayerInput(MODINPUT_BUTTONS) & BT_USER4)
		{
			for (let probe = player.mo.Inv; probe != null; probe = probe.Inv)
			{
				let invul = PowerInvulnerable(probe);
				if (invul)	invul.EndEffect();
			}
			let ins = PowerMorph(FindInventory("PowerMorph",true));
			if (ins)
			{
				EndMe = true;
				A_SetInventory("DemonTimerToken",0);
				
				TicDelay = -1;
				ins.EffectTics = 1;
				return;
			}
		}
	
		// Count down the timer effect. Purely visual, not the actual timer.
		let check = PowerMorph(FindInventory("PowerMorph",true));
		if (check) 
		{
			nextTic = check.EffectTics;
			SetInventory("DemonTimerToken",nextTic, true);
		}
		
		TicDelay++;
		
		if (TicDelay > 1)
		{
			TicDelay = 0;
			
			if (!CountInv("PowerDrain") && CountInv("D4RuneUpgrade4"))
			{
				A_GiveInventory("DemonRuneDrainGiver");
			}
			
			
			if (!Event)	Event = D4DHandler.Fetch();
			if (!Event)	return;
			
			bool CanGetMoreRunes = (CountInv("D4RuneUpgrade2") > 0);
			if (!CanGetMoreRunes)	return;
			
			DemonRuneBase mo = null;
			for (int i = 0; i < Event.DemonRunes.Size(); i++)
			{
				mo = DemonRuneBase(Event.DemonRunes.Actors[i]);
				if (!mo)	continue;
				
				let rune = DemonRuneBase(mo);
				if (CountInv("D4RuneUpgrade2"))
				{
					if (rune && rune.ring)
					{
						bool invis = (mo.GetClass() != RuneBase);
						rune.ring.bINVISIBLE = invis;
						if (invis)	continue;
					}
				}
				// Make sure it can be touched.
				double blockdist = radius + mo.radius;
				if (abs(pos.x - mo.pos.x) > blockdist || abs(pos.y - mo.pos.y) > blockdist)
					continue;	
								
				// So we're in range horizontally. What about vertically?
				if (pos.z + height < mo.pos.z || mo.pos.z + mo.height < pos.z)
					continue;	
				
				if (check && rune && mo.GetClass() == RuneBase)
				{
					
					int upgrade = rune.PowerLevel;
				//	Will be implemented once the attack upgrades are in.
				//	Simply put it'll be overpowered to let the player pick up
				//	less powerful runes.
				/*	if (PowerLevel > upgrade)
						continue;
					else */ if (PowerLevel < upgrade)
					{
						PowerLevel = upgrade;
						A_SetInventory("D4MonsterUpgrader", upgrade);
					}
					
				//	Console.Printf("%d %d", PowerLevel, upgrade);
					check.EffectTics += (Minute) * Max(1, 1 + upgrade);
					
					
					int MaxHP = GetMaxHealth();
					int PartialHP = MaxHP * ((MaxHP >= 2000) ? 0.25 : 0.5);
					A_SetHealth(Min(health + PartialHP, MaxHP));
					A_SetInventory("DemonTimerToken",check.EffectTics, DefPtr, true);
					A_SpawnItemEx("DemonRuneMorphOn",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_ORIGINATOR);
					mo.DoPickupSpecial(self);
					mo.Destroy();
				}
				continue;
			}
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (!bNODAMAGE && !bINVULNERABLE && !FindInventory("PowerInvulnerable",true))
		{
			if (damage < TELEFRAG_DAMAGE || bLAXTELEFRAGDMG)
			{
				if (mod == 'Fire' && !inflictor && !source)
					return 0;
			}
		}
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	// Skip the Doom4Player's version.
	override void CheckJump()
	{
		PlayerPawn.CheckJump();
	}
	
	action void NoFastOverlay(int oid)
	{
		A_OverlayFlags(oid, PSPF_POWDOUBLE|PSPF_CVARFAST, false);
	}
	
	Default
	{
		Doom4Player.UseLives false;
		DamageFactor "Slime", 0.0;
		DamageFactor "HellSlime", 0.0;
		DamageFactor "Fall", 0.0;
		DamageFactor "Falling", 0.0;
		-ALLOWPAIN
		+NOSKIN
		-PICKUP
	}
	
	override bool CanTouchItem(Inventory item)
	{
		if (SpawnTime < 35)
			return false;
		
		if (item == null ||
			item is 'Health' || 
			item is 'BasicArmorPickup' || 
			item is 'BasicArmorBonus' ||
			item is 'D4ArmorBasePickup' ||
			item is 'DemonRuneBase' ||
			item is 'PowerMorph')
			return false;
		
		
		let pwr = PowerupGiver(item);
		if (pwr && pwr.PowerupType is 'PowerMorph')
		{
			return (!pwr.bAUTOACTIVATE);
		}
			
		/*
		let rune = DemonRuneBase(item);
		if (rune)
		{
			if (CountInv("D4RuneUpgrade2"))
		}
		*/
		return Super.CanTouchItem(item);
	}
	
	States
	{
	// Dummy states to be overridden later. Except the DemonTimer one.
	Overlay.IdleSound:
	Overlay.Steps:
		TNT1 A 0;
		Stop;
	}
}

Class DemonWeaponBase : DoomWeapon
{	
	Array<MCBeam> Beams;
	Default
	{
		+WEAPON.CHEATNOTWEAPON
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+THRUACTORS
	}

	action void NoFastOverlay(int oid)
	{
		A_OverlayFlags(oid, PSPF_POWDOUBLE|PSPF_CVARFAST, false);
	}

	// Fetches the power level of the morph. I.e. 0 = normal, 1 = uncommon, 2 = rare, etc.
	action int GetPowerLevel()
	{
		let plr = DemonPlayerBase(invoker.owner);
		return (plr) ? plr.PowerLevel : 0;
	}
	
	// Automatically jumps to the appropriate state based on power for the
	// primary fire.
	action state CheckPrimary()
	{
		StateLabel next = 'FireP0';
		Switch(GetPowerLevel())
		{
			Case 0: break;
			Case 1:	next = 'FireP1';	break;
			Case 2: next = 'FireP2';	break;
			Case 3: next = 'FireP3';	break;
			Case 4: next = 'FireP4';	break;
			Case 5: next = 'FireP5';	break;
			Case 6: next = 'FireP6';	break;
			Default: next = 'FireP7';	break;
		}
		return ResolveState(next);
	}
	
	// Same as above but for secondary.
	action state CheckSecondary()
	{
		StateLabel next = 'AltFireP0';
		Switch(GetPowerLevel())
		{
			Case 0: break;
			Case 1:	next = 'AltFireP1';		break;
			Case 2: next = 'AltFireP2';		break;
			Case 3: next = 'AltFireP3';		break;
			Case 4: next = 'AltFireP4';		break;
			Case 5: next = 'AltFireP5';		break;
			Case 6: next = 'AltFireP6';		break;
			Default: next = 'AltFireP7';	break;
		}
		return ResolveState(next);
	}
	
	action void A_StartBeam(
		Class<MCBeam> BeamName, Vector3 Off = (0,0,0), int Count = 1,
		Class<Actor> PuffName = "D4BulletPuff", int dmg = 0, double ang = 0, double pit = 0,
		double dist = 8192)
	{
		Count = Max(1, Count);
		
		Vector3 x, y, z, origin;
		[x, y, z] = MC_CoordUtil.GetAxes(Pitch,Angle,Roll);
		origin = Vec2OffsetZ(0,0,player.viewz) + Off.x * x + Off.y * y + Off.z * z;
		
		if (dist <= 0.0)	dist = 8192.0;
		Actor Puff = LineAttack(angle + ang, dist, pitch + pit, dmg, 'None', PuffName, LAF_NOINTERACT);
		for (int i = 0; i < Count; i++)
		{
			let Beam = MCBeam(Spawn(beamname,origin));
			Beam.Angle = Angle;
			Beam.Pitch = Pitch;
			Beam.Target = invoker.owner;
			Beam.Master = invoker.owner;
			Beam.Tracer = Puff;
			Beam.OffX = Off.x;
			Beam.OffY = Off.y;
			Beam.OffZ = Off.z;
			invoker.Beams.Push(Beam);
		}
	}
	
	action void A_UpdateBeamTracer(
		Class<Actor> PuffName = "D4BulletPuff", int dmg = 0, double ang = 0, double pit = 0,
		double dist = 8192)
	{
		int flags = LAF_NORANDOMPUFFZ;
		if (dmg <= 0)	flags |= LAF_NOINTERACT;
		Actor Puff = LineAttack(angle + ang, dist, BulletSlope() + pit, dmg, '', PuffName, flags);
		
		if (invoker.Beams.Size() < 1)	return;
		for (int i = 0; i < invoker.Beams.Size(); i++)
		{
			let mo = invoker.Beams[i];
			if (!mo)	continue;
			
			if (Puff)	mo.Tracer = Puff;
		}
	}
	
	action void A_StopBeam(Sound StopSound = "")
	{
		A_StopSound(CHAN_WEAPON);
		A_PlaySound(StopSound, CHAN_WEAPON);
		if (invoker.beams.Size() > 0)
		{
			for (int i = 0; i < invoker.beams.Size(); i++)
			{
				let mo = invoker.Beams[i];
				if (mo)	mo.Die(null, null);
			}
			invoker.Beams.Clear();
		}
	}
	action Actor FireProjectile(Class<Actor> proj, Vector3 off)
	{
		let o = invoker.owner;
		Vector3 px, py, pz, origin;
		[px, py, pz] = MC_CoordUtil.GetAxes(Pitch,Angle,Roll);
		origin = Vec2OffsetZ(0,0,player.viewz) + off.x * px + off.y * py + off.z * pz;
		let gren = Spawn(proj, origin, ALLOW_REPLACE);
		if (gren)
		{
			gren.target = self;
			gren.angle = angle;
			gren.Vel3DFromAngle(gren.speed, angle, pitch);
		}
		return gren;
	}
	
	override void OwnerDied()
	{
		A_StopBeam();
		Super.OwnerDied();
	}
	override void DetachFromOwner()
	{
		A_StopBeam();
		Super.DetachFromOwner();
	}
	override void OnDestroy()
	{
		A_StopBeam();
		Super.OnDestroy();
	}
}

//=================================================================================================
//=================================================================================================

//		Base sprites for the thing

//=================================================================================================
//=================================================================================================

Class DemonRuneBase : CustomInventory
{
	const Minute = 60 * 35;
	Actor PickerUpper;
	Class<Inventory> Token;
	Class<Inventory> Morph;
	Actor ring;
	int timer;
	int duration;
	int PowerLevel;
	Property Morph: Morph, Token;
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Radius 6;
		Height 12;
		Scale 0.1;
		+INVENTORY.QUIET
		+FORCEXYBILLBOARD
		+BRIGHT
		+DONTGIB
	//	+INVENTORY.TRANSFER
	}
	
	override void BeginPlay()
	{
		ChangeStatNum(STAT_RUNEPICKUPS);
		timer = 60 * 35;  // tics before expiration
		Super.BeginPlay();
	}
	
	override void OnDrop(Actor dropper)
	{
		if (!dropper)	return;
		
		int Count = dropper.CountInv("D4MonsterUpgrader");
		PowerLevel = Clamp(Count, 0, MaxRunePower);
	}
	
	override void OnDestroy()
	{
		if (ring) ring.Destroy();
	}
	
	override void PostBeginPlay()
	{
		if (GetClassName() == 'DemonRuneBase' || !Morph)
		{	Destroy();	return;	}
		
		bool limit = true;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i]) 
			{
				let plr = players[i].mo;
				if (plr && plr.CountInv("D4RuneUpgrade3"))
				{
					limit = false;
					break;
				}
			}
		}
		
		// Only check for the same type.
		if (limit)
		{
			let Event = D4DHandler.Fetch();
			int size = Event.DemonRunes.Size();
			for (int i = 0; i < size; i++)
			{
				let mo = DemonRuneBase(Event.DemonRunes.Actors[i]);
				if (!mo || mo == self)
					continue;
				
				if (mo.PowerLevel == PowerLevel)
				{	Destroy();	return;	}
			}
		}
		Name trans = 'None';
		PowerLevel = Clamp(abs(PowerLevel), 0, MaxRunePower);
		Switch (PowerLevel)
		{
			Default:	break;
			Case 1:	trans = 'D4D_Green';	break;
			Case 2:	trans = 'D4D_Blue';		break;
			Case 3:	trans = 'D4D_Purple';	break;
			Case 4:	trans = 'D4D_Orange';	break;
			Case 5:	trans = 'D4D_Red';		break;
			Case 6:	trans = 'D4D_Black';	break;
			Case 7:	trans = 'D4D_White';	break;
		}
		if (trans != 'None')
			A_SetTranslation(trans);
		Super.PostBeginPlay();
	}
	
	action void GiveMorph()
	{
		A_GiveInventory("SoundStopper",1); //stops any sound (mostly for the looping ones)
	//	A_GiveInventory("HealthArmorSaver",1);
		A_GiveInventory("IamADemonToken",1); //...gives token and morphs
		A_GiveInventory(invoker.Token,1); 
		A_GiveInventory(invoker.Morph,1);
		A_SetInventory("D4MonsterUpgrader", invoker.PowerLevel);
	}
	
	override bool TryPickup(in out Actor toucher)
	{
		if (toucher.FindInventory("PowerMorph",true))
			return false;
		PickerUpper = toucher;
		return Super.TryPickup(toucher);
	}
	
	States
	{
	Spawn:
		RUNE A 0 NoDelay
		{
			bool d;
			[d, invoker.ring] = A_SpawnItemEx("DemonRuneBackground",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERSCALE|SXF_ORIGINATOR|SXF_TRANSFERTRANSLATION);
			invoker.timer *= Max(1, invoker.PowerLevel + 1);
		}
		Goto Idle;
	Idle:
		RUNE A 1 BRIGHT Light("OrangeSmallPoint1")
		{
			let ring = invoker.ring;
			let plr = players[0].mo;
			
			// Only check it if it's actually invisible already.
			if (!plr || !plr.CountInv("D4RuneUpgrade2"))
			{
				if (ring) ring.bINVISIBLE = false;
			}
			else if (ring && ring.bINVISIBLE)
			{
				if (plr)
				{
					Inventory i = plr.FindInventory("PowerMorph",true);
					ring.bINVISIBLE = (i && i.Amount > 0);
				}
			}
			if (!plr || (!plr.FindInventory("PowerInvulnerable",true) && !plr.CountInv("IamADemonToken")))
			{
				invoker.timer--;
				if (invoker.timer < (5 * 35))
					A_SetTranslucent((invoker.timer % 35.0) / 35.0); // blink before time-out
			}
			if (invoker.timer < 1)
			{	Destroy();	return;	}
		}
		Wait;
	Pickup:
		TNT1 A 0 
		{
			if (FindInventory("PowerMorph", true) || 
				CountInv("IamADemonToken") || 
				FindInventory("PowerInvulnerable", true) || 
				CountInv("D4DoomDollHands") || 
				CountInv("BusyToken")) //if already a demon...
				return false;	//...cant pickup
			else	//otherwise..
			{	
				GiveMorph();
				return true;
			}
		}
		Stop;
	HoldAndDestroy:
		TNT1 A 1
		{
			Actor mo = invoker.Pickerupper;
			if (mo)
			{
				if (!(mo is "DemonPlayerBase") && mo.Alternative)
					mo = mo.Alternative;
					
				let plr = DemonPlayerBase(mo);
				
				if (plr)
				{
					plr.PowerLevel = invoker.PowerLevel;
					let effect = PowerMorph(plr.FindInventory("PowerMorph",true));
					
					if (effect)
						effect.EffectTics = (Minute) * Max(1, 1 + invoker.PowerLevel);
					else A_LogInt(-3);
				} 
				else A_LogInt(-2);
			}
			else A_LogInt(-1);
		}
		Stop;
	}
}


Class PowerRuneBase : PowerMorph
{
	override void InitEffect()
	{
		if (GetClass() == "PowerRuneBase")
		{
			bInitEffectFailed = true;
			Destroy();	
			return;
		}
		
		if (CountInv("D4RuneUpgrade4"))
			A_GiveInventory("DemonRuneDrainGiver",1);
		
		Super.InitEffect();
	}
	
	override void DoEffect()
	{	
		if (Owner)
		{
			if (IsFrozen() || Owner.bINVULNERABLE || 
				Owner.FindInventory("PowerInvulnerable", true) ||
				(Owner.alternative && Owner.alternative.FindInventory("PowerInvulnerable",true)))
			{
				EffectTics++; //'Freeze' the timer.
			}
			else
			{
				if (EffectTics <= 105)
				{
					Switch (EffectTics)
					{
						Case 105:
							Owner.A_PlaySound("PentagramOfProtection/Warning",7,1,0,ATTN_NONE);
						Case 70:
						Case 35:
							Owner.A_SetBlend("Yellow",0.4,12);
						Default:
							break;
					}
				}
			}
		}
		Super.DoEffect();
	}
	override void EndEffect()
	{
		if (Owner)	
		{
			Owner.A_SetInventory("D4MonsterUpgrader",0);
		}
		Super.EndEffect();
	}
}

Class DemonRuneBackground : Actor 
{
	Default 
	{
		+NOINTERACTION
		+ROLLCENTER
		+ROLLSPRITE
		Scale 0.1;
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_PlaySound("Player/Demon/RuneFxLoop",CHAN_AUTO,1.0,1);
		RUNE B 1 BRIGHT 
		{
			if (master)
			{
				A_SetRoll(roll-0.9,SPF_INTERPOLATE);
				A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_COPYVELOCITY);
			}
			else return Destroy();
		}
		Wait;
	}
}

// upon getting this thing, player will unmorph immediately
// No longer used.
Class UnMorpher : ArtiTomeOfPower
{
	Default 
	{
		//Game "Doom";
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.QUIET
		-INVENTORY.INVBAR
		-COUNTITEM
		-FLOATBOB
		+NOTIMEFREEZE
		Inventory.PickupMessage "";
		Powerup.Duration 1;
	}
}

// The fog actor, cosmetic, but also does stuff to player for special behavior
Class DemonRuneMorphOff : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTIMEFREEZE
		RenderStyle "None";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		//Depending on the token, will play the death sound of that demon		
		static const Sound deathsnd[] =
		{
			"Doom4/Monsters/HellKnight/Death",
			"Doom4/Monsters/Baron/Death",
			"Doom4/Monsters/Revenant/Death",
			"Doom4/Monsters/Cacodemon/Death",
			"Doom4/Monsters/Mancubus/Death",
			"Doom4/Monsters/PainElemental/Death",
			"Doom4/Cyberdemon/Death",
			"Doom4/SpiderMastermind/Death",
			"Doom4/Monsters/Archvile/Death",
			"Doom4/Monsters/Arachnotron/Death"
		};
		
		static const Class<Inventory> things[] =
		{
			"IamHellKnight",
			"IamBaronOfHell",
			"IamRevenant",
			"IamCacodemon",
			"IamFatso",
			"IamPainElemental",
			"IamCyberdemon",
			"IamSpiderMastermind",
			"IamArchvile",
			"IamArachnotron",
			"IamADemonToken",
			"OverlaysStarted",
			"PowerFlight",
			"PowerDrain",
			"BusyToken"
		};
		
		//Removes any and all demon tokens from player
		bool played = false;
		int size = things.Size();
		if (target)
		{
			for (int i = 0; i < size; i++)
			{
				if (!played && i < deathsnd.Size() && target.CountInv(things[i]) > 0)
				{
					played = true;
					A_PlaySound(deathsnd[i],7);
				}
				target.A_SetInventory(things[i], 0);
			}
		
			target.A_GiveInventory("DemonOverlayCleaner",1);	//cleans the demon overlays on unmorphed player
			target.A_GiveInventory("DemonWarpersCleaner",1);	//cleans the demon warpers on unmorphed player
			target.A_GiveInventory("HealthArmorRestorer",1);	//restores health and armor
		}
		
		// Reset all D4D monsters back to normal.
		let event = MCHandler.Fetch();
		if (event)
		{
			let en = Spawn("Enemifier", (0,0,0));
			int size = Event.Monsters.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mon = Event.Monsters.Actors[i];
				if (!mon || !(mon is "D4AbstractMonster") || mon.health < 1)	
					continue;
				
				mon.CopyFriendliness(en, false, false);
				mon.bFriendly = false;
				mon.bDontHarmSpecies = false;
				mon.bThruSpecies = false;
				mon.bMThruSpecies = false;
				mon.bNoBlockMonst = false;
				mon.Species = Default.Species;
				mon.A_ChangeCountFlags(true);
			}
		}
		A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION/*|SXF_USEBLOODCOLOR*/);
		A_PlaySound("Doom4/Other/GibExplode",6);
	}
	
	States
	{
	Spawn:
		PLAY A 0;
		PLAY AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			A_SpawnItemEx("CarrionFlameFast",0,0,0,frandom(4,-4),frandom(4,-4),frandom(4,-4),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("CarrionFlameFast",0,0,0,frandom(4,-4),frandom(4,-4),frandom(4,-4),random(0,359),SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

Class Enemifier : Actor 
{
	Default 
	{
		Monster;
		+NOINTERACTION
		-COUNTKILL
		+NODAMAGE
		+THRUACTORS
		-FRIENDLY
		+NOTRIGGER
		+NOTELEPORT
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 3;
		Stop;
	}
}

//-------------------------------------------------------------------
// Cleans the overlays called by demons
//-------------------------------------------------------------------
Class DemonOverlayCleaner : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_ClearOverlays(6000,6100); //all demon overlays are between these two
		//	ACS_NamedExecute("ResetOverlayState",0,0,0,0);
		}
		Stop;
	}
}


//-------------------------------------------------------------------
// to save and restore health/armor pre/post morph
//-------------------------------------------------------------------
Class HealthArmorSaver : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory("DHealthCount",health);
			int arm = CountInv("BasicArmor");
			if (arm)
				A_GiveInventory("DArmorCount",arm); 
			return true;
		}
		Stop;
	}
}

Class HealthArmorRestorer : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_SetHealth(CountInv("DHealthCount",Player1));
			
			int armcount = CountInv("DArmorCount");
			if (armcount)
			{
				A_GiveInventory("ArmorSinglePoint",1);
				
				let inv = BasicArmor(FindInventory("BasicArmor"));
				if (inv)
				{
					inv.Amount = armcount;
					inv.MaxAbsorb = Max(inv.MaxAbsorb, inv.Amount);
					inv.MaxFullAbsorb = Max(inv.MaxFullAbsorb, inv.Amount);
				}
			}
			/*
			while (CountInv("DArmorCount"))
			{
				A_GiveInventory("ArmorSinglePoint",1);
				A_TakeInventory("DArmorCount",1);
			}
			*/
			A_SetInventory("DHealthCount",0);
			A_SetInventory("DArmorCount",0);
		}
		Stop;
	}
}

Class DHealthCount : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFD; +INVENTORY.IGNORESKILL } }
Class DArmorCount : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFD; +INVENTORY.IGNORESKILL } }



//-------------------------------------------------------------------
//Cleans all the A_Warp muzzle flashes
//-------------------------------------------------------------------
Class DemonWarpersCleaner : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_RemoveChildren(true,RMVF_EVERYTHING,"BaronPlayerMuzzle");
			A_RemoveChildren(true,RMVF_EVERYTHING,"MastermindPlayerMuzzleRed");
			A_RemoveChildren(true,RMVF_EVERYTHING,"CyberdemonPlayerMuzzle");
			A_RemoveChildren(true,RMVF_EVERYTHING,"SummonerPlayerMuzzle");
		}
		Stop;
	}
}

//-------------------------------------------------------------------
// Fog for when you become a demon
//-------------------------------------------------------------------

Class DemonRuneMorphOn : Actor 
{
	const RollAmount = 8.0;
	const ScaleMul = 0.5;
	double  user_c;
	double  URoll;
	int user_t;
	int user_rng;
	double  user_dist;
	double  UCos;
	int UFloor;
	int user_duration;
	
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		+FLATSPRITE
		+ROLLSPRITE
		RenderStyle "Add";
		Radius 32;
		Alpha 0;
		Scale 0;
		//Translation "0:255=%[0,0,0]:[1.0,0.0,0.2]"
	}
	States
	{
	Spawn:
		RUNE C 0 NoDelay
		{
			invoker.user_duration = 2;
			invoker.URoll = RollAmount * randompick(-1,1);
			A_PlaySound("Player/Demon/Fire",7,0.7);
		}
	Looping:
		"####" "#" 1
		{
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,"Null",1.4);
			A_SpawnItemEx("CarrionFlameFast",
					frandom(0.0,4.0),frandom(0.0,4.0),frandom(0,-80),
					frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION);	
			
			if (invoker.user_c >= 90.0)
			{	return ResolveState(1);	}
			invoker.user_c += (90.0/12.0);
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			A_FadeTo(0.99,(1.0/12.0),FTF_CLAMP);
			A_SetScale(sin(invoker.user_c) * ScaleMul);
			return ResolveState(null);
		}
		Loop;
	Shrink:
		"####" "#" 1
		{	
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,"Null",1.4);
			if (invoker.user_t < (40 + invoker.user_duration) )
			{	invoker.user_t++;	}
			else
			{
				invoker.user_c += (90.0/12.0);
				A_SetScale(sin(invoker.user_c) * ScaleMul);
				if (Scale.X <= 0)	{	return ResolveState("Null");	}
			}
			
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			
			A_SpawnItemEx("CarrionFlameFast",
					frandom(0.0,4.0),frandom(0.0,4.0),frandom(0,-80),
					frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION);	
					
			return ResolveState(null);
		}
		Loop;
	}
}

Class SoundStopper : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			for (int i = 0; i < 8; i++)
				A_StopSound(i);
		}
		Stop;
	}
}





//------------------------------------------------
//Secondary stuff


Class DemonPuff : Actor //for xdeathing everything
{
	Default 
	{
		+NOINTERACTION
		+EXTREMEDEATH
		RenderStyle "None";
		DamageType "Melee";
	}
	states
	{
	Spawn:
		PLAY A 3;
		Stop;
	}
}

Class DemonPuffMelee : FistPuff //for xdeathing everything
{
	Default 
	{
		+NOINTERACTION
		+EXTREMEDEATH
		RenderStyle "None";
		DamageType "Melee";
	}
}

Class DemonRuneDrainGiver : PowerupGiver
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
		Powerup.Duration 0x7FFFFFFD;
		Powerup.Strength 0.05;
		Powerup.Type "PowerDrain";
	}
}

