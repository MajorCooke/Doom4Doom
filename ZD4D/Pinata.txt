
enum PinataConstants
{	
	PinataLifetime = 			175 + DelayVacuum, 
	PinataLifetimeLong = 		700 + DelayVacuum, 
	PinataLifetimeSuperLong = 	4200 + DelayVacuum, //2 minutes
	RadiusPull = 				192,
	DelayVacuum =				20,
	PSpeed = 					24,
	VelFlags =					CVF_RELATIVE|CVF_REPLACE,
};

//==============================================================================
//==============================================================================
//
// Pinata pickups
//
//==============================================================================
//==============================================================================

//------------------------------------------------------------------------------
// The base of all pinatas.
// Contains all the work for determining what type of item to give.
//------------------------------------------------------------------------------
Class D4PinataBase : CustomInventory
{
	enum BorderTypes
	{
		Border_RegAmmo = 	Fr_D,
		Border_BFGAmmo =	Fr_H,
		Border_Armor =		Fr_A,
		Border_Health =		Fr_B
	};
	
	enum ETypes
	{
		Pinata_Ammo = 0,
		Pinata_Health,
		Pinata_Armor
	};
	D4PinataParticles Border;
	int SeekDelay;
	Color Trail;
	Inventory Pickup;
	// Armor specific
	
	// General properties
	
	int						MainType, CR, CG, CB, Amount, MaxAmount, 
							BorderFrame, Lifetime;
	double 					MagnetDistance;
	bool					Magnetic, InfPickup;
	private bool			RandomAmmo;
	Class<Inventory>		BaseType;
	
	Property Lifetime:		Lifetime;
	Property Amount:		Amount;
	Property MaxAmount:		MaxAmount;
	Property MainType: 		MainType;
	Property BaseType: 		BaseType;
	Property Magnetic: 		Magnetic;
	Property Distance:		MagnetDistance;
	Property TrailColor:	CR, CG, CB;
	
	Default
	{
		Inventory.Amount 0;
		Inventory.InterhubAmount 0;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		D4PinataBase.Lifetime PinataLifetime;
		D4PinataBase.TrailColor -1, -1, -1;
		D4PinataBase.MainType Pinata_Ammo;
		D4PinataBase.BaseType "Ammo";
		D4PinataBase.Magnetic true;
		D4PinataBase.Distance RadiusPull;
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
		BounceFactor 0.5;
		+BRIGHT
		-NOGRAVITY
		+NOBLOCKMONST
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+CANBOUNCEWATER
		-BOUNCEAUTOOFF
		+SKYEXPLODE
		+SEEINVISIBLE
		+DONTSPLASH
		+CANNOTPUSH
	}
	
	//==========================================================================
	// Overrides
	//==========================================================================
	/*
	override void BeginPlay()
	{
		Amt = Amount;
		MaxAmt = MaxAmount;
		Super.BeginPlay();
	}
	*/
	override void OnDestroy()
	{
		if (Border)	Border.Destroy();
		Super.OnDestroy();
	}
	override void PostBeginPlay()
	{
		if (!BaseType)		{	Destroy();	return;		}
		
			 if (BaseType is 'Armor')		BaseType = 'D4ArmorBasePickup';
		else if (BaseType is 'Health')		BaseType = 'D4Stimpack';
		else if (BaseType is 'Ammo')		RandomAmmo = (BaseType == 'Ammo');	
		else { Destroy(); return; }
		
		MagnetDistance *= MagnetDistance;
		
		Super.PostBeginPlay();
		Setup();
	}
	
	override void Tick()
	{
		if (!bNOTIMEFREEZE && IsFrozen())
			return;
		
		if (SeekDelay > 0)	SeekDelay--;
		Super.Tick();
	}
	
	//==========================================================================
	// Custom Functions
	//==========================================================================
	
	//-------------------------------------------------------------------------
	//  
	Actor FindPlayer(int distance = -1, Actor mo = null)
	{
		if (distance <= 0) distance = RadiusPull;
		
		// First check for a player to pull towards. If none is supplied,
		// find one.
		
		InfPickup = (sv_unlimited_pickup || bAlwaysPickup);
		mo = CheckReceiver(mo);
		if (mo)	return mo;
		
		// Find the closest player.
		double dist = MagnetDistance;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i])	
				continue;
			
			Actor plr = players[i].mo;
			if (!plr)	continue;
			
			double curdist = Distance3DSquared(plr);
			if (curdist > dist ** 2)
				continue;
				
			plr = CheckReceiver(plr);
			if (!plr)	continue;
			
			//--------------------------------------------------------------
			dist = curdist;
			mo = plr;
		}
			
		return mo;
	}
	
	Actor CheckReceiver(Actor mo)
	{
		if (!mo || mo.health < 1 || !mo.bPICKUP)
			return null;
			
		if (mo.player && (mo.player.cheats & (CF_NOCLIP|CF_NOCLIP2)))
			return null;
		
		if (BaseType is 'Ammo')
		{			
			if (!InfPickup)
			{
				if (RandomAmmo)
				{
					BaseType = PickAmmo(mo);
					if (!BaseType || BaseType == 'Ammo')
						return null;
				}
			
				let inv = mo.FindInventory(BaseType, true);
				if (!inv || inv.Amount >= inv.MaxAmount)
					return null;
			}
		}
		else if (BaseType is 'Health')
		{
			let pl = PlayerPawn(mo);
			if (!pl || pl.Health >= pl.GetMaxHealth(true))
				return null;
		}
		else
		{
			let inv = BasicArmor(mo.FindInventory("BasicArmor",true));
			if (!inv || inv.Amount >= inv.MaxAmount - (100 - mo.CountInv("D4ArmorCapRaiser")))
				return null;
		}
		return mo;
	}
	
	// Finds a random ammo class based on weapons owned that's not full.
	private Class<Ammo> PickAmmo(Actor mo)
	{
		if (!mo)	return null;
		
		Array<Ammo> Ammos; Ammos.Clear();
		
		for (let probe = mo.Inv; probe != null; probe = probe.Inv)
		{
			let wep = Weapon(Probe);
			if (!wep || wep.Amount < 1)	continue;
			
			if (wep is 'Doom4Weapon' || wep is 'AkimboWeapon' || wep is 'Fist')	continue;
			
			Class<Ammo> amo[2]; 
			amo[0] = wep.AmmoType1;
			amo[1] = wep.AmmoType2;
			
			for (int j = 0; j < amo.Size(); j++)
			{
				if (!amo[j])	continue;
				let inv = Ammo(FindInventory(amo[j]));
				if (!inv)		continue;
				
				if (Ammos.Find(inv) < Ammos.Size() && inv.Amount < inv.MaxAmount)
					Ammos.Push(inv);
			}
		}
		
		if (Ammos.Size() < 1)
			return null;
			
		int rng = random[r](0, Ammos.Size() - 1);
		Ammo amm = Ammos[rng];
		
		int mx = amm.MaxAmount;
		let defs = GetDefaultByType(amm.GetClass());
		if (defs.Amount > 0)
			Amount = Max(1, int(defs.Amount / 2));
		else if (mx <= 200)	Amount = random[r](10,20);
		else if (mx <= 100)	Amount = random[r](5, 10);
		else if (mx <= 50)	Amount = random[r](2, 5);
		else if (mx <= 10)	Amount = random[r](1, 3);
		
		return amm.GetClass();
	}
	
	override String PickupMessage()
	{
		if (BaseType is 'Armor' || BaseType is 'D4ArmorBasePickup')	return 'Armor Shard';
		else if (BaseType is 'Health') return 'Health Shard';
		else
		{
			let defs = GetDefaultByType(BaseType);
			return defs.PickupMsg;
		}
	}
	
	//--------------------------------------------------------------------------
	void Setup()
	{
		SeekDelay = DelayVacuum;
		
		if (BaseType is 'Armor' || BaseType is 'D4ArmorBasePickup')
		{
			PickupSound = "Doom4/Pickups/ArmorShard";
			Frame = Fr_A;
			BorderFrame = Frame;
			Trail = "00FF00";
		}
		else if (BaseType is 'Health')
		{
			PickupSound = "Doom4/Pickups/Health";
			Frame = Fr_B;	
			BorderFrame = Frame;	
			Trail = "29C9FF";	
		}
		else
		{
			Trail = "FFED29";
			Frame = Fr_D;
			BorderFrame = Frame;
			if (BaseType == "D4Bullets")
			{}
			else if (BaseType == "D4Carrion")
			{	Trail = "FF2846";	A_SetTranslation("CarrionBorder");	}
			else if (BaseType == "D4Shells")
				Frame = Fr_E;
			else if (BaseType == "D4Cells")
				Frame = Fr_F;
			else if (BaseType == "D4Rockets")
				Frame = Fr_G;
			else if (BaseType == "D4BFGAmmo")
			{
				BorderFrame = Fr_H;
				Frame = BorderFrame;
				Trail = "00FF00";
			}
			let defs = GetDefaultByType(BaseType);
			PickupSound = defs.PickupSound;
		}
		
		// If a custom trail color is defined, use that.
		if (CR >= 0 && CG >= 0 && CB >= 0)
		{
			CR = Clamp(CR, 0, 255);
			CG = Clamp(CG, 0, 255);
			CB = Clamp(CB, 0, 255);
			Trail = Color(255, CR, CG, CB);
		}
	}
	
	override void Touch(Actor toucher)
	{
		if (toucher && toucher.A_GiveInventory(BaseType, Amount))
			Super.Touch(toucher);
	}
	
	States
	{
	Precache:
		PIN2 A 0;
		PIN3 A 0;
	Spawn:
		---- A DelayVacuum NoDelay
		{
			let Border = D4PinataParticles(Spawn("D4PinataParticles", pos, ALLOW_REPLACE));
			if (Border)
			{
				Border.Master = invoker;
				Border.NoSetup = true;
				Border.PT = invoker.Trail;
				Border.frm = invoker.BorderFrame;
			}
			invoker.Border = Border;
		}
	Looking:
		---- A 2
		{
			let i = invoker;
			Actor Trc = i.Tracer;
			if (i.Magnetic)	
			{
				Trc = i.FindPlayer(-1, Trc);				
			}
			
			if (Trc)
			{
				i.Lifetime = i.Default.Lifetime;
				i.Alpha = 1.0;
				double dist = Distance3DSquared(Trc);
				double mdist = Max(1, Trc.Height, Trc.Radius) ** 2;
				
				if (dist <= mdist * 2)
				{
					if (dist <= mdist)
					{
						bNOINTERACTION = false;
						Warp(Trc, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE|WARPF_STOP, 0.5);
						i.Touch(Trc);
					}
					else
					{
						bNOINTERACTION = (!CheckSight(Trc, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY|SF_SEEPASTSHOOTABLELINES));
					}
					
				}
				else
				{
					bNOINTERACTION = false;
					double Ang = Angle;
					A_Face(Trc, 0, 0, 0, 0, FAF_MIDDLE);
					Vel3DFromAngle(PSpeed, Angle, Pitch);
					Angle = Ang;
				}
				
			}
			else if (i.Lifetime-- < 1)
			{
				bNOINTERACTION = false;
				i.Lifetime = 0;
				A_FadeOut();
			}
		}
		Wait;		
	}
}

Class D4PinataParticles : Actor 
{
	Color PT;
	Vector3 oldpos;
	int frm;
	bool NoSetup;
	enum PinataParticleBorder
	{
		Distance = 				200,
		Increment = 			4
	};
	
	Default 
	{
		Radius 1;
		Height 1;
		+NOINTERACTION
		+NOTONAUTOMAP
		+BRIGHT
		+FORCEXYBILLBOARD
		+SEEINVISIBLE
		Scale 0.3;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	
	override void PostBeginPlay() 
	{	
		if (!master)
		{	Destroy(); return;	}
		Super.PostBeginPlay();
		
		if (NoSetup)
			return;
			
		Class<Actor> cls = master.GetClass();
		
		if (cls == "D4PinataArmor")				PT = "00FF00";	
		else if (master is "D4BFGAmmo")			PT = "00FF00";	
		else if (cls == "D4PinataCarrion")		PT = "FF2846";	
		else if (cls == "D4PinataHealth")		PT = "29C9FF";	
		else									PT = "FFED29";	
	}
	
	// Credit to TheZombieKiller for this. <3
	void SpawnPinataParticleLine(Color c, double units, Vector3 pointA, Vector3 pointB)
	{
		//if (pointA == pointB)	return;
		// get a vector pointing from A to B
		let pointAB = pointB - pointA;
		
		// get distance
		let dist = pointAB.Length();
		
		// normalize it
		pointAB /= dist;
		
		// iterate in units of "units" parameter
		for (double i = 1; i <= dist; i += units)
		{
			// we can now use 'pointA + i * pointAB' to
			// get a position that is 'i' units away from
			// pointA, heading in the direction towards pointB
			let position = i * pointAB;
			A_SpawnParticle(c,SPF_FULLBRIGHT,25,8,0,position.x,position.y,position.z);
		}
	}
		
	States
	{
	Spawn:
		TNT1 A 0;
	Looping:
		---- A 1
		{
			let m = Inventory(Master);
			if (!m || m.Owner)
			{
				Destroy();
				return;
			}
			Warp(Master,0,0,5,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_COPYVELOCITY);
			SpawnPinataParticleLine(PT, 4.0, master.pos - master.vel, master.pos);
		}
		Loop;
	}
}

Struct PlrCheck play
{
	//--------------------------------------------------------------------------
	static void SetFlying (Actor who, bool enabled)
	{
		if (!who) return;
		
		who.bNOINTERACTION = who.bNOCLIP = enabled;
		who.A_ChangeLinkFlags(enabled);
	}
	
	//-------------------------------------------------------------------------
	// Checks if the pinata and/or upgrade is near a living player. 
	static Actor CheckForPlayers(Actor checkee, int distance = -1, Inventory item = null)
	{
		if (!checkee)	return null;
		Actor trc = checkee.tracer;
		if (trc)
		{
			if (trc is "PlayerPawn" && trc.bPICKUP && trc.CanTouchItem(item) &&
				trc.health > 0 && trc.player)
			{
				if (!(trc.player.cheats & (CF_NOCLIP|CF_NOCLIP2)))
					return trc;
			}
		}
		
		if (distance <= 0) distance = RadiusPull;
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				Actor plr = players[i].mo;
				if (plr && plr.bPICKUP && plr.health > 0 && plr.CanTouchItem(item) && 
					checkee.Distance3DSquared(plr) <= (distance ** 2))
				{
					if (plr.player.cheats & (CF_NOCLIP|CF_NOCLIP2))
						continue;
					return plr;
				}
			}
		}
		return null;
	}
}



/* UpgradePinataFlier
 *
 * Serves as the latest think tank for the pinatas to help reduce code bloat.
 * One can pass in what items to check along with the upgrades that supplement
 * the check to ensure it's eligible for picking up.
 * 
 * I.e. 
 */

Class UpgradePinataFlier : Thinker
{
	Inventory			Spawner;			// The main actor to move and monitor.
	PlayerPawn			Target;				// The target to fly after.
	Class<Inventory> 	Item;				// The item to check for < max
	Class<Inventory>	Condition;			// Other item to check
	int					Distance;
	int					Conditional; 		// Amount of the conditional to add on
	int 				MaxAmt;				// Max Amount
	bool 				NoUnlimited;		// Ignore unlimited pickup cvar?
	bool				DestroyMe;			// Destroy on the next tic.
	bool				NoItem;				// For upgrades.
	private bool		IsHealth;			// Special treatment required.
	private bool		IsArmor;
	private int			OddTic;
	
	override void PostBeginPlay()
	{
		if (Distance == 0)	Distance = -1;
		// Strictly enforce conditions for health.
		if (Item)
		{
			if (Item == 'Health')
			{
				NoUnlimited = IsHealth = true;
				Condition = null;
				Conditional = 0;
				NoItem = false;
			}
			else if (Item is 'BasicArmor')
			{
				IsArmor = true;
				NoItem = false;
				Condition = null;
				Conditional = 0;
			}
		}
		
		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		if (DestroyMe || !Spawner || Spawner.Owner || (!NoItem && !Item))
		{	Destroy(); return;	}
			
		Inventory it = Inventory(Spawner);
		if (!it || it.Owner)
		{	Destroy(); return;	}
		
		OddTic = (OddTic + 1) % 2;
		
		if (Level.IsFrozen() || !OddTic)	
			return;
		
		Target = PlayerPawn(PlrCheck.CheckForPlayers(Spawner, Distance, Spawner));
		int Amt = 0;
		if (Target && !NoItem)
		{
			if (IsHealth)
			{
				Amt = Target.health;
				MaxAmt = Target.GetMaxHealth(true);
			}
			else if (IsArmor)
			{
				Amt = 0;
			}
			else
			{
				Amt = Target.CountInv(Item) + (Condition ? Target.CountInv(Condition) : 0);
			}
				
			if ((NoUnlimited || !sv_unlimited_pickup) && Amt >= MaxAmt)
				Target = null;
		}
		
		// Will pass in the player that's eligible for this item.
		Spawner.tracer = Target;
		
		Super.Tick();
	}
}

//---------------------------------
// Pinata Armor
Class D4PinataArmor : D4ArmorBasePickup
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4ArmorBasePickup.SaveAmount 6;
		D4PinataArmor.Lifetime PinataLifetime;
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+SEEINVISIBLE
		+CANNOTPUSH
		+INVENTORY.ALWAYSPICKUP
		BounceFactor 0.5;
		DistanceCheck "D4D_MaxDrawDistance";
		Inventory.PickUpSound "Doom4/Pickups/ArmorShard";
		Inventory.PickupMessage "";
	}
	
	States
	{
	Spawn:
		PINA A 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			/*	
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				let i = invoker;
				i.flier.Spawner = invoker;
				i.flier.Item = 'BasicArmor';
				if (i.flier.target)
				{
					let a = i.flier.target.FindInventory("BasicArmor");
					if (a)
						i.flier.MaxAmt = Max(200, a.MaxAmount);
					else
						i.flier.MaxAmt = 200;
				}
			}
			*/
		}
	Looping:
		"----" A 2
		{
			
			if (invoker.count < DelayVacuum)	{	invoker.count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			
			double distance = RadiusPull;
			let trc = invoker.tracer;
			bool skip = false;
			if (trc)
			{
				if (trc is "PlayerPawn" && trc.bPICKUP && trc.CanTouchItem(invoker) &&
					trc.health > 0 && trc.player)
				{
				//	let inv = trc.FindInventory('BasicArmor',true);
					if (!(trc.player.cheats & (CF_NOCLIP|CF_NOCLIP2))
					//	&& (!inv || inv.Amount < inv.MaxAmount)			//This isn't working right...
						)
						skip = true;
				}
			}
			if (!skip)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						Actor plr = players[i].mo;
						if (!plr)	continue;
						
					//	let inv = plr.FindInventory('BasicArmor',true);
						if (plr.bPICKUP && plr.health > 0 && plr.CanTouchItem(invoker) && 
							invoker.Distance3DSquared(plr) <= (distance ** 2)
						//	&& (!inv || inv.Amount < inv.MaxAmount)
							)
						{
							if (plr.player.cheats & (CF_NOCLIP|CF_NOCLIP2))
								continue;
							invoker.tracer = plr;
						}
					}
				}
			}
			
			if (invoker.tracer)
			{
				invoker.count = DelayVacuum;
				PlrCheck.SetFlying(invoker, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	
					SetOrigin(tracer.pos, true); 
					A_Stop(); 
					PlrCheck.SetFlying(invoker, false); 
					invoker.Touch(Tracer);	
				}
			}
			else
			{
				PlrCheck.SetFlying(invoker, false);
				invoker.count += 2;
			}
			
			if (invoker.count > invoker.Lifetime)	A_FadeOut();
			else 									invoker.Alpha = 1.0;
		}
		Loop;
	}
}



//---------------------------------
// Pinata health
Class D4PinataHealth : D4Stimpack
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataHealth.Lifetime PinataLifetime;
		Inventory.PickUpSound "Doom4/Pickups/Health";
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		BounceFactor 0.5;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
		Inventory.Amount 8;
		DistanceCheck "D4D_MaxDrawDistance";
	}
		
	States
	{
	Spawn:
		PINA B 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "Health";
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false); Touch(Tracer);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}


//---------------------------------
// Pinata ammo bullets
Class D4PinataBullets : D4Bullets
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataBullets.Lifetime PinataLifetime;
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 20;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+NOTELESTOMP
		+SEEINVISIBLE
		+CANNOTPUSH
		BounceFactor 0.5;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	
	States
	{
	Spawn:
		PINA D 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Bullets";
				flier.MaxAmt = 250;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false); Touch(Tracer);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}
Class D4PinataBulletsBig : D4PinataBullets
{
	Default 
	{
		Scale 0.5;
		Inventory.Amount 50;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		DistanceCheck "D4D_MaxDrawDistance";
	}
}

//---------------------------------
// Pinata ammo shells
Class D4PinataShells : D4Shells
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataShells.Lifetime PinataLifetime;
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 4;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
		DistanceCheck "D4D_MaxDrawDistance";
	}
		
	States
	{
	Spawn:
		PINA E 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Shells";
				flier.MaxAmt = D4Shells_MaxAmount1;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false); Touch(Tracer);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}


Class D4PinataShellsBig : D4PinataShells
{
	Default 
	{
		Scale 0.5;
		Inventory.Amount 8;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	}
}



//---------------------------------
// Pinata ammo cells
Class D4PinataCells : D4Cells
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataCells.Lifetime PinataLifetime;
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 20;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
	}
	States
	{
	Spawn:
		PINA F 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Cells";
				flier.MaxAmt = D4Cells_MaxAmount1;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false); Touch(Tracer);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}
Class D4PinataCellsBig : D4PinataCells
{
	Default 
	{
		Scale 0.5;
		Inventory.Amount 40;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	}
}

//---------------------------------
// Pinata ammo rockets
Class D4PinataRockets : D4Rockets
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataRockets.Lifetime PinataLifetime;
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.Amount 3;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
	}
	
	States
	{
	Spawn:
		PINA G 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4Rockets";
				flier.MaxAmt = D4Rockets_MaxAmount1;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false); Touch(Tracer);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}
Class D4PinataRocketsBig : D4PinataRockets
{
	Default 
	{
		Scale 0.5;
		Inventory.Amount 6;
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
	}
}


//---------------------------------
// Pinata ammo BFG

Class D4PinataBFG : D4BFGAmmo
{
	UpgradePinataFlier flier;
	int count;	
	bool Flying;
	int Lifetime;
	property Lifetime: Lifetime;
	Default 
	{
		D4PinataBFG.Lifetime PinataLifetimeLong;
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
	}
	
	States
	{
	Spawn:
		PINA H 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0);
			flier = new("UpgradePinataFlier");
			if (flier)
			{
				flier.Spawner = self;
				flier.Item = "D4BFGAmmo";
				flier.MaxAmt = D4BFGAmmo_MaxAmount;
			}
		}
	Looping:
		"----" A 2
		{
			if (count < DelayVacuum)	{	count += 2;	return;		}
			// Tracer should automatically be handled by the thinker.
			if (tracer)
			{
				count = DelayVacuum;
				PlrCheck.SetFlying(self, true);
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
				if (D4D_Utility.CheckTouching(self, invoker.tracer))
				{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false); Touch(Tracer);	}
			}
			else
			{
				PlrCheck.SetFlying(self, false);
				count += 2;
			}
			
			if (count > Lifetime)	A_FadeOut();
			else 					Alpha = 1.0;
		}
		Loop;
	}
}

//=======================================================================
//=======================================================================
// Special drops for zombieman, shotgunguy and chaingunner
//=======================================================================
//=======================================================================

//*********************************
// zombieman
Class D4PinataBulletsZombieman : D4Bullets	//only dropped by these guys, and they dont go after player
{
	int count;
	Default 
	{
		Scale 0.4;
		Radius 8;
		Height 16;
		Inventory.Amount 10;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		BounceType "Doom";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
	}
	States
	{
	Spawn:
		PIN2 D 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
	Looping:
		"----" A 2
		{
			if (A_CheckFloor("Null"))	{	return ResolveState("Landed");	}
			return ResolveState(null);
		}
		Loop;
	Landed:
		"####" "#" 1
		{
			count++;
			if (count > PinataLifetimeLong)
			{	return ResolveState("Fading");		}
			return ResolveState(null);
		}
		Loop;
	Fading:
		"####" "#" 1 A_FadeOut();
		Wait;
	}
}


Class D4PinataShellsShotgunGuy : D4Shells	//only dropped by these guys, and they dont go after player
{
	int count;
	Default 
	{
		Scale 0.4;
		Radius 8;
		Height 16;
		Inventory.Amount 8;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		BounceType "Doom";
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		BounceFactor 0.5;
		+NOBLOCKMONST
		+SEEINVISIBLE
		+NOTELESTOMP
		+CANNOTPUSH
	}
	States
	{
	Spawn:
		PINA E 0 NoDelay 
		{
			A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
	Looping:
		"----" A 2
		{
			if (A_CheckFloor("Null"))	{	return ResolveState("Landed");	}
			return ResolveState(null);
		}
		Loop;
	Landed:
		"####" "#" 1
		{
			count++;
			if (count > PinataLifetimeLong)
			{	return ResolveState("Fading");		}
			return ResolveState(null);
		}
		Loop;
	Fading:
		"####" "#" 1 A_FadeOut();
		Wait;
	}
}

Class D4PinataBulletsChaingunGuy : D4PinataBulletsZombieman	//only dropped by these guys, and they dont go after player
{
	
	Default 
	{ Inventory.Amount 10; }
}




//---------------------------------
// Le cash!
// Unused.

Class D4Cash : Actor 
{
	Default 
	{
		Scale 0.3;
		Radius 8;
		Height 16;
		Gravity 0.4;
	}
	States
	{
	Spawn:
		PINA C 1 NODELAY Bright
		{
			A_SpawnParticle("999999",SPF_FULLBRIGHT,35,3);
			if(A_CheckFloor("Null"))
			{
				return ResolveState("Landed");
			}
			return ResolveState(null);
		}
		Loop;
	Landed:
		PINA C -1 Bright;
		Stop;
	}
}