

Class D4bum : D4Zombieman
{
}

enum ERestrictFlags
{
	RF_NONE =			0,
	RF_NOHEALTH = 		1,
	RF_NOARMOR = 		1 << 1,	//2
	RF_NOBULLETS =		1 << 2,	//4
	RF_NOSHELLS =		1 << 3,	//8
	RF_NOROCKETS =		1 << 4,	//16
	RF_NOCELLS =		1 << 5,	//32
	RF_NOBFGAMMO =		1 << 6,	//64
	RF_NOCARRION =		1 << 7,	//128
	RF_NOCREDITS =		1 << 8,	//256
	RF_NOCRATES =		1 << 9,	//512
	RF_NOUPGRADES =		1 << 10, //1024	- Has no effect in credit mode.
	
	RF_NOCURRENCY = (RF_NOCREDITS|RF_NOCRATES),	
	RF_NOREGAMMO = (RF_NOBULLETS|RF_NOSHELLS|RF_NOROCKETS|RF_NOCELLS),
	RF_NOSPECAMMO = (RF_NOBFGAMMO|RF_NOCARRION),
	RF_NOAMMO = (RF_NOREGAMMO|RF_NOSPECAMMO),
	
	RF_NOPINATAS = (RF_NOHEALTH|RF_NOARMOR|RF_NOAMMO),		
	RF_NOTHING = (RF_NOPINATAS|RF_NOCURRENCY|RF_NOUPGRADES) // Cannot drop anything.
};

Class D4Restriction play
{
	Class<Actor> mo;
	int Restrictions;
	bool parent, replacement;
}

Class D4DHandler : EventHandler
{
	const Second = 35;
	const TimeTrigger = Second * 5;
	const DefaultDropChance = 150;
	MCHandler MC;

	enum EObjectIndex
	{
		BFGAmmo = 0,
		ChainsawAmmo,
		CrucibleAmmo,
		ObjectIndexMax
	};
	private bool Spawnable[ObjectIndexMax];	
	private bool FirstTime;
	private uint Timer;
	
	AArray 	DemonRunes, Carrion;
	Array<D4Restriction> RestrictList;
	D4LootContainer LootList;
	private int UpgradeMode, CurrentUpgradeMode;
	
	bool CheckActorSpawn(EObjectIndex index)			{	return Spawnable[index];	}
	void SetActorSpawn(EObjectIndex index, bool can) 	{	Spawnable[index] = can; 	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	void StageCleanUp()
	{
		Timer = TimeTrigger;
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		RenderDamageIndicators(e);
		if (!automapactive)
			RenderPowerupScreens(e);
	}
	
	override void WorldTick()
	{
		TickDamageIndicators();
		// Clear the lists every TimeTrigger seconds of null pointers.
		Timer++;
		if (Timer >= TimeTrigger)
		{
			DemonRunes.Clean();
			Carrion.Clean();
		}
	}
	
	override void OnRegister()
	{
		SetOrder(1001);
		Super.OnRegister();
	}
	
	clearscope int GetUpgradeMode()	{	return CurrentUpgradeMode;	}
	override void WorldLoaded(WorldEvent e)
	{
		if (level.aircontrol < 0.2)
		{
			level.aircontrol = 0.2;
			level.airfriction = level.aircontrol * -0.0941 + 1.0004;
		}
		MC = MCHandler.Fetch();
		DemonRunes = AArray.Create();
		Carrion = AArray.Create();
		ArrowManager = D4VisualDamageManager.Create();
		
		LootList = D4LootContainer.Create();
		
		LootList.SetEntry('LegendaryZombie',				64, 2, 2, 100,-1,10, 0, Parent: true);
		LootList.SetEntry('LegendaryAssaultCaptain',		64, 2, 2, 150,-1,10, 0);
		LootList.SetEntry('LegendaryStealthTrooper',		64, 2, 2, 150,-1,10, 0);
		LootList.SetEntry('LegendaryCommando',				64, 3, 2, 200,-1,10, 0);
		LootList.SetEntry('LegendaryImp',					64, 2, 2, 150,-1,10, 0);
		LootList.SetEntry('LegendaryPhaseImp',				64, 2, 2, 200,-1,10, 0);
		LootList.SetEntry('LegendaryFiend',					64, 3, 2, 200,-1,10, 0);
		LootList.SetEntry('LegendaryApparition',			64, 3, 2, 200,-1,10, 1);
		LootList.SetEntry('LegendarySoul',					64, 3, 2, 200,-1,10, 0);
		LootList.SetEntry('LegendaryRedeemer',				64, 4, 2, 300,-1,10, 0);
		LootList.SetEntry('LegendaryNecromancer',			64, 3, 2, 250,-1,10, 0);
		LootList.SetEntry('LegendaryHellKnight',			64, 3, 2, 300,-1,10, 0);
		LootList.SetEntry('LegendaryCyberNoble',			64, 4, 2, 350,-1,10, 0);
		LootList.SetEntry('LegendaryAfrit',					64, 4, 2, 350,-1,10, 0);
		LootList.SetEntry('LegendaryArchon',				64, 4, 2, 350,-1,10, 0);
		LootList.SetEntry('LegendaryBehemoth',				64, 5, 2, 350,-1,10, 0);
		LootList.SetEntry('LegendaryBabySentient',			64, 5, 2, 350,-1,10, 0);
		LootList.SetEntry('LegendaryTormentor',				64, 5, 2, 400,-1, 7, 0);
		LootList.SetEntry('LegendaryRevenant',				64, 5, 2, 400,-1,12, 0);
		LootList.SetEntry('LegendaryVile',					64, 6, 2, 400,-1,10, 0);
		LootList.SetEntry('LegendarySentient',				64, 6, 3,1000,-1, 3, 0);
		LootList.SetEntry('LegendaryCyberdemon',			64, 6, 3, 900,-1, 6, 0);
		LootList.SetEntry('LegendaryAnnihilator',			64, 6, 3,1100,-1, 5, 0);
		LootList.SetEntry('LegendaryCardinal',				64, 3, 3,1000,-1,10, 1);
		
		LootList.SetEntry('TrueLegendaryCardinal',			64,10, 5,2000,-1,10, 4);
		LootList.SetEntry('TrueLegendaryCyberdemon',		64,10, 5,2000,-1,10, 3);
		LootList.SetEntry('TrueLegendaryCyberdemonNormal',	64,10, 5,2000,-1,10, 2);
		LootList.SetEntry('TrueLegendarySentient',			64,10, 5,2000,-1,10, 5);
		LootList.SetEntry('TrueLegendaryBabySentient',		64, 5, 2,1000,-1,10, 1);
		
		LootList.SetEntry('EnragedLegendaryZombie',			64, 3, 3, 200,-1, 7, 0);
		LootList.SetEntry('EnragedLegendaryAssaultCaptain',	64, 3, 3, 250,-1, 7, 0);
		LootList.SetEntry('EnragedLegendaryStealthTrooper',	64, 3, 3, 250,-1, 7, 0);
		LootList.SetEntry('EnragedLegendaryCommando',		64, 3, 4, 300,-1, 6, 0);
		LootList.SetEntry('EnragedLegendaryImp',			64, 3, 4, 250,-1, 6, 0);
		LootList.SetEntry('EnragedLegendaryFiend',			64, 3, 3, 300,-1, 6, 0);
		LootList.SetEntry('EnragedLegendarySoul',			64, 3, 4, 400,-1, 6, 0);
		LootList.SetEntry('EnragedLegendaryRedeemer',		64, 3, 3, 400,-1, 5, 0);
		LootList.SetEntry('EnragedLegendaryHellKnight',		64, 3, 3, 400,-1, 4, 0);
		LootList.SetEntry('EnragedLegendaryCybruiser',		64, 4, 3, 500,-1, 4, 1);
		LootList.SetEntry('EnragedLegendaryBehemoth',		64, 5, 4, 600,-1, 4, 0);
		LootList.SetEntry('EnragedLegendaryBabySentient',	64, 5, 4, 600,-1, 3, 0);
		LootList.SetEntry('EnragedLegendaryTormentor',		64, 5, 3, 700,-1, 2, 0);
		LootList.SetEntry('EnragedLegendaryRevenant',		64, 5, 3, 700,-1, 5, 0);
		LootList.SetEntry('EnragedLegendarySentient',		64, 7, 3,1000,-1, 2, 1);
		
		// Minecraft Monsters
		Lootlist.SetEntry('MCZombie',						32, 1, 0, 20);
		Lootlist.SetEntry('MCSkeleton',						32, 1, 0, 20);
		Lootlist.SetEntry('MCCreeper',						32, 1, 0, 20);
		/*
		zombieman 			5	
		shotgunguy 			10
		imp 				10
		chaingun guy 		20
		demon				30
		spectre				30
		lost soul			10
		cacodemon			40
		hell knight			60
		revenant			60
		pain elemental		80
		baron of hell		100
		fatso				90
		arachnotron			80
		archvile			150
		cyberdemon			400
		mastermind			400
		Nazi 				40, not that they are hard, but they are easter eggs after all
		*/
		
		LootList.SetEntry('Zombieman',			2,		1, 0,	5,		-1, 300);
		LootList.SetEntry('ShotgunGuy',			4,		1, 0,	10,		-1, 290);
		LootList.SetEntry('ChaingunGuy', 		8,		1, 0,	20,		-1, 260);
		LootList.SetEntry('DoomImp',			4,		1, 0,	10,		-1, 285);
		LootList.SetEntry('Demon', 				4,		1, 0,	30,		-1, 250);
		LootList.SetEntry('Spectre',			4,		1, 0,	30,		-1, 250);
		LootList.SetEntry('LostSoul',			4,		1, 0,	10,		-1);
		LootList.SetEntry('Cacodemon',			28,		2, 0,	40,		-1);
		LootList.SetEntry('HellKnight',			16,		2, 0,	60,		-1);
		LootList.SetEntry('BaronOfHell',		32,		2, 0,	100,	-1);
		LootList.SetEntry('PainElemental',		64,		1, 0,	80,		-1);
		LootList.SetEntry('Fatso',				32,		2, 0,	90,		-1);
		LootList.SetEntry('Revenant',			48,		1, 0,	60,		-1);
		LootList.SetEntry('Arachnotron',		32,		2, 0,	80,		-1);
		LootList.SetEntry('Archvile',			64,		2, 0,	150,	-1);
		LootList.SetEntry('Cyberdemon',			128,	4, 2,	400,	2000);
		LootList.SetEntry('SpiderMastermind',	128,	4, 2,	400,	2000);
		LootList.SetEntry('SSNazi',				0,		0, 1,	40);
		// Use the ERestrictFlags at the top of the file to set restrictions.
		// Most of them should be self explanatory.
		int LostSoulRestrictions = (RF_NOHEALTH|RF_NOARMOR|RF_NOBFGAMMO|RF_NOUPGRADES);
		SetRestrictions("D4LostSoulNoCash", LostSoulRestrictions, true);
		SetRestrictions("D4OldLostSoulNoCash", LostSoulRestrictions, true);
		
		for (int i = 0; i < MAXPLAYERS; i++)	KNMInput[i] = 0;
		// If starting a new game, set the upgrade mode appropriately. 
		
		if (!FirstTime && !e.IsSaveGame)
		{
			CVar Upgrade[2];
			Upgrade[0] = CVar.FindCVar("D4D_UpgradeMode");
			Upgrade[1] = CVar.FindCVar("D4D_CurrentUpgradeMode");
			
			if (Upgrade[0] && Upgrade[1])
			{
				UpgradeMode = Upgrade[0].GetInt();
				Upgrade[1].SetInt(UpgradeMode);
				CurrentUpgradeMode = UpgradeMode;
			}
		}
		
		if (!e.IsSaveGame)
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i] && players[i].mo)
					players[i].mo.SetInventory("RewardToken",0);
			}
		}
	}
	
	// Don't clear out the arrays, in the event this is a hub.
	override void WorldUnloaded(WorldEvent e)
	{
		for (int i = 0; i < MAXPLAYERS; i++)	KNMInput[i] = 0;
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	bool IsPlayerPawn(Actor mo)
	{
		return (!mo || mo is "PlayerPawn" || mo.player);
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	// Recording section. Here, we add things that have specifics needs for 
	// tracking so we don't have to rely on iterators. As Graf Zahl stated,
	// an array will go much farther to optimize the crap out of searching
	// over using an iterator in almost all circumstances.
	//
	// Monsters, missiles, items, etc are all recorded in MC_Utility instead
	// of here so they're globally accessible for other mods to use. 
	override void WorldThingSpawned(WorldEvent e)
	{
		Actor mo = e.thing;
		if (!mo)	return;
		
		if ((mo.bISMONSTER || mo.bSHOOTABLE) && mo.health > 0)
		{
			let mon = D4AbstractMonster(mo);
			if (mon)	mon.Event = self;
			
			if (D4D_MonsterType >= 2)
			{
				if (mon) // Use the function they have. Lost souls shouldn't gain a level.
				{
					int amt = mon.ChoosePowerLevel();
					if (amt)  mon.SetupPowerLevel(amt);
					return;
				}
				int amt = ChoosePowerLevel();
				mo.SetInventory('D4MonsterUpgrader', amt);
			}
		}
		else if (mo is 'Doom4Weapon')
			CheckCrucibleSpawn(mo);
		else if (mo is 'DemonRuneBase')
		{
			DemonRunes.Push(mo);
		}
		else if (mo.bNOINTERACTION || mo.bNOSECTOR)
			return;
		else
		{
			String texname = "";
				 
				 if (mo is "D4PinataArmor")		texname = "PINBA0";
			else if (mo is "D4PinataHealth")	texname = "PINBB0";
			else if (mo is "D4PinataBullets" ||
					 mo is "D4PinataShells" ||
					 mo is "D4PinataRockets" ||
					 mo is "D4PinataCells" ||
					 mo is "D4PinataBulletsZombieman" ||
					 mo is "D4PinataShellsShotgunGuy")
												texname = "PINBD0";
			else if (mo is "D4PinataBFG")		texname = "PINBH0";
			else if (mo is "D4PinataCarrion")
			{
				let car = D4PinataCarrion(mo);				
				car.Event = self;
				Carrion.Push(mo);
				texname = "PINBI0";
			}
			else if (mo is 'D4UpgradeCase' && mo.bDROPPED)
				texname = "PINBJ0";
			else return;
			
			if (!MC)	MC = MCHandler.Fetch();
			if (MC)
			{
				double PinataSize = 0.3;
				double PinMinSize = 1.0;
				MC.AddShape(mo, mo, texname, (0, mo.height / 2.0), 0, (PinataSize,PinataSize), PinMinSize, 0.0, 'D4D_DrawPinataBorders', 0, 1024, 'D4D_PinataScale');
			}
		}
	}
	
	int ChoosePowerLevel()
	{
		int rng = random(1, 2000);
		if (rng <= 1)	return 7;	
		if (rng <= 5)	return 6;	
		if (rng <= 10)	return 5;	
		if (rng <= 30)	return 4;	
		if (rng <= 60)	return 3;	
		if (rng <= 100)	return 2;	
		if (rng <= 200)	return 1;
		return 0;
	}
	
	//--------------------------------------------------------------------------
	// Called by carrion whenever collected, so carrion won't merge with it.
	//--------------------------------------------------------------------------

	void RemoveCarrion(D4PinataCarrion mo)
	{
		if (mo && Carrion.Size() > 0)
		{
			int i = Carrion.Find(mo);
			if (i < Carrion.Size())
				Carrion.Actors[i] = null;
		}
	}
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	override void WorldThingDied(WorldEvent e)
	{
		Actor mo = e.Thing;
		
		if (IsPlayerPawn(mo))
			return;
		
		DropPinatas(mo, e.Inflictor);
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	override void WorldThingDamaged(WorldEvent e)
	{
		Actor damaged =	e.Thing;
		
		// Unfortunately, fully absorbed damage by armor means this won't trigger.
		// While I've programmed an exception to be made with Doom4Player + runes,
		// anyone else as another player class not inheriting from Doom4Player
		// will not show the indicators, because they would need to program
		// their own armor differences and call the AddDamageIndicator function
		// manually.
		
		// But because this can work with any player, at least health loss will
		// show an indicator. Armor loss is handled on Doom4Player directly.
		// This gives the best of both worlds and at least makes the feature 3/4
		// complete, but that's the best we can hope for without needing some
		// manual programming.
		
		if (damaged.player)
		{
			Actor	src = e.DamageSource,
					inf = e.Inflictor;
			
			if (!src && !inf)
				return;
			
			AddEventDamageIndicator(e);
		}
		else
		{
			let inv = D4FlameTimer(damaged.FindInventory('D4FlameTimer'));
			
			
			if (inv)	
			{
				if (e.DamageFlags & (DMG_NO_PROTECT|DMG_NO_ARMOR|DMG_FORCED))
					inv.prevhp = Max(0, damaged.health) + e.Damage;
				inv._damage += Max(0, e.Damage);
			}
		}
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = players[num].mo;
		
		if (!plr)	
		{	Console.Printf("No player found");	return;	}
		
		
		// Blocks execution of certain netevent commands that can and will
		// destabilize the game if used improperly. These should only be
		// called from code like the menu.
		if (e.isManual)
		{
			if (e.Name == 'bars')
			{
				Cvar c = Cvar.FindCvar('bars');
				if (c)	
				{
					bool b = c.GetBool();
					c.SetBool(!b);
				}
				return;
			}
		
			static const Name ProtectedCommands[] =
			{
				//'AkimboSystem'
				'DisableReception',
				'EnableReception',
				'UpdateItems'
			};
			int size = ProtectedCommands.Size();
			for (int i = 0; i < size; i++)
			{
				if (e.Name == ProtectedCommands[i])
				{
					Console.Printf(e.Name.." cannot be called by console.");
					return;
				}
			}
		}
		else
		{
			int arg = e.Args[0];
			if (e.Name == 'D4D_KNM++')			{	KNMInput[arg]++;	return;	}
			else if (e.Name == 'D4D_KNM0')		{	KNMInput[arg] = 0;	return;	}
			else if (e.Name == 'D4D_KNM')		{	KNM(e);				return;	}
		}
		if (!e.IsManual)
		{
			bool ret = true;
			if (e.Name == 'DisableReception')
			{
				deltas[num].receiving = false;
			}
			else if (deltas[num].receiving)
			{
				deltas[num].SetItem(e.Name, e.Args[0], e.Args[1]);
			}
			else if (e.Name == 'EnableReception')
			{
				deltas[num].receiving = true;
			}
			else if (e.Name == 'UpdateItems')
			{
				if (deltas[num].ItemName.Size() > 0)
				{
					for (int i = 0; i < deltas[num].ItemName.Size(); i++)
					{
						Class<Inventory> item = deltas[num].ItemName[i];
						if (item)
						{
							plr.A_SetInventory(item, deltas[num].Count[i]);
							let it = UpgradeItem(plr.FindInventory(item));
							
							if (it)
							{
								it.UpdateItem();
							}
						}
					}
				}
				deltas[num].ItemName.Clear();
				deltas[num].Count.Clear();		
			}
			else ret = false;
			
			if (ret)	return;
			
		}
		
		let pl = Doom4Player(plr);
		if (pl)
		{
			bool ret = true;
			
			if (e.Name == 'Dash')
				pl.TryDash();
			else ret = pl.TryEquipment(e.Name);
			
			if (ret)	return;
		}
		/*
		if (e.Name == 'CountLines')
		{
			int c1 = 0, c2 = 0;
			[c1, c2] = D4D_Utility.CountIntersectingLines(plr);
			Console.Printf("%d lines iterated - %d in range", c1, c2);
		}
		else*/ if (e.Name == 'SectorLight')		SetSectorLight(e);
		else if (e.Name == 'RemoveAmmo')		RemoveAmmoActors();
		else if (e.Name == 'FindLiveTID')		FindLiveTID(e);
		else if (e.Name == 'PrintSlots')		PrintSlots(e);
		else
		{
			static const String KeyWords[] =
			{
				'D4DAddon_',
				'Akimbo_SetLeft_',
				'Akimbo_SetRight_',
				'Rune_'
			};
			int size = KeyWords.Size();
			for (int i = 0; i < size; i++)
			{
				// If it doesn't have the matching command, next please.
				
				
				Name check1 = e.Name.Left(Keywords[i].Length());
				Name check2 = KeyWords[i];
				if (check1 != check2)
					continue;
					
				// It's one of the keywords. Process it.
				String suffix = e.Name.Mid(KeyWords[i].Length(), e.Name.Length());
				
				Switch(i)
				{
					// For external mods to use as they please using their own handlers
					// without interrupting this one.
					Case 0:		// D4DAddon_
						return;
					
					Case 1:		// Akimbo_SetLeft_
					Case 2:		// Akimbo_SetRight_
					{
						bool IsRight = (i == 2);
						let ak = AkimboWeapon(plr.FindInventory("AkimboWeapon",true));
						if (ak)	ak.SetWeaponSide(suffix, IsRight);
						return;
					}
					
					Case 3:
					{
						SummonRune(plr, suffix, e.Args[0]);
						return;
					}
					
					Default:	// Some other command that's not viable.
						break;
				}
			}
			CVar EventPrint = CVar.FindCVar("D4D_NetEventDebug");
			if (EventPrint && EventPrint.GetInt())
			{
				Console.Printf("D4DHandler: "..e.Name.."- Undefined net event");
			}
		}
	}
	
	//==========================================================================
	//==========================================================================
	// Custom functions
	//==========================================================================
	//==========================================================================
	
	// Removes all ammo actors from the map.
	void RemoveAmmoActors()
	{
		static const Class<Inventory> names[] =
		{
			"Ammo",
			"ClipReplacer",
			"ClipBoxReplacer",
			"ShellReplacer",
			"ShellBoxReplacer",
			"RocketBoxReplacer",
			"RocketAmmoReplacer",
			"CellReplacer",
			"CellPackReplacer"
		};
		
		ThinkerIterator it = ThinkerIterator.Create("Inventory");
		Inventory mo;
		int count = 0;
		while (mo = Inventory(it.Next()))
		{
			// Do not attempt to remove any actors with the following properties: 
			// - Owner (An actor that 'has' this inventory)
			// - TID 
			// - Special
			if (mo.Owner || mo.TID || mo.Special)
				continue;
			
			let am = Ammo(mo);
			if (am)
			{
				count++;
				am.Destroy();
				continue;
			}
			int size = names.Size();
			for (int i = 0; i < size; i++)
			{
				if (mo is names[i])
				{
					count++;
					mo.Destroy();
					break;
				}
			}
			
		}
		Console.Printf("%d ammo actors destroyed", count);
	}
	
	//--------------------------------------------------------------------------
	// IsUpgradeBlacklisted
	//
	// Global function. Checks if the item is directly a set of blacklisted
	// items. Blacklisted items should never be given.
	//--------------------------------------------------------------------------
	static bool IsUpgradeBlacklisted(Class<D4DKeeperItem> Item, bool crate = false)
	{
		if (!Item)	return true;
		static const Name Blacklist[] =
		{
			'UpgradeItem',
			'UpgradeItemSpecial',
			'D4DKeeperItem',
			'D4RuneUpgrade1'
		};
		
		// Make sure it's not directly a blacklisted item.
		String Check = Item.GetClassName();
		for (int j = 0; j < Blacklist.Size(); j++)
			if (Check == Blacklist[j])
				return true;
		
		if (crate)
		{
			if (Check == 'CashPercentBonus')	return true;
		}
		
		// UpgradeBase derived items should never be given. They are merely
		// there for the sake of giving the hint for which weapon they belong to.
		if (Check.IndexOf("UpgradeBase") >= 0)
			return true;
		
		return false;
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
	static clearscope D4DHandler Fetch()
	{
		return D4DHandler(Find("D4DHandler"));
	}
	
	//==========================================================================
	// Item Restrictions
	//==========================================================================
	
	//--------------------------------------------------------------------------
	// ClearAllRestrictions
	// 
	// Removes all item drop restrictions.
	//--------------------------------------------------------------------------
	void ClearAllRestrictions()
	{
		if (RestrictList.Size() < 1)	return;
		
		
		for (int i = 0; i < RestrictList.Size(); i++)
		{
			D4Restriction res = RestrictList[i];
			if (res) res.Destroy();
		}
		RestrictList.Clear();
	}
	
	//--------------------------------------------------------------------------
	// SetRestrictions
	// 
	// Sets restrictions on what a monster can drop when they die.
	// No flags means it will delete whatever context there is that was 
	// previously established.
	//--------------------------------------------------------------------------
	
	void SetRestrictions(Class<Actor> mo, int flags, bool parent = false)
	{
		if (!mo)	return;
		bool SizeChanged = false;
		for (int i = 0; i < RestrictList.Size(); i++)
		{
			D4Restriction res = RestrictList[i];
			if (!res)
			{
				SizeChanged = true;
				RestrictList.Delete(i);
				i--;
				continue;
			}
			
			if (res.mo == mo)
			{
				if (flags <= 0)
				{
					SizeChanged = true;
					res.Destroy();
					RestrictList.Delete(i);
					continue; // Just to be safe, make sure there's no duplicates.
				}
				res.Restrictions = flags;
				if (SizeChanged)	RestrictList.ShrinkToFit();
				return;
			}
		}
		if (SizeChanged)	RestrictList.ShrinkToFit();
		// Do nothing if the object isn't found and we want to erase it.
		if (flags <= 0)	
			return;
		
		// None found, so make a new one.
		D4Restriction res = new('D4Restriction');
		res.mo = mo;
		res.Restrictions = flags;
		res.parent = parent;
		RestrictList.Push(res);
	}
	
	//--------------------------------------------------------------------------
	// GetRestrictions
	// 
	// Checks for restrictions on monsters and returns the bytes.
	//--------------------------------------------------------------------------
	
	int GetRestrictions(Class<Actor> mo)
	{
		if (!mo || RestrictList.Size() < 1)
			return RF_NONE;
		
		int size = RestrictList.Size();
		for (int i = 0; i < RestrictList.Size(); i++)
		{
			D4Restriction res = RestrictList[i];
			if (!res)	continue;
			
			// Check if the class is directly that, or a child, if the parent 
			// boolean is set in the restriction class.
			if ((mo == res.mo) || (res.parent && CheckParent(mo, res.mo)))
			{
				return res.Restrictions;
			}
		}
		return RF_NONE;
	}
	
	//==========================================================================
	// Misc
	//==========================================================================
	static clearscope bool CheckParent(Class<Object> child, Class<Object> parent)
	{
		if (!child)	return false;
		while (true)
		{
			let check = child.GetParentClass();
			if (child == null || check == null)
				return (parent == null) ? true : false;
			if (check == parent)
				return true;
			child = child.GetParentClass();
		}
		return false;
	}

	static void ConvertBerserkToQuad(D4DBerserk mo)
	{
		if (!mo)	return;
		let quad = D4QuadDamage(Actor.Spawn("D4QuadDamage", mo.pos, ALLOW_REPLACE));
		if (quad)
		{
			quad.ChangeTID(mo.TID);
			quad.A_SetSpecial(mo.Special, mo.args[0], mo.args[1], mo.args[2], mo.args[3], mo.args[4]);
			quad.A_ChangeCountFlags(FLAG_NO_CHANGE, mo.bCOUNTITEM, mo.bCOUNTSECRET);
			quad.ObtainInventory(mo);
			quad.Vel = mo.Vel;
			quad.Angle = mo.Angle;
			quad.Pitch = mo.Pitch;
			quad.SpawnPoint = mo.SpawnPoint;
			quad.ActivationType = mo.ActivationType;
			quad.BlockingMobj = mo.BlockingMobj;
			quad.BlockingLine = mo.BlockingLine;
			quad.FloorZ = mo.FloorZ;
			quad.CeilingZ = mo.CeilingZ;
			quad.DropoffZ = mo.DropoffZ;
			quad.Target = mo.Target;
			quad.Master = mo.Master;
			quad.Tracer = mo.Tracer;
			mo.Destroy();
		}
	}
}

Class D4DHandlerStatic : StaticEventHandler
{
	private D4DeathStorage storage[MAXPLAYERS];
	
	static clearscope D4DHandlerStatic Fetch()
	{
		return D4DHandlerStatic(Find("D4DHandlerStatic"));
	}
	
	override void NewGame()
	{
		Super.NewGame();
		for (int i = 0; i < storage.Size(); i++)
			if (storage[i])	
				storage[i] = null;
	}
	
	private void ClearDeathStorage()
	{
		for (int i = 0; i < storage.Size(); i++)
			if (storage[i])	
				storage[i] = null;
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsSaveGame || e.IsReOpen)
			ClearDeathStorage();
	}
	
	override void WorldTick()
	{
		if (level.maptime > 5 && level.maptime < 35)
		{
			for (int i = 0; i < storage.Size(); i++)
				if (storage[i] && (level.maptime > 15 || storage[i].ReturnItems()))
					storage[i] = null;
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		Actor mo = e.Thing;
		if (!mo || !mo.player)	
			return;
			
		int i = mo.PlayerNumber();
		storage[i] = new('D4DeathStorage');
		storage[i].StoreItems(mo.player);
	}
}

Class D4DeathStorage play
{
	Name MapName;
	private PlayerInfo plr;
	private Array<Class<Inventory> > Items;
	private Array<Int> Amounts;
	
	// Helper functions
	private void AddItem(Inventory Item)
	{
		if (!Item)	return;
		
		Items.Push(Item.GetClass());
		Amounts.Push(Item.Amount);
	}
	
	bool StoreItems(PlayerInfo player)
	{
		if (!player || !player.mo)	return false;
		plr = player;
		
		Clear();
		
		for (let probe = player.mo.Inv; probe; probe = probe.Inv)
		{
			if (probe.InterhubAmount < 1 || 
				probe is "BasicArmor" || 
				probe is "Health" ||
				probe is "Key" || 
				probe is "RewardToken")
				continue;
			
			AddItem(probe);
		}
		return true;
	}
	
	bool ReturnItems()
	{
		if (!plr || !plr.mo)	return false;
		
		Actor mo = plr.mo;
		for (int i = 0; i < Items.Size(); i++)
		{
			mo.SetInventory(Items[i], Max(1, Amounts[i]), true);
			if (Amounts[i] < 1)
				mo.SetInventory(Items[i], 0);
		}
		return true;
	}
	
	private void Clear()
	{
		Items.Clear();
		Amounts.Clear();
	}
}