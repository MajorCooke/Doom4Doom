// All code by Major Cooke. Please give credit if used.

Class D4Msg play
{
	static void PlainMsg( Name fnt, string txt, Vector2 pos, Vector2 vsize = (0,0), int talign = -1, Vector2 balign = (0,0), int color = Font.CR_UNTRANSLATED, Vector3 time = (0,0,0), int wrap = 0, uint id = 0, int layer = BaseStatusBar.HUDMSGLayer_OverHUD )
	{
		notHudMessageHandler.PlainMsg(fnt, txt, pos, vsize, talign, balign, color, time, wrap, id, layer);
	}
	
	static void ClearMsg(uint id)
	{
		notHudMessageHandler.PlainMsg("smallfont", "", (0,0), id: id);
	}
	
	//==========================================================================
	//
	//==========================================================================
	enum EPrintStatus
	{
		NoMods = 1,
		NoOtherMods,
		ModNotReady,
		NotEnoughAmmo,
		NoAmmo = NotEnoughAmmo,
		ChargeTooLow,
		
		CrateSuccess,
		CrateFailure,
		
		NoEquip,
		EquipNotReady,
		MaxPrintStat
	};
	
	static void PrintStatus(int stat)
	{
		if (stat < NoMods || stat >= MaxPrintStat)	return;
		
		String text = "";
		int id = 101;
		int fontcolor = Font.CR_ORANGE;
		Switch(stat)
		{
			Case NoMods:			text = "No mods available";	break;
			Case NoOtherMods:		text = "No other mods available";	break;
			Case ModNotReady:		text = "Mod not ready";	break;
			Case NotEnoughAmmo:		text = "Not enough ammo"; break;
			Case ChargeTooLow:		text = "Charge too low"; break;
			Case NoEquip:			text = "No equipment available"; break;
			Case EquipNotReady:		text = "Equipment not ready";	break;
			
			Case CrateSuccess:	text = "Crate delivered"; 		fontcolor = Font.CR_GREEN;	id = 111;	break;
			case CrateFailure:	text = "Not enough credits";	fontcolor = Font.CR_RED; 	id = 111;	break;
		}
		Vector2 offset = (400, 550);
		if (id == 111)	offset.y = 525;
		D4Msg.PlainMsg("smallfont", text, offset, (800, 600), 0, color: fontcolor, time: (0,0.5,1), id: id);
	}
}

Class D4D_Utility play
{
	//==========================================================================
	// AdjustToLedge
	// 
	// Attempts to fit an actor into a new position. Used by ledge grabbing
	// to make sure the player doesn't get stuck in places they can't fit.
	//==========================================================================
	static bool AdjustToLedge(Actor mo, Vector3 p, double stepadd = 0.0, bool checkonly = false)
	{
		if (!mo || mo.Radius < 1.0)	return false;
		
		// Iterate through the radius of the actor, finding the highest position
		// available.
		
		Vector3 old = mo.pos;
		double GridIncrement = 1.0;
		double Radius = mo.Radius / 2.0;
		double MaxStepHeight = mo.MaxStepHeight + stepadd;
		int GZFlags = GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG;
		
		double newz = p.z;
		double ceil = 32767.0;
		for (double xx = p.x - Radius; xx <= p.x + Radius; xx += GridIncrement)
		{
			for (double yy = p.y - Radius; yy <= p.y + Radius; yy += GridIncrement)
			{
				newz = Max(newz, mo.GetZAt(xx, yy, 0, GZFlags));
				ceil = Min(ceil, mo.GetZAt(xx, yy, 0, GZFlags|GZF_CEILING));
			}
		}
		
		if ((newz - p.z >= MaxStepHeight) ||	// Out of range.
			(ceil - newz < mo.Height) ||		// Won't fit.
			(!mo.CheckPosition(p.XY))) 			// Not a good position.
			return false;
		
		if (!checkonly)
		{
			mo.SetOrigin((p.x, p.y, newz), true);
			mo.floorz = newz;
		}
		return true;
	}
	
	//==========================================================================
	// GetLedgeOffset
	// 
	// Code by DoomKrakken, modified by Major Cooke
	//==========================================================================
	
	static bool GetLedgeOffset(Actor Activator, double MaxHeight = 72, bool move = true)
	{
		if (!Activator)	return false;
	
		static const int FrontOffset[] = {-1, 0, 1, 0};
		static const int SideOffset[] = {0, 1, 0, -1};
		
		PlayerInfo Player = Activator.Player;
		bool PlayerOnGround = Player && Player.Mo && Player.Mo == Activator && Player.OnGround;
		Vector3 OldPos = Activator.Pos;
		
		if (PlayerOnGround)
			MaxHeight *= 0.5;
		
		int i;
		for (i = 0; i <= Activator.Radius; i++)
		{
			for (int j = 0; j <= 3; j++)
			{
				//[DoomKrakken]: This check is only necessary for 3D floors.  Therefore, check if we're dealing with a 3D floor to begin with (we will if the difference is non-zero).
				if (Activator.GetZAt(i * FrontOffset[j], i * SideOffset[j], 0, GZF_NO3DFLOOR|GZF_CEILING) - Activator.GetZAt(i * FrontOffset[j], i * SideOffset[j], 0, GZF_3DRESTRICT|GZF_CEILING)) 
				{
					if (Activator.GetZAt(i * FrontOffset[j], i * SideOffset[j], 0, GZF_3DRESTRICT|GZF_CEILING) - OldPos.Z < Activator.Height + MaxHeight / 2)
					{
						return false;
					}
				}
			}
		}
		Activator.SetXYZ(OldPos + (0, 0, MaxHeight));
		for (i = Activator.Radius; i <= Activator.Radius * 2; i++)
		{
			Vector3 np = Activator.Vec3Angle(i, Activator.Angle, 0);
			int LedgeFloorZ = Activator.GetZAt(i, 0, 0, GZF_3DRESTRICT);
			int LedgeCeilingZ = Activator.GetZAt(i, 0, 0, GZF_3DRESTRICT|GZF_CEILING);
			if (LedgeFloorZ - OldPos.Z > Activator.MaxStepHeight && LedgeFloorZ - OldPos.Z <= MaxHeight && LedgeCeilingZ - LedgeFloorZ >= Activator.Height && Activator.CheckPosition(np.XY))
			{
				if (move)
					return Activator.Warp(Activator, np.x, np.y, 0, 0, 
						WARPF_TOFLOOR|WARPF_NOCHECKPOSITION|WARPF_STOP|WARPF_ABSOLUTEPOSITION|WARPF_INTERPOLATE);
					
				
				Activator.SetXYZ(OldPos);
				return true;//, (i, 0, min(LedgeFloorZ - OldPos.Z, Activator.Height));
			}
		}
		Activator.SetXYZ(OldPos);
		return false;//, (0, 0, 0);
	}
	
	//--------------------------------------------------------------------------
	static bool OldGetLedgeOffset(Actor Activator, double MaxHeight = 72, bool move = true)
	{
		if (!Activator)	return false;
	
		let Player = Activator.Player;
		Bool PlayerOnGround = Player && Player.Mo && Player.Mo == Activator && Player.OnGround;
		Vector3 OldPos = Activator.Pos;
		
		// [DK]: The maximum height to check for mantling. Mantling while not in 
		// the air will result in a shorter check, since the Slayer can 
		// auto-mantle shorter ledges, but must be midair in order to mantle 
		// taller ledges.
		//Int MaxHeight = 72 / (1 + PlayerOnGround); 
		
		//[DK]: Check offsets...
		static const int FrontOffset[] = {-1, 0, 1, 0};
		static const int SideOffset[] = {0, 1, 0, -1};
		
		Int i; //[DK]: Radius Check
		For (i = 0; i <= Activator.Radius; i++) //[DK]: Let's have some elbow room.
		{
			For (Int j = 0; j <= 3; j++)
			{
				If (Activator.GetZAt(i * FrontOffset[j], i * SideOffset[j], 0, GZF_3DRESTRICT|GZF_CEILING) - OldPos.Z < Activator.Height + MaxHeight / 2) //[DK]: Check to see if any point in front of, behind, or to either side of the player has too low of a ceiling or is in the level.
				{
					//Return (0, 0, 0);
					return false;
				}
			}
		}
		
		//[DK]: Use SetXYZ to change the actor's position for testing purposes, 
		// without actually moving him.  This way he can detect 3D floors using 
		// GetZAt (since it can only be used to detect 3D floors beneath the player).
		Activator.SetXYZ(OldPos + (0, 0, MaxHeight)); 
		int flg = GZF_3DRESTRICT|GZF_ABSOLUTEPOS;
		for (i = Activator.Radius; i <= Activator.Radius * 2; i++) //[DK]: If attempting to mantle at an angle to the ledge, the check may fall short and yield a negative result.  This'll make sure that it won't happen.
		{
			Vector3 np = Activator.Vec3Angle(i, Activator.Angle, 0);
			
			Int LedgeFloorZ = Activator.GetZAt(np.x, np.y, 0, flg);
			Int LedgeCeilingZ = Activator.GetZAt(np.x, np.y, 0, flg|GZF_CEILING);
			
			
			If (LedgeFloorZ - OldPos.Z > Activator.MaxStepHeight && 
				LedgeFloorZ - OldPos.Z <= MaxHeight && 
				LedgeCeilingZ - LedgeFloorZ >= Activator.Height && 
				Activator.CheckPosition(np.XY))
			{
				//Console.PrintF("%f", LedgeFloorZ - OldPos.Z);
				Activator.SetXYZ(OldPos);
				if (move)	
					return Activator.Warp(Activator, np.x, np.y, 0, 0, 
						WARPF_TOFLOOR|WARPF_NOCHECKPOSITION|WARPF_STOP|WARPF_ABSOLUTEPOSITION);
				
				//return (i, 0, min(LedgeFloorZ - OldPos.Z, Activator.Height));
				return true;
			}
		}
		Activator.SetXYZ(OldPos);
		return false;
	}
	
	//==========================================================================
	// CheckTouching
	// 
	// Checks if the overlapping radius and height of two are touching each other.
	// Based on cubes.
	//==========================================================================
	static bool CheckTouching(Actor caller, Actor other)
	{
		if (!caller || !other)	return false;
		
		double blockdist = caller.radius + other.radius;
		if (abs(caller.pos.x - other.pos.x) > blockdist ||
			abs(caller.pos.y - other.pos.y) > blockdist)
			return false; // Not touching horizontally.
			
		if ((caller.pos.z > other.pos.z + other.height) ||
			(caller.pos.z + caller.height < other.pos.z))
			return false; // Not touching vertically.
		
		return true;
	}
}

//------------------------------------------------------------------------------

Class D4D_LineChecker : LineTracer
{
	override ETraceStatus TraceCallback() 
	{
		switch (Results.HitType) 
		{
			case TRACE_HitActor:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Skip;
			case TRACE_HitWall:
				return TRACE_Stop;
		}
		return TRACE_Skip;
	}
}

/*==============================================================================
================================================================================
 D4Array Class
 Designed by Major Cooke

 The goal behind this is an adjustable actor array with functions for
 maintaining and cleaning more easily. Note, this is meant for a more permanent
 solution that is maintained over time, not so much for brief instantiation
 within a function or similar unless it's a pointer fetched from another.
 
 To use: 
 
 1. Declare a variable of type D4Array and call the create function. Pass in an
 optional size and/or class type to restrict the actors its tracking.
 e.g. D4Array arr = D4Array.Create(-1, 'Zombieman');
 
 2. Add maintenance functions in whatever is using it if needed, i.e. a timer.
 The Delete() function simply schedules a position for deletion by marking
 the actor's spot as null. Once the timer hits the interval, do any maintenance
 and call the D4Array's Clean() function sometime during it.
  
 3. You can then safely use Push() and Delete() as desired.
================================================================================
==============================================================================*/

Class D4Array
{
	Class<Actor> ClassType;	
	Array<Actor> Actors;
	
	//--------------------------------------------------------------------------
	// Initialization function.
	//--------------------------------------------------------------------------
	static D4Array Create(int size = -1, Name type = '')
	{
		D4Array arr = new('D4Array');
		if (type != '')
		{
			Class<Actor> test = type;
			if (!test)
				Console.Printf("D4Array warning: Ignoring invalid filter %s", type);
		}
		arr.Init(size, type);
		return arr;
	}
	
	void Init(int size, Class<Actor> type)
	{
		ClassType = type;
		Actors.Clear();
		
		if (size > 0)
			SetSize(size);
	}
	
	//--------------------------------------------------------------------------
	// Information.
	//--------------------------------------------------------------------------
	
	int Size() const	{	return Actors.Size();	}
	
	int CheckClassType(Actor mo, bool strict = false) const
	{
		if (!ClassType)	return 2;
		if (!mo)		return 0;
		Class<Actor> type = mo.GetClass();
		return ((strict && type == ClassType) || type is ClassType);
	}
	
	// Find an actor's position in the array.
	// GZDoom cannot convert uint to int on return so it must be assigned first.
	// Also, If nulls are not desired, return the size of the array.
	int Find(Actor mo, bool nulls = true) const
	{
		if (!nulls && (!mo || !CheckClassType(mo)))
			return Actors.Size();
			
		
		int pos = Actors.Find(mo);
		return pos;
	}
	
	// Actor version, returns an actor instead of a position.
	Actor FindActor(Actor mo) const
	{
		if (!mo || !CheckClassType(mo))	return null;
		
		int size = Actors.Size();
		if (size < 1)	return null;
			
		int pos = Actors.Find(mo);
		Actor ret = null;
		
		if (pos < size)	
			ret = Actors[pos];
		return ret;
	}
	
	//--------------------------------------------------------------------------
	// Manipulation functions.
	//--------------------------------------------------------------------------
	
	// Make sure it exists and isn't restricted from insertion.
	// If strict, only allow the specified actor class in.
	// Else, allow inheritance.
	// Returns true regardless of duplicate or not, even if it's already in.
	bool Push(Actor mo, bool strict = false, bool duplicates = true)
	{
		if (mo && CheckClassType(mo))
		{	
			if (duplicates || Actors.Find(mo) >= Actors.Size())
				Actors.Push(mo);
			return true;
		}
		return false;
	}
	
	// Removes the actor and 'schedules' shrinking via a null.
	bool Delete(Actor mo, bool all = false)
	{
		if (!mo || !CheckClassType(mo))	
			return false;
		
		bool found = false;
		int size = Actors.Size();
		if (size > 0)
		{
			// Eliminate all duplicates.
			if (all)
			{
				for (int i = 0; i < size; i++)
				{
					if (mo == Actors[i])
					{	
						found = true;
						Actors[i] = null;
					}
				}
			}
			// Just find one.
			else	
			{
				int pos = Actors.Find(mo);
				if (pos < size)
				{
					Actors[pos] = null;
					return true;
				}
			}
		}
		return found;
	}
	
	// Cleans up an array by copying all non-nulls to a temp array and overriding
	// the original. This is the most efficient way in ZScript so far, as it
	// beats calling DynArray's Delete function over and over in performance.
	void Clean()
	{
		
		int size = Actors.Size();
		// Array empty.
		if (size < 1)	return;
		
		Array<Actor> temp; temp.Clear(); temp.Resize(Actors.Size());
		int j = 0;
		for (int i = 0; i < size; i++)
		{
			if (Actors[i])
			{
				temp[j] = Actors[i];
				j++;
			}
		}	
		temp.Resize(j);
		Actors.Move(temp);
	}
	
	// Removes all actors from the array.
	void Clear() { Actors.Clear(); }
	
	//--------------------------------------------------------------------------
	// Internal functions only.
	//--------------------------------------------------------------------------
	
	private int SetSize(int size)
	{
		int old = Actors.Size();
		if (old == size)
			return 0;
		
		if (size < 1)
		{
			Actors.Clear();
			return -old;
		}
		
		Actors.Resize(size);
		if (old < size)
			for (int i = old; i < size; i++)
				Actors[i] = null;
		
		return old - size;
	}
}