


//==============================================================================
/*	Legend:
		(R) = Property is required.
	------------------------------------------------------------
	Property template is:
	<Property Name> <Variable Acceptance Type [= Default Value]>
	------------------------------------------------------------
	D4DBeamSpawnerBase's properties are the following:
	-------------------------------------------
	StartPuff <Actor = "">
		Beam start position to be spawned by hitscan. If left blank, will use
		the spawner's position instead.
		
(R) EndPuff <Actor = "D4DBeamSpawnerBasePuff">
		The impact puff where the beam attempts to stop at. Does not necessarily
		mean contact is always made.
		
(R)	Beam <Actor = "D4DBeamSpawnerBase">
		The lightning beam spawner which does the movement and actual effect
		spawning. 
	
	RandomAim <bool = false>
		If true, chooses a new impact location between steps. Otherwise,
		only chooses one at the start.
	
	(Angle/Pitch)Random <double>
		The random amount of angle/pitch to add per step outside of 'choking'
		(see ChokeMin/Max for details).
		
	AngleStart1Min
	AngleStart1Max
	AngleStart2Min
	AngleStart2Max
	PitchStart1Min
	PitchStart1Max
	PitchStart2Min
	PitchStart2Max
	(Angle/Pitch)Start(1/2)(Min/Max) <double>
		The base pitch/angle to add upon its own when Beam spawns Start(1) or 
		End(2) puff(s) respectively.
		
	Choke <int min>, <int max>
		# of times the beam can 'wander' before 'choking' itself --
		re-orienting back on track and aiming at the EndPuff.
		
	Steps <int min>, <int max>
		# of times to dedicate to 'sub-beam' spawning.
		Sub-beams do not scale out and vanish after Delay(Min/Max) tics pass.
		
	Delays <int min>, <int max>
		# tics sub-beams will stay alive before replacement with the next step.
		
(R)	SpriteName <4 character string> 
		The four characters used to define what sprite to give the beam. 
		This works like the <Sprite> <Frame> <Duration> setup in an actor's
		states, but using only the sprite base itself.
		
		I.e.
		Using a player sprite:
		--> PLAY <-- A 0
		D4DBeamSpawnerBase.SpriteName "PLAY";
		
(R)	Frames <int min>, <int max>
		The random frame range picked to give the beam. 
		Frames are appended by the prefix "Fr_#" where # is a LETTER.
		A-Z is the accepted range for #.
		
		I.e.
		D4DBeamSpawnerBase.Frames Fr_A, Fr_H;
		
	Lengths <double min>, <double max>
		The X scale randomized between min and max for all beams spawned during a step.
		
	Widths <double min>, <double max>
		Y scale equivalent of Lengths. However, width is only randomized when
		starting to spawn a new set of lasers.
	
	MaxDistance <double>
		How far the beam spawner can go before the step ends.
	
	HomingDistance <double>
		When the beam spawner is within this range of the EndPuff, choking is
		constantly enforced to reach the destination.
	
	Failsafe <int = 500>
		Absolute maximum number of movements the beam spawner can make before
		forcefully ending it.
	
	BranchChance <int = 50>
	BranchCMax <int = 1000>
		The basic formula (BranchChance / BranchCMax) for a chance to spawn a branch.
		BranchChance being 0 means it'll never spawn branches.
	
	BranchCount <int>
		The maximum number of branches one single step can spawn.
		
	BranchSize <!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>
		Do not use/modify. This is set to 1.0 in the base since it cannot be done
		otherwise.
		
		Every new generation of branch will automatically reduce this by 25%,
		affecting several properties to ensure branch spawning does not go
		overboard.
		
	ScaleTime(Min/Max) <int in>, <int out>
		Only the final step spawns beams capable of scaling in/out to nothing.
		Sets how many tics all final beams will take to scale in/out and vanish.
	
	SightCheck <bool = false>
		Checks to see if within the player's FOV (somewhat...) if true.
==============================================================================*/

Class D4DMainBeamSpawner : D4DBeamSpawnerBase 
{
	Default
	{
		+NOTIMEFREEZE
		D4DBeamSpawnerBase.Beam "D4DMainBeam";
		D4DBeamSpawnerBase.StartBeam "";
		D4DBeamSpawnerBase.StartPuff "";
		D4DBeamSpawnerBase.EndPuff "BeamSpawnerPuff";
		D4DBeamSpawnerBase.RandomAim false;
		D4DBeamSpawnerBase.PitchStart1Min 0.0;
		D4DBeamSpawnerBase.PitchStart1Max 0.0;
		D4DBeamSpawnerBase.PitchRandom 10.0;
		D4DBeamSpawnerBase.AngleStart1Min 0.0;
		D4DBeamSpawnerBase.AngleStart1Max 0.0;
		D4DBeamSpawnerBase.AngleRandom 10.0;
		D4DBeamSpawnerBase.Choke 1, 3;
		D4DBeamSpawnerBase.Steps 0, 0;
		D4DBeamSpawnerBase.Delays 0, 0;
		D4DBeamSpawnerBase.MaxDistance 4096;
		D4DBeamSpawnerBase.HomingDistance 32;
		D4DBeamSpawnerBase.Failsafe 500;
		//D4DBeamSpawnerBase.BranchChance 0;
		D4DBeamSpawnerBase.SightCheck false;
		D4DBeamSpawnerBase.MoveWithSource false; 
		D4DBeamSpawnerBase.MovePitchAngle false; //Currently broken.
		
	}
}

Class D4DMainBeam : D4DBeamBase
{
	Default
	{
		+NOTIMEFREEZE
		D4DBeamBase.SpriteName "X202";
		D4DBeamBase.Frames Fr_B, Fr_B;
		D4DBeamBase.ScaleTime 0, 24;
		D4DBeamBase.IsStep false;
	}
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Custom classes begin here.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Gauss Cannon
Class GaussTrailSpawner : D4DBeamSpawnerBase
{
	Default
	{
		D4DBeamSpawnerBase.Beam "GaussTrail";
		D4DBeamSpawnerBase.StartBeam "GaussTrail";
		D4DBeamSpawnerBase.StartPuff "";
		D4DBeamSpawnerBase.EndPuff "BeamSpawnerPuff";
		D4DBeamSpawnerBase.PitchStart1Min 0.0;
		D4DBeamSpawnerBase.PitchStart1Max 0.0;
		D4DBeamSpawnerBase.PitchRandom 0.0;
		D4DBeamSpawnerBase.AngleStart1Min 0.0;
		D4DBeamSpawnerBase.AngleStart1Max 0.0;
		D4DBeamSpawnerBase.AngleRandom 0.0;
		D4DBeamSpawnerBase.Choke 0, 0;
		D4DBeamSpawnerBase.Steps 0, 0;
		D4DBeamSpawnerBase.Delays 0, 0;
		D4DBeamSpawnerBase.MaxDistance 4096;
		D4DBeamSpawnerBase.HomingDistance -1;
		D4DBeamSpawnerBase.Failsafe 500;
		//D4DBeamSpawnerBase.BranchChance 0;
		D4DBeamSpawnerBase.SightCheck false;
	}
}

Class GaussTrailBigSpawner : GaussTrailSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "GaussTrailBig";
		D4DBeamSpawnerBase.StartBeam "GaussTrailBig";
	}
}

Class GaussTrail : D4DMainBeam
{
	Default
	{
		D4DBeamBase.SpriteName "X202";
		D4DBeamBase.Frames Fr_B, Fr_B;
		D4DBeamBase.StartFrame Fr_Z;
		D4DBeamBase.EndFrame Fr_Y;
		D4DBeamBase.StepTime 0;
		D4DBeamBase.ScaleTime 0, 17;
		D4DBeamBase.Lengths 1.00, 1.00;
		D4DBeamBase.Widths 0.20, 0.20;
		
	}
}

Class GaussTrailBig : GaussTrail
{
	Default
	{
		D4DBeamBase.ScaleTime 0, 20;
		D4DBeamBase.Widths 0.35, 0.35;
	}
}


//------------------------------------------------------------------------------
// Static Trails

Class StaticTrailSpawner : GaussTrailSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "StaticTrail";
		D4DBeamSpawnerBase.StartBeam "StaticTrail";
		Translation "0:255=#[255, 128, 64]";
	}
}

Class StaticTrailBigSpawner : StaticTrailSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "StaticTrailBig";
		D4DBeamSpawnerBase.StartBeam "StaticTrailBig";
	}
}

Class StaticTrail : GaussTrail
{
	Default
	{
		D4DBeamBase.ScaleTime 0, 12;
		D4DBeamBase.Widths 0.20, 0.20;
	}
}

Class StaticTrailBig : GaussTrailBig
{
	Default
	{
		D4DBeamBase.ScaleTime 0, 15;
		D4DBeamBase.Widths 0.30, 0.30;
		Translation "0:255=#[255, 128, 64]";
	}
}

//------------------------------------------------------------------------------
// Pistol Lance
Class LanceTrailSpawner : GaussTrailSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "LanceTrail";
		D4DBeamSpawnerBase.StartBeam "LanceTrail";
		Translation "0:255=#[255, 32, 32]";
	}
}

Class LanceTrail : GaussTrail
{
	Default
	{
		D4DBeamBase.Frames Fr_B, Fr_B;
		D4DBeamBase.StartFrame Fr_Z;
		D4DBeamBase.EndFrame Fr_Y;
		D4DBeamBase.Widths 0.18, 0.18;
	}
}

//------------------------------------------------------------------------------
// Vortex Trail
Class VortexTrailSpawner : GaussTrailSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "VortexTrail";
		D4DBeamSpawnerBase.StartBeam "VortexTrail";
		//Translation "0:255=#[249, 17, 255]";
		//Translation "0:255=@[97, 6, 100]";
		Translation "0:255=%[0, 0, 0]:[0.97, 0.06, 1.00]";
		// Blend 249, 17, 255, 1.0
	}
}

Class VortexTrail : GaussTrail
{
	Default
	{
		D4DBeamBase.Widths 0.10, 0.10;
		D4DBeamBase.ScaleTime 0, 7;
	}
}

//------------------------------------------------------------------------------
// Lightning Trails
Class LightningBeamPrimarySpawner : D4DMainBeamSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "LightningBeamPrimary";
		D4DBeamSpawnerBase.StartBeam "";
		D4DBeamSpawnerBase.PitchRandom 20.0;
		D4DBeamSpawnerBase.AngleRandom 20.0;
		D4DBeamSpawnerBase.Choke 1, 3;
		D4DBeamSpawnerBase.Steps 0, 0;
		D4DBeamSpawnerBase.Delays 0, 0;
		D4DBeamSpawnerBase.Failsafe 500;
		D4DBeamSpawnerBase.MoveWithSource true;
		//D4DBeamSpawnerBase.MovePitchAngle true; //Broken at the moment. Kind of.
		D4DBeamSpawnerBase.Offsets 6, 32;	// Only used if MovePitchAngle is true.
	}
}

Class LightningBeamPrimary : GaussTrail
{
	Default
	{
		D4DBeamBase.Widths 0.10, 0.10;
		D4DBeamBase.Lengths 0.2, 0.6;
		D4DBeamBase.ScaleTime 0, 1;
		D4DBeamBase.WaitTime 2;
		D4DBeamBase.SpriteName "X206";
		D4DBeamBase.Frames Fr_F, Fr_M;
	}
}

Class LightningBeamSecondarySpawner : LightningBeamPrimarySpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "LightningBeamPrimary";
		Translation "0:255=%[0,0,0]:[1.25,1.0,1.85]";
	}
}

//------------------------------------------------------------------------------
// BFG Tracers

Class BFGBeamSpawner : LightningBeamPrimarySpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "BFGBeam";
		D4DBeamSpawnerBase.MoveWithSource false;
		Translation "0:255=%[0,0,0]:[1.0,2.0,1.0]";
	}
}

Class BFGBeam : LightningBeamPrimary
{
	Default
	{
		D4DBeamBase.Widths 0.10, 0.10;
		D4DBeamBase.Lengths 0.1, 0.3;
		D4DBeamBase.ScaleTime 0, 0;
		D4DBeamBase.WaitTime 2;
		D4DBeamBase.SpriteName "X206";
		D4DBeamBase.Frames Fr_F, Fr_M;
	}
}

//------------------------------------------------------------------------------
// Carrion Beam
Class CarrionBeamSpawner : LightningBeamPrimarySpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "CarrionBeam";
		D4DBeamSpawnerBase.Limits 8.0, 8.0;
		D4DBeamSpawnerBase.PitchRandom 7.0;
		D4DBeamSpawnerBase.AngleRandom 7.0;
		D4DBeamSpawnerBase.AimFlag FAF_MIDDLE;
		D4DBeamSpawnerBase.SightCheck true;
		D4DBeamSpawnerBase.Velocity false;
		D4DBeamSpawnerBase.MoveWithSource false;
		Translation "0:255=%[0,0,0]:[1.0, 0.5, 0.0]";
	}
}

Class CarrionBeamBoomSpawner : CarrionBeamSpawner
{
	Default
	{
		Translation "0:255=%[0,0,0]:[1.0, 0.0, 0.0]";
	}
}

// Carrion merge beam for ammo
Class CarrionMergeSpawner : CarrionBeamSpawner
{
	Default
	{
		D4DBeamSpawnerBase.Beam "CarrionTrail";
		Translation "0:255=%[0,0,0]:[1.0, 0.1, 0.1]";
	}
}

Class CarrionBeam : LightningBeamPrimary
{
	Default
	{
		D4DBeamBase.Widths 0.03, 0.03;
		D4DBeamBase.Lengths 0.05, 0.2;
		D4DBeamBase.ScaleTime 0, 1;
		D4DBeamBase.WaitTime 1;
		D4DBeamBase.SpriteName "X202";
		D4DBeamBase.Frames Fr_B, Fr_B;
		D4DBeamBase.SineScale false;
	}
}

Class CarrionTrail : CarrionBeam
{
	Default
	{
		D4DBeamBase.Widths 0.06, 0.06;
		D4DBeamBase.SineScale true;
		D4DBeamBase.ScaleTime 0, 4;
		D4DBeamBase.WaitTime 1;
	}
}

//------------------------------------------------------------------------------
// Big red lasers

Class BigRedLaserDrillSMMSpawner : GaussTrailSpawner
{
	Default
	{
		-NOTIMEFREEZE
		D4DBeamSpawnerBase.Beam "BigRedLaserDrillSMM";
		D4DBeamSpawnerBase.StartBeam "";
		D4DBeamSpawnerBase.MoveWithSource true;
	//	D4DBeamSpawnerBase.MovePitchAngle true;
	//	D4DBeamSpawnerBase.Offsets 10, 40;
		D4DBeamSpawnerBase.MaxDistance SMMLaserRange;
		Translation "0:255=%[0,0,0]:[1,0,0]";
	}
}

Class BigRedLaserDrillSMM : GaussTrailBig
{
	Default
	{	// 56 tics, equal to the spider mastermind's attack duration.
		-NOTIMEFREEZE
		D4DBeamBase.ScaleTime 8, 8;
		D4DBeamBase.WaitTime 40;
	}
}

Class BigRedLaserDrillSMMPlayerSpawner : BigRedLaserDrillSMMSpawner
{
	Default
	{
		+NOTIMEFREEZE
		D4DBeamSpawnerBase.Beam "BigRedLaserDrillSMMPlayer";
		D4DBeamSpawnerBase.Velocity true;
		D4DBeamSpawnerBase.MoveWithSource false;
	}
}
// Due to problems with the MovePitchAngle issue currently, just fast spawn these.
// Sorry to have disappointed anyone, but... well, unless I can figure out wtf
// I can do with it... :shrug:
Class BigRedLaserDrillSMMPlayer : GaussTrailBig
{
	Default
	{
		+NOTIMEFREEZE
		D4DBeamBase.ScaleTime 0, 0;
		D4DBeamBase.WaitTime 1;
	}
}

Class BigRedLaserDrillChaingunnerSpawner : BigRedLaserDrillSMMSpawner
{
	Default
	{
		-NOTIMEFREEZE
		D4DBeamSpawnerBase.Beam "BigRedLaserDrillChaingunner";
	}
}

Class BigRedLaserDrillChaingunner : BigRedLaserDrillSMM
{
	Default
	{
		-NOTIMEFREEZE
		D4DBeamBase.Widths 0.15, 0.15;
		D4DBeamBase.ScaleTime 4, 8;
		D4DBeamBase.WaitTime 33;
	}
}


//------------------------------------------------------------------------------
// Deprecated stuff
Class BulletTracerFX : D4Nothing {}
Class BulletTrailBeam : D4Nothing {}

//Class BFGBeamGZ : D4Nothing {}
//Class BFGBeamLaser : D4Nothing {}
//Class GaussTrail : D4Nothing {}
//Class GaussTrailBig : D4Nothing {}
//Class StaticTrail : D4Nothing {}
//Class StaticTrailBig : D4Nothing {}
Class LightningTrailBeamV2 : D4Nothing {}
Class LightningTrailBeamV3 : D4Nothing {}
Class LightningTrailBeamV4 : D4Nothing {}
Class LightningBeamV2 : D4Nothing {}
Class LightningBeamV3 : D4Nothing {}
Class LaserBeamJitter : D4Nothing {}
Class WhiteLaserBeamJitter : D4Nothing {}
Class WhiteLaser : D4Nothing {}
Class RedLaser : D4Nothing {}
//Class BigRedLaserDrillSMM : D4Nothing {}
Class BigRedLaserBeamSMM : D4Nothing {}
Class RedLaserSMM : D4Nothing {}
//Class LanceTrail : D4Nothing {}
//Class VortexTrail : D4Nothing {}
Class BigRedLaserDrill : D4Nothing {}
Class BigRedLaserBeamCgunner : D4Nothing {}
Class RedLaserCgunner : D4Nothing {}
Class CarrionMergeBeam : D4Nothing {}
Class CarrionTrailBeam : D4Nothing {}
Class CarrionTrailBeamMoving : D4Nothing {}
Class CarrionTrailBeamMovingBoom : D4Nothing {}
