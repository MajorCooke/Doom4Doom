extend class Doom4Player
{
	PlayerInfo GetRealPlayer()
	{
		let plr = player;
		return (plr && plr.mo && plr.mo == self && 
				!plr.mo.alternative && !plr.mo.FindInventory('PowerMorph',true) &&
				level.mapname != 'TITLEMAP') ? plr : null;
	}
	
	//==========================================================================
	//
	// Morph stuff
	//
	//==========================================================================

	private MCHealthArmorSaver HPArmor;
	private Actor AbsoluteAlternative;
	override bool MorphPlayer(playerinfo activator, Class<PlayerPawn> spawntype, int duration, int style, Class<Actor> enter_flash, Class<Actor> exit_flash)
	{	
		let HPA = MCHealthArmorSaver.Create(self);
		
		bool morph = Super.MorphPlayer(activator, spawntype, duration, style, enter_flash, exit_flash);
		if (morph)	
		{
			AbsoluteAlternative = Alternative;
			HPArmor = HPA;
			let p = alternative.player;
			Shader.SetEnabled(p, "damageshader", false);
		}
		return morph;
	}
	
	override void PlayerThink()
	{
		Super.PlayerThink();
		
		let player = self.player;
		if (HPArmor && player && player.mo == self)
		{
			HPArmor.Restore(self);
			HPArmor = null;
			A_GiveInventory("Invul3s");
			SetupOverlays(false);
		}
	}
	
	override void MorphPlayerThink()
	{
		Super.MorphPlayerThink();
		
		if (!(alternative is "Doom4Player"))
			Shader.SetEnabled(player, "damageshader", false);
	}
	
	//==========================================================================
	//
	// Equipment stuff
	//
	//==========================================================================
	
	bool TryEquipment(Name clsname)
	{
	//	return false;
		if (EquipmentShortcut != null)	return false;
		
		String s = clsname.."Pickup";
		Class<D4DGrenadeItem> cls = s;
		if (!cls)	return false;
		
		for (int i = 0; i < GrenadeSelected.Size(); i++)
		{
			if (cls != GrenadeSelected[i])	continue;
			
			let gren = D4DGrenadeItem(FindInventory(GrenadeSelected[i]));
			if (gren)
			{
				//D4DGrenadeItem EquipmentShortcut
				
			}
		}
		
		return false;
	}
	
	D4DGrenadeItem GetSelectedEquipment() const
	{
		for (int i = 0; i < GrenadeSelected.Size(); i++)
		{
			let inv = D4DGrenadeItem(FindInventory(GrenadeSelected[i]));
			if (inv && inv.Amount > 0 && inv.Selected)
				return inv;
		}
		return null;
	}
	
	
	
	// Sets all equipment as unselected, while the desired item becomes selected.
	// Returns true if the item is available.
	bool SelectEquipment(Class<D4DGrenadeItem> item)
	{
		// No item available.
		if (!item || CountInv(item) < 1)	
			return false;
		
		// Search through and set all items as unselected, except the desired.
		bool ret = false;
		for (let probe = Inv; probe != null; probe = probe.Inv)
		{
			let cls = D4DGrenadeItem(probe);
			if (!cls)	continue;
			
			cls.Selected = (cls.GetClass() == item && cls.Amount > 0);
			ret = (!ret && cls.Selected);
		}
		return ret;
	}
	
	bool CheckEquipmentButton(bool cooldown = false) const
	{
		let plr = GetRealPlayer();
		
		if (!plr)	return false;
		if ((CurInputCmds & BT_USER1) && !(OldInputCmds & BT_USER1))
		{
			return (cooldown) ? CheckEquipmentCharge(true) : true;
		}
		return false;
	}
	
	int CheckEquipmentCharge(bool checkready = false) const
	{
		let gren = GetSelectedEquipment();
		if (!gren)	return -1;
		
		return (checkready) ? gren.Charges : gren.Cooldown;
	}
	
	
	//==========================================================================
	//
	// Cheat fixes
	//
	//==========================================================================
	override void CheatTake (String name, int amount)
	{
		bool takeall;
		Class<Inventory> type;
		let player = self.player;


		if (!player.mo || player.health < 1)
			return;
		
		
		if (takeall || name ~== "armor")
		{
			A_GiveInventory("ArmorStripper",1);
			//CheatTakeType("Armor");
			if (!takeall)
				return;
		}
		Super.CheatTake(name, amount);
	}
	
	override void CheatGive (String name, int amount)
	{
		int i;
		Class<Inventory> type;
		let player = self.player;

		if (player.mo == NULL || player.health <= 0)
			return;
		
		Class<DemonWeaponBase> cls = name;
		if (cls)	return;

		int giveall = ALL_NO;
		
		if (name ~== "all")
			giveall = ALL_YES;
		else if (name ~== "everything")
			giveall = ALL_YESYES;

		if (name ~== "health")
		{
			if (amount > 0)
			{
				health += amount;
				player.health = health;
			}
			else
			{
				player.health = health = GetMaxHealth(true);
			}
		}

		if (giveall || name ~== "backpack")
		{
			// Select the correct type of backpack based on the game
			type = (class<Inventory>)(gameinfo.backpacktype);
			if (type != NULL)
				GiveInventory(type, 1, true);
			
			if (!giveall)
				return;
		}

		if (giveall || name ~== "ammo")
		{
			// Find every unique type of ammo. Give it to the player if
			// he doesn't have it already, and set each to its maximum.
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let ammotype = (class<Ammo>)(AllActorClasses[i]);

				if (ammotype && GetDefaultByType(ammotype).GetParentAmmo() == ammotype)
				{
					let ammoitem = FindInventory(ammotype);
					if (ammoitem == NULL)
					{
						ammoitem = Inventory(Spawn (ammotype));
						ammoitem.AttachToOwner (self);
						ammoitem.Amount = ammoitem.MaxAmount;
					}
					else if (ammoitem.Amount < ammoitem.MaxAmount)
					{
						ammoitem.Amount = ammoitem.MaxAmount;
					}
				}
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "armor")
		{
			if (gameinfo.gametype != GAME_Hexen)
			{
				let armoritem = BasicArmorPickup(Spawn("BasicArmorPickup"));
				armoritem.SaveAmount = 100*deh.BlueAC;
				armoritem.SavePercent = gameinfo.Armor2Percent > 0 ? gameinfo.Armor2Percent * 100 : 50;
				if (!armoritem.CallTryPickup (self))
				{
					armoritem.Destroy();
				}
			}
			else
			{
				for (i = 0; i < 4; ++i)
				{
					let armoritem = Inventory(Spawn("HexenArmor"));
					armoritem.health = i;
					armoritem.Amount = 0;
					if (!armoritem.CallTryPickup (self))
					{
						armoritem.Destroy ();
					}
				}
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "keys")
		{
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				if (AllActorClasses[i] is "Key")
				{
					let keyitem = GetDefaultByType (AllActorClasses[i]);
					if (keyitem.special1 != 0)
					{
						let item = Inventory(Spawn(AllActorClasses[i]));
						if (!item.CallTryPickup (self))
						{
							item.Destroy ();
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall || name ~== "weapons")
		{
			let savedpending = player.PendingWeapon;
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let type = (class<Weapon>)(AllActorClasses[i]);
				if (!type || type == "Weapon" || type is 'DemonWeaponBase')	continue;
				
				// Don't give replaced weapons unless the replacement was done by Dehacked.
				let rep = GetReplacement(type);
				if (rep != type && !(rep is "DehackedPickup"))	continue;
				
				// Give the weapon only if it is set in a weapon slot.
				/*
				if (player.weapons.LocateWeapon(type))
				{
					readonly<Weapon> def = GetDefaultByType (type);
					if (giveall == ALL_YESYES || !def.bCheatNotWeapon)
					{
						GiveInventory(type, 1, true);
					}
				}
				*/
				// Since the KEYCONF slots are taken care of in the super call,
				// do actual slot numbers and priorities here instead.
				readonly<Weapon> def = GetDefaultByType(type);
				if (def.SlotNumber > -1 && def.SlotPriority <= 1.0)
				{
					if (giveall == ALL_YESYES || !def.bCheatNotWeapon)
					{
						GiveInventory(type, 1, true);
					}
				}
			}
			player.PendingWeapon = savedpending;

			if (!giveall)
				return;
		}

		if (giveall || name ~== "artifacts")
		{
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				type = (class<Inventory>)(AllActorClasses[i]);
				if (type!= null)
				{
					let def = GetDefaultByType (type);
					if (def.Icon.isValid() && def.MaxAmount > 1 &&
						!(type is "PuzzleItem") && !(type is "Powerup") && !(type is "Ammo") &&	!(type is "Armor"))
					{
						// Do not give replaced items unless using "give everything"
						if (giveall == ALL_YESYES || GetReplacement(type) == type)
						{
							GiveInventory(type, amount <= 0 ? def.MaxAmount : amount, true);
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall || name ~== "puzzlepieces")
		{
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let type = (class<PuzzleItem>)(AllActorClasses[i]);
				if (type != null)
				{
					let def = GetDefaultByType (type);
					if (def.Icon.isValid())
					{
						// Do not give replaced items unless using "give everything"
						if (giveall == ALL_YESYES || GetReplacement(type) == type)
						{
							GiveInventory(type, amount <= 0 ? def.MaxAmount : amount, true);
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall)
			return;

		type = name;
		if (type == NULL)
		{
			if (PlayerNumber() == consoleplayer)
				A_Log(String.Format("Unknown item \"%s\"\n", name));
		}
		else
		{
			GiveInventory(type, amount, true);
		}
		return;
	}
	
	//==========================================================================
	//
	// Miscellaneous
	//
	//==========================================================================
	
	void SetupOverlays(bool noforce = true)
	{
		A_Overlay(Overlay_DashManager, "Overlay.DashManager", noforce);
		A_Overlay(Overlay_UtilityManager, "Overlay.UtilityManager", noforce);
		A_Overlay(Overlay_LedgeGrab,"Overlay.LedgeGrab", noforce);
		A_Overlay(Overlay_LifeRecorder, "Overlay.LifeRecorder", noforce);
		int flags = PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST;
		A_OverlayFlags(Overlay_DashManager, flags, false);
		A_OverlayFlags(Overlay_UtilityManager, flags, false);
		A_OverlayFlags(Overlay_LedgeGrab, flags, false);
		A_OverlayFlags(Overlay_LifeRecorder, flags, false);
	}
}



Struct ItemsToSave
{
	Array<String> ItemList;
	bool Init(bool chain = false, Actor plr = null)
	{
		static const String SavedItemsStr[] =
		{	
			"D4DCash",
			"AssaultRifleMod1", //1
			"AssaultRifleMod2",
			"ChaingunMod1",
			"ChaingunMod2",
			"GaussCannonMod1",
			"GaussCannonMod2",
			"PlasmaRifleMod1",
			"PlasmaRifleMod2",
			"RocketLauncherMod1",
			"RocketLauncherMod2",
			"ShotgunMod1",
			"ShotgunMod2",
			"SSGUpgrade1",
			"SSGUpgrade2",
			"SSGUpgrade3",
			"SSGUpgrade4",
			"PistolUpgradeAutomatic",
			"PistolUpgradeAltDamage",
			"PistolUpgradeAltCharge",
			"PistolUpgradeDamage",
			"PistolUpgradeLance",
			"BFGUpgrade1",
			"BFGUpgrade2",
			"BFGUpgrade3",
			"BFGUpgrade4", // 25
			"StaticUpgrade1",
			"StaticUpgrade2",
			"StaticUpgrade3",
			"StaticUpgrade4",
			"SovietActive",
			"SovietToken",
			"LGUpgradeAmmo",
			"LGUpgradeRange",
			"LGUpgradeDamage",
			"LGUpgradeAltFire",
			"VortexUpgradeDamage",
			"VortexUpgradeAmmo",
			"VortexUpgradeAltSpeed",
			"VortexUpgradeAltPierce",
			"RepeaterUpgradePiercing",
			"RepeaterUpgradeDamage",
			"RepeaterUpgradeAltDamage",
			"RepeaterUpgradeAltAmmo",
			"D4CarrionCannon",
			"D4CarrionToken",
			"CarrionLevel",
			"CarrionUpgradePickup",
			"CarrionUpgradeAmmo",
			"CarrionUpgradeStun",
			"CarrionUpgradeTime",
			"DollUses",
			"FragGrenadePickup",
			"HoloGrenadePickup",
			"SyphonGrenadePickup",
			"FragGrenadeSelected",
			"MarineHoloSelected",
			"SyphonGrenadeSelected",
			"D4Stamina",
			"ProtectionBonus",
			"ProtectionBonus1Real",
			"ProtectionBonus2",
			"ProtectionBonus3Real",
			"D4ArmorCapRaiser",
			"D4AirUpgrade",
			"D4AirControl",
			"D4HigherJump",
			"D4MultiJump",
			"D4CrateUpgrade",
			"CashPercentBonus",
			"D4MegasphereDamageReducer",
			"D4MegachargeUpgrade1",
			"D4MegachargeUpgrade2",
			"D4DoomDollUpgrade1",
			"D4DoomDollUpgrade2",
			"D4RegenUpgrade1",
			"D4RegenUpgrade2",
			"D4RegenUpgrade3",
			"D4RegenUpgrade4", // 77
			"D4PentagramUpgrade1",
			"D4PentagramUpgrade2",
			"D4PentagramUpgrade3",
			"D4PentagramUpgrade4",
			"D4RuneUpgrade1",
			"D4RuneUpgrade2",
			"D4RuneUpgrade3",
			"D4RuneUpgrade4" // 85
		};
		ItemList.Clear();
		
		if (chain)
		{
			if (!plr) return false;
			int amt;
			for (int i = 1; i < 26; i++)
			{
				Class<Inventory> check = SavedItemsStr[i];
				if (check && plr.CountInv(check))
					amt++;
			}
			return (amt >= 25);
		}
		
		for (int i = 0; i < SavedItemsStr.Size(); i++)
		{
			ItemList.Push (SavedItemsStr[i]);
		}
		return false;
	}
};

Class D4DeathStorage play
{
	private PlayerInfo plr;
	private Array<Class<Inventory> > Items;
	private Array<Int> Amounts;
	
	// Helper functions
	private void AddItem(Inventory Item)
	{
		if (!Item)	return;
		
		Items.Push(Item.GetClass());
		Amounts.Push(Item.Amount);
	}
	
	bool StoreItems(PlayerInfo player)
	{
		if (!player || !player.mo)	return false;
		plr = player;
		
		Clear();
		
		for (let probe = player.mo.Inv; probe; probe = probe.Inv)
		{
			if (probe.InterhubAmount < 1 || 
				probe is "BasicArmor" || 
				probe is "Health")
				continue;
			
			AddItem(probe);
		}
		return true;
	}
	
	bool ReturnItems()
	{
		if (!plr || !plr.mo)	return false;
		
		Actor mo = plr.mo;
		for (int i = 0; i < Items.Size(); i++)
		{
			mo.SetInventory(Items[i], Max(1, Amounts[i]), true);
			if (Amounts[i] < 1)
				mo.SetInventory(Items[i], 0);
		}
		return true;
	}
	
	private void Clear()
	{
		Items.Clear();
		Amounts.Clear();
	}
}