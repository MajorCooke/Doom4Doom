enum D4AmmoConstants
{
	D4Fuel_MaxAmount1 = 5,
	D4Fuel_MaxAmount2 = 8,
	D4Bullets_MaxAmount1 = 250,
	D4Bullets_MaxAmount2 = 350,
	D4Shells_MaxAmount1 = 45,
	D4Shells_MaxAmount2 = 75,
	D4Cells_MaxAmount1 = 200,
	D4Cells_MaxAmount2 = 300,
	D4Rockets_MaxAmount1 = 30,
	D4Rockets_MaxAmount2 = 40,
	D4BFGAmmo_Amount1 = 30,
	D4BFGAmmo_Amount2 = 5,
	D4BFGAmmo_MaxAmount = 90,
	D4Carrion_MaxAmount = 5000,
	
	D4FuelAmmo_Chance = 26,
	D4FuelAmmo_ChanceSmall = 11,
	
	DECrucibleAmmo_Chance = 8,
	DECrucibleAmmo_ChanceSmall = 4
};

//=======================================================================
//=======================================================================
// Special ammo spawners
//=======================================================================
//=======================================================================
mixin class D4CheckAmmoSpawnable
{
	D4DHandler Event;
	
	action bool CheckEvent(int chance, int goodrange)
	{
		if (chance < 1 || goodrange < 1 || goodrange > chance)	return false;
		if (random[rng](1, chance) > goodrange)	return false;
		
		let i = invoker;
		i.Event = D4DHandler.Fetch();
		if (!i.Event)	return false;
		return true;
	}
	
	action void SpawnAmmo(Class<Actor> misl, bool offsets = false)
	{
		if (!misl)	return;
		Actor a; bool b;
		if (offsets)
			[b, a] = A_SpawnItemEx(misl, random(-5,5), random(-5,5), flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL, tid: tid);
		else
			[b, a] = A_SpawnItemEx(misl, flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL, tid: tid);
		if (a && b)
			a.vel = vel;
	}
	
	action bool SpawnCrucibleAmmo(int chance = 256, int goodrange = DECrucibleAmmo_Chance)
	{
		let i = invoker;
		if (!CheckEvent(chance, goodrange) ||
			!i.Event.CheckActorSpawn(D4DHandler.CrucibleAmmo))	return false;
		
		SpawnAmmo('DECrucibleAmmo');
		return true;
	}
	
	action bool SpawnChainsawAmmo(int chance = 256, int goodrange = 11, bool small = false)
	{
		let i = invoker;
		if (!CheckEvent(chance, goodrange) ||
			!i.Event.CheckActorSpawn(D4DHandler.ChainsawAmmo))	return false;
		
		Class<Inventory> cls = (small) ? 'D4FuelSmall' : 'D4Fuel';
		SpawnAmmo(cls, true);
		return true;
	}
	
	action bool SpawnBFGAmmo(int chance = 256, int goodrange = 11)
	{
		let i = invoker;
		if (!CheckEvent(chance, goodrange) ||
			!i.Event.CheckActorSpawn(D4DHandler.BFGAmmo))	return false;

		SpawnAmmo('D4BFGAmmo');
		return true;
	}
}

Class ClipReplacer : CustomInventory //replaces Clip
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		+INVISIBLE
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			if (!SpawnCrucibleAmmo())
				SpawnAmmo("D4BulletsSmall");
			
			SpawnChainsawAmmo(256, 11, true);
		}
		Stop;
	}
}

Class ClipBoxReplacer : CustomInventory //replaces ClipBox
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			if (!SpawnCrucibleAmmo())
				SpawnAmmo("D4Bullets");
			
			SpawnChainsawAmmo(256, 26);
		}
		Stop;
	}
}

Class ShellReplacer : CustomInventory //replaces Shell
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			if (!SpawnCrucibleAmmo())
				SpawnAmmo("D4ShellsSmall");
			
			SpawnChainsawAmmo(256, 11);
		}
		Stop;
	}
}

Class ShellBoxReplacer : CustomInventory //replaces ShellBox
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			if (!SpawnCrucibleAmmo())
				SpawnAmmo("D4Shells");
			
			SpawnChainsawAmmo(256, 26);
		}
		Stop;
	}
}


Class RocketAmmoReplacer : CustomInventory //replaces RocketAmmo
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			if (!SpawnCrucibleAmmo())
				SpawnAmmo("D4RocketsSmall");
			
			SpawnChainsawAmmo(256, 56, true);
		}
		Stop;
	}
}

Class RocketBoxReplacer : CustomInventory //replaces RocketBox
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			if (!SpawnCrucibleAmmo())
				SpawnAmmo("D4Rockets");
			
			SpawnChainsawAmmo(256, 96);
		}
		Stop;
	}
}


Class CellReplacer : CustomInventory //replaces Cell
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	
	States
	{
	Spawn:
		TNT1 A -1 NODELAY 
		{
			if (!SpawnCrucibleAmmo())
				if (!SpawnBFGAmmo(256, 10))
					SpawnAmmo("D4CellsSmall");
			
			SpawnChainsawAmmo(256, 50);
		}
		Stop;
	}
}
Class CellPackReplacer : CustomInventory //replaces CellPack
{
	mixin D4CheckAmmoSpawnable;
	Default
	{
		+INVENTORY.QUIET
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
		+NOTONAUTOMAP
		Inventory.Amount 0;
		Species "Ammo";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NODELAY
		{
			if (!SpawnCrucibleAmmo())
				if (!SpawnBFGAmmo(256, 35))
					SpawnAmmo("D4Cells");
			
			SpawnChainsawAmmo(256, 50);
		}
		Stop;
	}
}
//=============================================================================
//
//=============================================================================
Class D4Fuel : Ammo 
{
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Chainsaw fuel";
		//Inventory.Icon "AMMON0"
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 2;
		Inventory.MaxAmount D4Fuel_MaxAmount1;
		Ammo.BackpackMaxAmount D4Fuel_MaxAmount2;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		AMGS A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4FuelSmall : D4Fuel 
{
	Default
	{
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Inventory.Amount 1;
		Scale 0.8;
	}
}

//=============================================================================
//
//=============================================================================
Class D4Bullets : Ammo //replaces ClipBox
{
	
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Bullets";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 50;
		Inventory.MaxAmount D4Bullets_MaxAmount1;
		Ammo.BackpackMaxAmount D4Bullets_MaxAmount2;
		Ammo.BackpackAmount 16;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	
	States
	{
	Spawn:
		AMBL A -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4BulletsSmall : D4Bullets //replaces clip
{
	
	Default
	{
		Inventory.Amount 16;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Scale 0.65;
	}
	States
	{
	Spawn:
		AMBL B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

//=============================================================================
//
//=============================================================================
Class D4Shells : Ammo //replaces ShellBox
{
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		+NOTELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Shotgun shells";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 20;
		Inventory.MaxAmount D4Shells_MaxAmount1;
		Ammo.BackpackMaxAmount D4Shells_MaxAmount2;
		Ammo.BackpackAmount 6;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	
	States
	{
	Spawn:
		AMSH A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4ShellsSmall : D4Shells //replaces Shell
{
	
	Default
	{
		Inventory.Amount 6;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Scale 1.75;
	}
	States
	{
	Spawn:
		AMSH B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

//==============================================================================
//
//==============================================================================
Class D4Cells : Ammo //replaces CellPack
{
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Plasma cells";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 35;
		Inventory.MaxAmount D4Cells_MaxAmount1;
		Ammo.BackpackMaxAmount D4Cells_MaxAmount2;
		Ammo.BackpackAmount 10;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		AMPL A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4CellsSmall : D4Cells //replaces Cell
{
	Default
	{
		Inventory.Amount 12;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Scale 1.5;
	}
	States
	{
	Spawn:
		AMPL B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

//=============================================================================
//
//=============================================================================
Class D4Rockets : Ammo //replaces RocketBox
{
	Default
	{
		+FLOORCLIP
		-TELESTOMP
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Rockets";
		Inventory.PickupSound "Doom4/Pickups/AmmoBig";
		Inventory.Amount 5;
		Inventory.MaxAmount D4Rockets_MaxAmount1;
		Ammo.BackpackMaxAmount D4Rockets_MaxAmount2;
		Ammo.BackpackAmount 1;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		AMRK A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4RocketsSmall : D4Rockets //replaces RocketAmmo
{
	Default
	{
		Inventory.Amount 3;
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
	}
	States
	{
	Spawn:
		AMRK B -1  NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}
//==============================================================================
//
//==============================================================================
Class D4BFGAmmo : Ammo
{
	enum EParts
	{
		Outer = 0,
		Inner
	};
	D4BFGAmmoPart Part[2];
	D4BFGAmmoEffects FX[4];
	Vector3 OldPos;
	Vector3 RingOffset;
	Default
	{
		Inventory.PickupMessage "BFG cells";
		Inventory.Icon "BFUGA0";
		
		Inventory.Amount D4BFGAmmo_Amount1;
		Inventory.MaxAmount D4BFGAmmo_MaxAmount;
		Ammo.BackpackAmount D4BFGAmmo_Amount1;
		Ammo.BackpackMaxAmount D4BFGAmmo_MaxAmount;
		Inventory.PickupSound "Doom4/Pickups/BFGAmmo";
		DistanceCheck "D4D_MaxDrawDistance";
		Scale 0.80;
		+INVENTORY.IGNORESKILL
	}
	
	override void PostBeginPlay()
	{
		RingOffset = (0,0,20);
		Super.PostBeginPlay();
		OldPos = pos;
	}
	
	void RemoveParts()
	{
		for (int i = 0; i < FX.Size(); i++)
			if (FX[i]) FX[i].Destroy();
		
		for (int i = 0; i < Part.Size(); i++)
			if (Part[i])	Part[i].Destroy();
	}
	
	override bool TryPickup(in out Actor toucher)
	{
		bool ret = Super.TryPickup(toucher);
		if (ret)	RemoveParts();
		return ret;
	}
	
	override void OnDestroy()
	{
		RemoveParts();
		Super.OnDestroy();
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_PlaySound("Doom4/Weapon/BFG/AmmoLoop",7,0.5,true,5);
			Vector3 offs = RingOffset * Scale.X;
			Vector3 SpawnPos = Vec3Offset(offs.x, offs.y, offs.z);
			
			int Size = FX.Size();
			for (int i = 0; i < Size; i++)
			{
				FX[i] = D4BFGAmmoEffects(Spawn("D4BFGAmmoEffects", SpawnPos, ALLOW_REPLACE));
				if (FX[i])
				{
					FX[i].Master = self;
					if (i >= (Size / 2))
						FX[i].ID = 1;
				}
			}
			for (int i = 0; i < Part.Size(); i++)
			{
				Part[i] = D4BFGAmmoPart(Spawn("D4BFGAmmoPart", SpawnPos, ALLOW_REPLACE));
				if (Part[i])	
				{
					Part[i].Frame = Fr_C + i;
					Part[i].Scale = Scale;
				}
			}
		}
		AMBF B 1 Light("BFGAmmoLight")
		{
			if (OldPos != Pos)
			{
				OldPos = Pos;
				for (int i = 0; i < FX.Size(); i++)
				{
					if (!FX[i])		continue;
					FX[i].Warp(self, 0, 0, RingOffset.z * Scale.X, 0, WARPF_NOCHECKPOSITION);
				}
				for (int i = 0; i < Part.Size(); i++)
				{
					if (!Part[i])	continue;
					Part[i].Warp(self, 0, 0, RingOffset.z * Scale.X, 0, WARPF_NOCHECKPOSITION);
				}
			}
		}
		Wait;
	}
}

Class D4BFGAmmoSmall : D4BFGAmmo {}

Class D4BFGAmmoPart : D4DFX
{
	const TurnMin = 5.0;
	const TurnMax = 20.0;
	Vector3 Turn;
	Default
	{
		+RELATIVETOFLOOR
		-INVISIBLE
		+NOTONAUTOMAP
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Angle = random(0,359);
		Turn.X = (frandom[rng](TurnMin, TurnMax) * frandompick(-1.0, 1.0)); 
		Turn.Y = (frandom[rng](TurnMin, TurnMax) * frandompick(-1.0, 1.0)) * 0.4;
		if (abs(Turn.X) < abs(Turn.Y))
		{
			Turn.Z = Turn.X;
			Turn.X = Turn.Y;
			Turn.Y = Turn.Z;
		}
		Turn.Z = (frandom(TurnMin, TurnMax) * 0.1) * frandompick(-1.0, 1.0);
	}
	States
	{
	Precache:
		AMBF CD 0;
	Spawn:
		AMBF C 1;
		---- AA 1
		{
			int flags = 0; //SPF_INTERPOLATE;
			if (Frame == Fr_D)
			{
				A_SetRoll (Roll  + Turn.X, flags);
				A_SetPitch(Pitch + Turn.Y, flags);
			}
			A_SetAngle(Angle + Turn.Z, flags);
		}
		Wait;
	}
}

Class D4BFGAmmoEffects : D4DFX
{
	int ID;
	double Scalar;
	Default
	{
		D4DFX.AutoRoll 2, 10, true;
		D4DFX.RandomRoll true;
		+RELATIVETOFLOOR
		+NOTONAUTOMAP
		+ROLLSPRITE
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.5,2,0.5]";
		Alpha 1;
	}
	override void PostBeginPlay()
	{
		bSPRITEFLIP = random(false, true);
		Super.PostBeginPlay();
		
		Scalar = 0.1675;
		if (ID == 1)	Scalar = 0.8;
		if (Master) 	Scale = Master.Scale * Scalar;
	}
	States
	{
	Spawn:
		X072 L -1 NoDelay Bright
		{
			StateLabel next = null;
			if (ID == 1)	next = "S2";
			return ResolveState(next);
		}
		Stop;
	S2:
		X029 KJIHGFEDCBA 2 Bright;
		Loop;
	}
}

//==============================================================================
//
//==============================================================================

Class D4Carrion : Ammo
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.Amount 1;	//Don't touch this. See "PickupAmount" in D4PinataCarrion below.
		Inventory.MaxAmount D4Carrion_MaxAmount;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount D4Carrion_MaxAmount;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

Class D4CarrionToken : Inventory
{
	Default
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.UNDROPPABLE
		Inventory.MaxAmount 2000;
		Inventory.InterhubAmount 2000;
	}
}

Class Vacuumed : Inventory {}

Class D4PinataCarrion : CustomInventory
{
	enum Pinata
	{
		PickupMax = 5000,			//How much they can carry.
		PickupAmountBase = 10,		//The very minimal amount to always be given for ammo.
		PickupAmountAdd = 5,		//The random amount to give for ammo.
		CarrionLifeTime = 3000,		//How long these linger for.
		SuckDistance = 512,			//How close the player must be to magnetize.
		MergeDistance = SuckDistance*4,		//How close another carrion piece must be to merge.
		MaxMergeTimer = 80,				//Maximum time in tics until merge.
	};
	
	D4DHandler Event;
	int mul;		// Multiplier based on upgrades
	int count;
	int landed;
	int spawned;
	int absorb;
	int timer;
	int mergetime;
	bool DestroyMe;
	UpgradePinataFlier flier;
	Array<Actor> Kids;
	Default
	{
		Scale 0.4;
		Radius 8;
		Height 16;
		Gravity 0.4;
		Inventory.PickupMessage "Carrion";
		Inventory.PickupSound "Doom4/Pickups/AmmoSmall";
		Inventory.Amount 1;
		Inventory.MaxAmount 1000000;
		+BRIGHT
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+NOBLOCKMONST
		+SEEINVISIBLE // Needed to stop A_Face* functions from misbehaving with invis powerups.
		+NOTELESTOMP
		+CANNOTPUSH
		+INVENTORY.TRANSFER
		BounceFactor 0.5;
		DistanceCheck "D4D_MaxDrawDistance";
		Translation "0:255=%[0,0,0]:[1.0,0.1,0.1]";
	}
	
	void RemoveFromHandler()
	{
		if (!Event)	Event = D4DHandler.Fetch();
		if (Event)	Event.RemoveCarrion(self);
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		bool good = Super.TryPickup(toucher);
		if (good)	RemoveFromHandler();
		return good;
	}
	
	override void OnDestroy()
	{
		for (int i = 0; i < Kids.Size(); i++)
		{
			if (!Kids[i])	
				continue;
				
			Kids[i].Destroy();
			Kids[i] = null;			
		}
		Super.OnDestroy();
	}
	
	States
	{
	Pickup:
		TNT1 A 0
		{
			
			if (CountInv("D4CarrionToken") < BuildRequirement - 1)	
			{	// Player is building up carrion.
				A_GiveInventory("D4CarrionToken",invoker.amount);
			}
			else if (!CountInv("D4CarrionCannon"))		
			{	// Player has enough to get the carrion cannon.
				A_PrintBold("The Carrion Cannon is yours.\n\cgReturn the fires of Hell to them.");
				A_SpawnItemEx("CarrionPortalOpener",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET,0,666);
				A_GiveInventory("D4CarrionCannon",1);
			}
			else if (GetCvar("sv_unlimited_pickup") || CountInv("D4Carrion") < PickupMax)
			{
				int amt = (invoker.amount + PickupAmountBase + random(0,PickupAmountAdd)) * (CountInv("CarrionUpgradePickup") ? 2 : 1);
				//A_LogInt(amt);
				A_GiveInventory("D4Carrion",amt);	
				//A_LogInt(CountInv("D4Carrion"));
				
			}
			else	
				return false;
			
			if (invoker.flier)
				invoker.flier.DestroyMe = true;
			return true;
		}
		Stop;
	Spawn:
		PIN2 D 1 NoDelay 
		{
			invoker.Kids.Clear();
			A_SetTics(random(1,6));
			if (!invoker.spawned)
			{
				Actor b; bool a;
				[a, b] = A_SpawnItemEx("D4PinataParticles",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				if (a && b)	invoker.Kids.Push(b);
				invoker.spawned = 1;
			}
			invoker.mergetime = random(2,MaxMergeTimer);
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				let defs = GetDefaultByType('D4Carrion');
				invoker.flier.Spawner = invoker;
				invoker.flier.Item = "D4Carrion";
				invoker.flier.MaxAmt = defs.MaxAmount;
				invoker.flier.Distance = SuckDistance;
			}
		}
	Looping:
		"----" A 2
		{
			let i = invoker;
			if (i.DestroyMe)	{ Destroy(); return; }
			if (i.count >= DelayVacuum)
			{
				// Tracer should automatically be handled by the thinker.
				if (tracer)
				{
					i.count = DelayVacuum;
					PlrCheck.SetFlying(self, true);
					A_FaceTracer(0,0,0,0,FAF_MIDDLE);
					A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
				//	if (Distance3DSquared(tracer) <= 32 ** 2)
					if (D4D_Utility.CheckTouching(self, Tracer))
					{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(i, false); i.Touch(Tracer);	}
				}
				else
				{
					PlrCheck.SetFlying(self, false);
				}
				
				if (i.count > CarrionLifetime)	i.A_FadeOut();
				else 							i.Alpha = 1.0;
			}
			
			// There's some nearby carrion. Lets merge it together. Thanks to the
			// power that be TRANSFER flag, it's fully possible to now combine
			// the efforts and have inventory actors deliver others.
			// So lets stack them up.
			
			if (!tracer)
			{
				i.timer = (i.timer + 1) % i.mergetime;
				
				if (i.timer == 0)
				{
					
					if (!i.Event)	i.Event = D4DHandler.Fetch();
					int size = i.Event.Carrion.Size();
					for (int j = 0; j < size; j++)
					{
						let mo = D4PinataCarrion(i.Event.Carrion.Actors[j]);
						if (!mo || mo == self || mo.DestroyMe || mo.bINVISIBLE)	continue;
						
						if (mo.Owner)
						{
							i.Event.RemoveCarrion(mo);
							continue;
						}
						if (Distance3DSquared(mo) > (MergeDistance * invoker.mergetime/MaxMergeTimer) ** 2)
							continue;
					
						if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
							continue;
						
						mo.Amount += invoker.Amount;
						tracer = mo;
						A_Face(mo,0,0,0,0,FAF_MIDDLE);
						A_SpawnItemEx("CarrionFog",0,0,height * 0.5,0,0,0,0,SXF_NOCHECKPOSITION);
						let Beam = Spawn("NewCarrionBeamMerger", pos);
						if (Beam)
						{
							Beam.Target = self;
							Beam.Master = self;
							Beam.Tracer = mo;
							Beam.Angle = Angle;
							Beam.Pitch = Pitch;
						}
						if (invoker.flier) 	invoker.flier.DestroyMe = true;
						invoker.DestroyMe = true;
						bNOINTERACTION = bINVISIBLE = true;
						A_Stop();
						return;
					}
				}
			}
			invoker.count += 2;
		}
		Loop;
	}
}

Class CarrionFog : Actor
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "Add";
		Alpha 0.99;
		Scale 0.3;
	}
	States
	{
	Spawn:
		DB26 A 0 NoDelay A_PlaySound("Doom4/Monsters/QuakeTport",7,0.2);
		DB26 ABCDEFGHIIJJKKLLMMNNOO 1 Bright;
		DB26 PQQRRSSTTUUVV 1 Bright A_FadeOut(0.035);
		Stop;
	}
}



Class D4CarrionBorder : D4PinataParticles
{
	Default
	{
		Translation "0:255=%[0,0,0]:[1.0,0.1,0.1]";
	}
}
