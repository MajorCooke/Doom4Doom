/*
Class D4BossEye : D4DFX //replaces BossEye
{
	Default
	{
		+NOSECTOR
		+NOBLOCKMAP
		Height 32;
	}
	States
	{
	Spawn:
		TNT1 A 10 A_Look();
		Loop;
	See:
		TNT1 A 181 A_BrainAwake();
		TNT1 A 150 A_BrainSpit();
		Wait;
	}
}
*/
Class D4BossBrain : BossBrain //replaces BossBrain
{
	mixin D4D_ActorFunctions;
	double bat;
	bool seeBase;
	Default
	{
		+DONTTHRUST
		+DONTCORPSE
		+DONTMORPH
		+NOICEDEATH
		Health 3000;
		DamageFactor "Crush", 20.0;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		Actor s = source;
		Actor i = inflictor;
		
		if ((i && i is "ExplosiveBarrel") || (s && s is "ExplosiveBarrel"))
			return Super.DamageMobj(inflictor, source, damage * 20, mod, flags, angle);
			
		if ((flags & DMG_FORCED) || mod == "Crush" || mod == "Telefrag" ||
			(s && (s is "PlayerPawn" || s.player)) ||
			(i && ((i is "PlayerPawn" || i.player) || 
			(i.target && (i.target is "PlayerPawn" || i.target.player)))))
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
			
		return 0;
	}
	
	void KillEverything()
	{
		bool xtreme = true;
		if (target)	
		{
			xtreme = target.bEXTREMEDEATH;
			target.bEXTREMEDEATH = true;
		}
		ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			if (mo == self || mo is "PlayerPawn")
				continue;
			
			if (mo is "BossEye")
			{
				mo.Destroy();
				continue;
			}
			
			if (mo is "SpawnShot")
			{
				let explo =	D4RocketExplosion(mo.Spawn("D4RocketExplosion",mo.pos));
				if (explo)
				{
					explo.A_XScream();
					explo.PlaySound("Doom4/Weapon/RocketLauncher/HRExplo",CHAN_AUTO);
					explo.PlaySound("Doom4/Other/GibExplode",CHAN_AUTO);
				}
				
				mo.Spawn("BloodGibDropper",mo.pos);
				mo.Destroy();
				continue;
			}
			
		//	if (mo.bNODAMAGE)
		//		continue;
			
			
			
			if (mo.bISMONSTER && mo.health > 0)
			{
				mo.bVULNERABLE = true;
				mo.DamageMobj(target, target, mo.health, "Extreme", DMG_FORCED|DMG_THRUSTLESS);
				continue;
			}
		}
		
		if (target)	target.bEXTREMEDEATH = xtreme;
	}
	
	States
	{
	Spawn:
		BBRN A 7 NoDelay
		{
			if (!seeBase)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						Actor plr = players[i].mo;
						if (plr && plr.CheckSight(self, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY|SF_SEEPASTBLOCKEVERYTHING))
						{
							seeBase = true;
							break;
						}
					}
				}
			}
		}
		Loop;
	Pain:
		BBRN B 8
		{
			bNOPAIN = true;
			PlaySound("brain/pain",CHAN_VOICE,1,0,ATTN_NONE);
			A_QuakeEx(3,3,1,70,0,32767,"",QF_SCALEDOWN);
		}
		BBRN B 27
		{
			bNOPAIN = false;
		}
		BBRN B 0 { return ResolveState("Spawn"); }
	
	Death:
		BBRN A 35
		{
			if (!seeBase)
				seeBase = !(A_CheckSight("Null"));
			PlaySound("Doom4/Other/DollExplode",7,1,0,ATTN_NONE);
			A_QuakeEx(5,5,3,35*5,0,32767,"",QF_SCALEUP|QF_SCALEDOWN|QF_MAX|QF_FULLINTENSITY|QF_RELATIVE);
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i] && players[i].mo)
				{	
					let plr = players[i].mo;
					/*
					if (plr)
					{
						bool invul = plr.bINVULNERABLE;
						plr.bINVULNERABLE = false;
						let inv = PowerMorph(plr.FindInventory("PowerMorph",true));
						if (inv)
						{
							inv.EffectTics = 1;
						}						
					}
					plr = players[i].mo;
					*/
					if (plr && plr.health > 0) 
						plr.A_GiveInventory("D4PentagramOfProtection");
				}
			}
			KillEverything();
		}
		BBRN A 105
		{
			if (!seeBase)
				seeBase = !(A_CheckSight("Null"));
			KillEverything();
			if (seeBase)
			{
				let exploder = IOSFaceExploder(Spawn("IOSFaceExploder",pos));
				if (exploder)	
				{
					exploder.target = self;
					exploder.atPos = true;
				}
			}
			else
			{
				A_SpawnItemEx("IOSFaceExploder",-288, angle: -90, flags: SXF_NOCHECKPOSITION|SXF_ABSOLUTEANGLE);
			}
		}
		BBRN A 35
		{
			PlaySound("BossMegaExplosion",5,1,0,ATTN_NONE);
		}
		TNT1 A 245
		{
			KillEverything();
			A_QuakeEx(6,6,3,35*500,0,32767,"",QF_RELATIVE|QF_SCALEDOWN);
			PlaySound("brain/death",6,1,0,ATTN_NONE);
		}
		TNT1 A 1
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i])
				{
					let plr = players[i].mo;
					if (plr)
					{
						bat += (1.0 / (35.0 * 3));
						plr.A_SetBlend("Black",bat,350);
						
						if (bat > 1.0)
						{
							KillEverything();
							Exit_Normal(0);
						}
					}
				}
			}
		}
		Wait;
	}
}

Class IOSFaceExploder : D4DFX
{
	double px1, px2, py1, py2, pz1, pz2;
	int count[2];
	double sine;
	bool atPos;
	Actor nuke;
	
	property ExploPosition1X: px1;
	property ExploPosition1Y: py1;
	property ExploPosition1Z: pz1;
	property ExploPosition2X: px2;
	property ExploPosition2Y: py2;
	property ExploPosition2Z: pz2;
	Default
	{
		IOSFaceExploder.ExploPosition1X 0.0;
		IOSFaceExploder.ExploPosition1Y -300.0;
		IOSFaceExploder.ExploPosition1Z -200.0;
		IOSFaceExploder.ExploPosition2X 50.0;
		IOSFaceExploder.ExploPosition2Y 300.0;
		IOSFaceExploder.ExploPosition2Z 200.0;
		+NOINTERACTION
		+BRIGHT
		Scale 0;
		RenderStyle "Translucent";
		Translation "0:255=%[0,0,0]:[1,0.5,0]";
	}
	
	override void Tick()
	{
		if (IsFrozen())
			return;
			
		if (target && atPos && pos != target.pos)
			SetOrigin(target.pos, false);
			
		count[0]++;
		if (count[0] >= count[1])
		{
			// Spawn explosions.
			count[1] = count[0] + random(1,4);
			
			int rng = random(2,6);
			for (int i = 0; i < rng; i++)
			{
				Vector3 spos = Vec3Angle(atPos ? frandom(0, py2) : frandom(px1, px2),
										(atPos ? frandom(0.0, 359.9) : angle),
										frandom(pz1, pz2));
										
				let explo =	D4DFX(Spawn("D4RocketExplosionNoGL",spos));
				//let explo = Actor(A_SpawnItemEx("D4RocketExplosionNoGL",flags: SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION));
				if (explo)
				{
					explo.angle = angle;
					explo.A_SetRenderStyle(1.0,STYLE_Translucent);
				//	explo.Translation = Translation;
				//	explo.SetOrigin(spos, false);
					if (!atPos)	explo.A_Warp(AAPTR_DEFAULT,0,frandom(py1, py2),flags: WARPF_NOCHECKPOSITION);
					
					double zmin = pos.Z + Min(pz1, pz2);
					double zmax = pos.Z + Max(pz1, pz2);
					Vector3 sep = explo.pos;
					
					// Put the explosion within range of the parameters.
					if (sep.z < explo.floorz || sep.z > explo.ceilingz)			
						sep.z = frandom(Max(explo.floorz + 1.0, zmin), 
										Min(explo.ceilingz - 1.0, zmax) );
					
					explo.SetOrigin(sep, false);
					explo.PlaySound("Doom4/Weapon/RocketLauncher/HRExplo",CHAN_AUTO,0.5);
				}
			}
		}
		
		if (count[0] >= 35 * 5)
		{
			if (sine < 90.0)
			{
				sine += (90.0 / 35.0);
				A_SetScale(sin(sine) * 4);
			}
			
			if (count[0] % 35 == 0)
			{
				Vector3 spos = Vec3Angle(atPos ? frandom(0, py2) : frandom(px1, px2),
										(atPos ? frandom(0.0, 359.9) : angle),
										frandom(pz1, px2));
										
				let snuke = Spawn("D4SmallNuke",spos);
				if (snuke)
				{
					snuke.angle = angle;
					snuke.Translation = Translation;
					if (!atPos)	snuke.Warp(snuke,0,frandom(py1, py2),flags: WARPF_NOCHECKPOSITION);
				}
			}
			
		}
		Super.Tick();
	}
	
	States
	{
	Spawn:
		TNT1 AAAAA 35;
		X119 ABCDEFGHIJKLMNOPQRSTUVWXYZ random(2,3);
		X120 ABCDEFGHIJKLM random(1,2);
		X120 NOPQRSTUVW 1 A_FadeOut(0.1,FTF_CLAMP);
		Wait;
	}
}

Class D4SmallNuke : D4DFX
{
	double size;
	Default
	{
		+BRIGHT
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0;
		Alpha 0.99;
	}
	
	void UpScale()
	{
		if (size < 90)
		{
			size += (90.0 / 17.5);
			A_SetScale(sin(size) * 4);
		}
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (pos.z < floorz)		Warp(self, pos.x, pos.y, floorz + 1, flags: WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION);
		if (pos.z > ceilingz)	Warp(self, pos.x, pos.y, ceilingz - 1, flags: WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION);
	}
	
	States
	{
	Spawn:
		X119 A 1 NoDelay
		{
			PlaySound("Doom4/Other/DollExplode",CHAN_AUTO,1);
			UpScale();
		}
		
		X119 BCDEFGHIJKLMNOPQRSTUVWXYZ 2 UpScale();
		X120 ABCDEFGHIJKLMNO 2 UpScale();
		X120 PQRSTUVW 2 
		{
			A_FadeOut();
			UpScale();
		}
		Wait;
	}
}