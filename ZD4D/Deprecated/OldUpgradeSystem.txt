//==============================================================================
//==============================================================================
//					Doom 4 For Doom Holograph Upgrade System
//						   Developed by Major Cooke
//						Voxels by DBThanatos and AtroNx
//==============================================================================
//==============================================================================

enum OldUpgradeSystem
{
	// IDs for the weapon models to spawn (some are unused)
	ID_Pistol = 		1,
	ID_Shotgun = 		2,
	ID_SuperShotgun =	3,
	ID_AssaultRifle =	4,
	ID_Chaingun =		5,
	ID_RocketLauncher = 6,
	ID_PlasmaRifle =	7,
	ID_BFG =			8,
	ID_GaussCannon =	9,
	ID_Chainsaw =		10,
	ID_StaticRifle =	11,
	ID_Repeater =		12,
	ID_VortexRifle =	13,
	ID_LightningGun =	14,
	ID_Hellshot =		15,
	ID_CarrionCannon = ID_Hellshot,
	
	// IDs for the upgrade models to spawn
	ID_U1Pistol = 			100,
	ID_U2Pistol = 			101,
	ID_U3Pistol = 			102,
	ID_U4Pistol = 			103,
	ID_U1Shotgun = 			200,
	ID_U2Shotgun = 			201,
	ID_U1SuperShotgun =		300,
	ID_U2SuperShotgun =		301,
	ID_U3SuperShotgun =		302,
	ID_U4SuperShotgun =		303,
	ID_U1AssaultRifle =		400,
	ID_U2AssaultRifle =		401,
	ID_U1Chaingun =			500,
	ID_U2Chaingun =			501,
	ID_U3Chaingun =			502,
	ID_U1RocketLauncher = 	600,
	ID_U2RocketLauncher = 	601,
	ID_U1PlasmaRifle =		700,
	ID_U2PlasmaRifle =		701,
	ID_U1BFG =				800,
	ID_U2BFG =				801,
	ID_U1GaussCannon =		900,
	ID_U2GaussCannon =		901,
	ID_U1Chainsaw =			1000,
	ID_U2Chainsaw =			1001,
	ID_U3Chainsaw =			1002,
	ID_U4Chainsaw =			1003,
	ID_U1StaticRifle =		1100,
	ID_U2StaticRifle =		1101,
	ID_U3StaticRifle =		1102,
	ID_U4StaticRifle =		1103,
	ID_U1Repeater =			1200,
	ID_U2Repeater =			1201,
	ID_U3Repeater =			1202,
	ID_U4Repeater =			1203,
	ID_U1VortexRifle =		1300,
	ID_U2VortexRifle =		1301,
	ID_U3VortexRifle =		1302,
	ID_U4VortexRifle =		1303,
	ID_U1LightningGun =		1400,
	ID_U2LightningGun =		1401,
	ID_U3LightningGun =		1402,
	ID_U4LightningGun =		1403,
	ID_U1Hellshot =			1500,
	ID_U2Hellshot =			1501,
	ID_U3Hellshot =			1502,
	ID_U4Hellshot =			1503,
	
	//Other miscellaneous stuff.
	CheckMark =				1,
	Channels = CHAN_NOPAUSE|CHAN_AUTO,
};
Class UpgradeSystem : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
			A_Log("Please rebind your keys. This menu has been replaced.");
			/*
			if (!CountInv("D4UpgradeHand") || (CountInv("UpgradeSystem") && CountInv("EndHoloToken")))
			{	return true;	}	//Still cancelling.
			else if (CountInv("UpgradeSystemActive") && !CountInv("EndHoloToken"))
			{
				A_GiveInventory("EndHoloToken",1);
				ACS_NamedExecuteAlways("D4RestoreWeapon");
			}
			else
			{
				A_ChangeFlag(NODAMAGE,true);
				A_PlaySound("Slowdown",6|CHAN_NOPAUSE);
				A_PlaySound("Doom4/Other/OpenHoloMenu",5|CHAN_NOPAUSE);
				A_TakeInventory("EndHoloToken",32767,0); // Don't let this be a problem.
				A_SpawnItemEx("Holocone",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("HoloVelocityKeeper",0,0,0,vel.x,vel.y,vel.z,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_SETMASTER);
				A_Stop();
				A_GiveInventory("UpgradeSystemActive",1);
				A_GiveInventory("UpgradeTimeFreezer",1);
				if (!CountInv("HintOnceToken"))
				{
					A_GiveInventory("HintOnceToken",1);
					A_GiveInventory("HintOnce",1);
				}
				if (!A_CheckFloor("Null"))
				{	
					A_GiveInventory("UpgradeFlight",1);	
					A_ChangeFlag(NOGRAVITY,true);
				}
				SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
				bNoclip = true; // No teleporting.
				//A_SpawnItemEx("HoloSightChecker",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
			return true;
			*/
		}
		Stop;
	}
}

Class ToggleMenu : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
			A_Log("Please rebind your keys. This menu has been replaced.");
			//ACS_NamedExecute("D4MenuToggle",0,0,0,0);
		}
		Stop;
	}
}

Class WeaponRestorer : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0 
		{
			ACS_NamedExecuteAlways("D4RestoreWeapon");
		}
		Stop;
	}
}

Class TrueHoloEnder : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0
		{
			ACS_NamedExecute("ClearHoloText",0,0,0,0);
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			A_TakeInventory("UpgradeTimeFreezer",32767);
			A_TakeInventory("UpgradeFlight",32767);
			A_TakeInventory("UpgradeSystemActive",32767);
			A_TakeInventory("EndHoloToken",32767);
			A_TakeInventory("MenuSelect",32767);
			A_TakeInventory("MenuBack",32767);
			A_TakeInventory("MenuToken",32767);
			A_ChangeFlag(NOGRAVITY,false);
			bNoclip = false;
			A_Stop();
			A_KillChildren(None,KILS_KILLMISSILES,None,"Holograph");
			A_KillSiblings(None,KILS_KILLMISSILES,None,"Holograph");
			A_ChangeFlag(NODAMAGE,false);
		}
		Stop;
	}
}
Class HoloWeaponCount : Inventory { Inventory.MaxAmount 20 }
Class Holocone : Actor 
{
	const SpawnFlags = SXF_NOCHECKPOSITION|SXF_SETTRACER|SXF_TRANSFERPOINTERS|SXF_ORIGINATOR;
	const ParticleFlags = SPF_FULLBRIGHT|SPF_RELATIVE|SPF_NOTIMEFREEZE;
	const PSize = 12;
	const Distance = 96;
	const Life = 70;
	const Decay1 = 0.02;
	const Decay2 = 0.036;
	const GSize = 0.2;
	double  UAngle;
	double  user_distance;
	int user_height;
	int user_count;
	int user_weapon[20];
	int user_divider;
	int user_divcount;
	int user_first;
	int user_cd;
	int user_last;
	//double  UX;
	//double  UY;
	//double  UZ;
	Projectile;
	+NODAMAGE
	+NOINTERACTION
	+NOTONAUTOMAP
	+NOTIMEFREEZE
	Species "Holograph"
	RenderStyle "None";
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SpawnItemEx("HoloXtraParticle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
			A_SpawnItemEx("HoloCursor",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTRACER);
			user_divider = 0;
			// 1. Get the inventory.
			if (CountInv("D4GaussCannon",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_GaussCannon,ID_GaussCannon);			user_divider++;	}
			if (CountInv("D4PlasmaRifle",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_PlasmaRifle,ID_PlasmaRifle);			user_divider++;	}
			if (CountInv("D4RocketLauncher",AAPTR_MASTER))	{	A_SetUserArray(user_weapon,ID_RocketLauncher,ID_RocketLauncher);	user_divider++;	}
			if (CountInv("D4AssaultRifle",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_AssaultRifle,ID_AssaultRifle);		user_divider++;	}
			if (CountInv("D4Chaingun",AAPTR_MASTER))			{	A_SetUserArray(user_weapon,ID_Chaingun,ID_Chaingun);				user_divider++;	}
			if (CountInv("D4SuperShotgun",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_SuperShotgun,ID_SuperShotgun);		user_divider++;	}
			if (CountInv("D4Shotgun",AAPTR_MASTER))			{	A_SetUserArray(user_weapon,ID_Shotgun,ID_Shotgun);					user_divider++;	}
			if (CountInv("D4Pistol",AAPTR_MASTER))			{	A_SetUserArray(user_weapon,ID_Pistol,ID_Pistol);					user_divider++;	}
			if (CountInv("D4BFG",AAPTR_MASTER))				{	A_SetUserArray(user_weapon,ID_BFG,ID_BFG);							user_divider++;	}
			if (CountInv("D4LightningGun",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_LightningGun,ID_LightningGun);		user_divider++;	}
			if (CountInv("D4StaticRifle",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_StaticRifle,ID_StaticRifle);			user_divider++;	}
			if (CountInv("D4Repeater",AAPTR_MASTER))			{	A_SetUserArray(user_weapon,ID_Repeater,ID_Repeater);				user_divider++;	}
			if (CountInv("D4VortexRifle",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_VortexRifle,ID_VortexRifle);			user_divider++;	}
			if (CountInv("D4CarrionCannon",AAPTR_MASTER))		{	A_SetUserArray(user_weapon,ID_Hellshot,ID_Hellshot);				user_divider++;	}
			
			if (user_divider < 1)	{	user_divider = 1;	} //Prevent division by 0.
			user_count = 0;
			UAngle = angle;
			A_GiveInventory("HoloWeaponCount",user_divider);
		}
	//Spawns the holographic projections based on the player having the weapon.
	Images:
		TNT1 A 0
		{
			
			if (user_weapon[user_count])
			{
				A_SpawnItemEx("HoloSelectable",4,0,32,0,0,0,0,SpawnFlags,0,user_weapon[user_count]);
				A_SetAngle(angle + (360.0 / user_divider));
			}
		
			A_SetUserVar(user_count, user_count+1);
			if (user_count > 19)
			{
				user_count = 0;
				A_SetAngle(UAngle);
				UAngle = 0;
				return ResolveState("Looping");
			}
			return ResolveState(null);
		}
		Loop;
	Looping:
		TNT1 A 1 
		{
			if (!user_first || user_last)
			{
				A_SpawnParticle("FFFFFF",ParticleFlags,1,PSize,1+UAngle    ,Distance,0,user_height+4,0,0,0,0,0,0,1);
				A_SpawnParticle("FFFFFF",ParticleFlags,1,PSize,1+UAngle+90 ,Distance,0,user_height+4,0,0,0,0,0,0,1);
				A_SpawnParticle("FFFFFF",ParticleFlags,1,PSize,1+UAngle+180,Distance,0,user_height+4,0,0,0,0,0,0,1);
				A_SpawnParticle("FFFFFF",ParticleFlags,1,PSize,1+UAngle+270,Distance,0,user_height+4,0,0,0,0,0,0,1);
			}
			A_SpawnParticle(2222BB,ParticleFlags,Life,PSize,UAngle,Distance    ,0,user_height,0,0,0,0,0,0,1,Decay1,GSize);
			A_SpawnParticle(2222BB,ParticleFlags,Life,PSize,UAngle+90,Distance ,0,user_height,0,0,0,0,0,0,1,Decay1,GSize);
			A_SpawnParticle(2222BB,ParticleFlags,Life,PSize,UAngle+180,Distance,0,user_height,0,0,0,0,0,0,1,Decay1,GSize);
			A_SpawnParticle(2222BB,ParticleFlags,Life,PSize,UAngle+270,Distance,0,user_height,0,0,0,0,0,0,1,Decay1,GSize);
			
			A_SetUserVarFloat(UAngle, (UAngle + 2));
			
			if (UAngle >= 90)
			{
				A_SetUserVar(user_height, user_height + 8);
				A_SetUserVarFloat(UAngle, 0);
				A_SetUserVar(user_cd,25);
				if (user_height >= 72)
				{
					if (user_last)
					{	
						A_Warp(AAPTR_MASTER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE|WARPF_MOVEPTR|WARPF_STOP);
						A_GiveInventory("TrueHoloEnder",1,AAPTR_MASTER);
						return ResolveState("Null");	
					}
					return ResolveState("Break");	
				}
				A_Warp(AAPTR_MASTER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE|WARPF_MOVEPTR|WARPF_STOP);
				return ResolveState(null);
			}
			return ResolveState("Looping");
		}
		Loop;
	Break:
		TNT1 A 1
		{
			if (!user_last &&
				(CountInv("EndHoloToken",AAPTR_MASTER) || GetZAt(0,0) > pos.z || GetZAt(0,0,0,GZF_CEILING) < (pos.z + 56)))
			{
				A_GiveInventory("HoloCooldown",8,AAPTR_MASTER); //Prevent breakage.
				A_GiveInventory("EndHoloToken",1,AAPTR_MASTER);
				A_GiveInventory("WeaponRestorer",1,AAPTR_MASTER);
				A_GiveToSiblings("EndHoloEffect",1);
				A_SetUserVar(user_last,1);
				A_SetUserVar(user_cd,0);
			}
			A_SetUserVar(user_first,1);
			A_SetUserVarFloat(UAngle,0);
			A_SetUserVar(user_height,0);
			A_SetUserVar(user_count,user_count + 1);
			
			if (user_cd <= 0)
			{
				return ResolveState("Looping");
			}
			A_SetUserVar(user_cd, user_cd - 1);
			A_Warp(AAPTR_MASTER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE|WARPF_MOVEPTR|WARPF_STOP);
			return ResolveState(null);
		}
		Loop;
	}
}

//==============================================================================
//==============================================================================
//						Holographic Projections
//==============================================================================
/*==============================================================================	
	This section houses the actual actors that you can mouse over and press use
	on. 
	
	RotateTime: Adjust this to make rotations faster or slower. This makes the
	holographs rotate by RotateTime tics per second.
*/

const RotateTime = 10;
Class HoloSelectable : Actor 
{
	const MinScale = 0.25;
	const MaxScale = 0.5;
	const TimePhase = 0.0333;
	const TimeDivider = 15.0;
	const Distance = 80;
	const ZHeight = 32;
	double  user_dist;
	double  UX[3];
	double  UY[3];
	double  UZ[3];
	double  UAngle[3];
	double  UPitch[3];
	double  user_scale;
	int UPitchcheck;
	int user_t;
	int user_menu;
	int user_type;
	int user_looking;
	double  user_rotate;
	int user_dir;
	int USin;
	int user_weap;
	+DONTTHRUST
	+NOGRAVITY
	//+USESPECIAL
	+THRUACTORS
	//+BRIGHT
	+NODAMAGE
	+NONSHOOTABLE
	-SHOOTABLE
	+SOLID
	+NODAMAGE
	-COUNTKILL
	+NEVERTARGET
	+NOTIMEFREEZE
	+DONTFALL
	+BRIGHT
	+NOINTERACTION
	Alpha 1
	Scale 0.5
	Radius 10
	Height 30
	Species "Holograph"
	//RenderStyle "Translucent";
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_t = tid;	//Don't keep the TID for compatibility sake
			Thing_ChangeTID(0,0);
			A_Warp(AAPTR_MASTER,-Distance,0,ZHeight,180,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE);
			A_SetUserVarFloat(user_dist, GetDistance(false, TracerPtr));
			A_SetUserVarFloat(user_scale, Scale.X);
			if (user_t == ID_Pistol)						{	return ResolveState(2);	} // B
			if (user_t == ID_Shotgun)						{	return ResolveState(3);	} // C
			if (user_t == ID_SuperShotgun)					{	return ResolveState(4);	} // D
			if (user_t == ID_AssaultRifle)					{	return ResolveState(5);	} // E
			if (user_t == ID_Chaingun)						{	return ResolveState(6);	} // F
			if (user_t == ID_RocketLauncher)				{	return ResolveState(7);	} // G
			if (user_t == ID_PlasmaRifle)					{	return ResolveState(8);	} // H
			if (user_t == ID_BFG)							{	return ResolveState(9);	} // I
			if (user_t == ID_GaussCannon)					{	return ResolveState(10);	} // J
			if (user_t == ID_StaticRifle)					{	return ResolveState(11);	} // K
			if (user_t == ID_Repeater)						{	return ResolveState(12);	} // L
			if (user_t == ID_VortexRifle)					{	return ResolveState(13);	} // M
			if (user_t == ID_LightningGun)					{	return ResolveState(14);	} // N
			if (user_t == ID_Hellshot)						{	return ResolveState(15);	} // O
			
			// Stage 2
//			if (user_t == ID_Chainsaw)						{	return ResolveState(1);	} // A
			
			return ResolveState("Null");
		}
		// Stage 3
		// Insert letters of pickup sprites accordingly here.
		M668 ABCDEFGHIJKLMNO 0
		{	return ResolveState("Idling");	}
	//==========================================================================
	//==========================================================================
	// Unlit. Continuously runs checks to see if the player's looking at it.
	Idle:
		M668 "#" 0 
		{
			A_SetUserVar(user_looking,0);
			A_SetUserVar(user_menu,0);
			A_PlaySound("Doom4/Menu/Navigate",Channels,1);
		}
	Idling:
		M668 "#" 1
	Idling2:
		M668 "#" 0
		{
			if (user_weap == 0) //Really wish this wouldn't crash by using (!user_rotate)...
			{	
				user_weap = Max(1,CountInv("HoloWeaponCount",TracerPtr));
				user_rotate = (360.0 / user_weap);
			}
			if (user_weap <= 1)
			{
				A_TakeInventory("HoloRotate",32767,0,AAPTR_MASTER);
				A_TakeInventory("HoloRotateLeft",32767,0,AAPTR_MASTER);
				A_TakeInventory("HoloRotateRight",32767,0,AAPTR_MASTER);
			}
			else if (CountInv("HoloRotate",AAPTR_MASTER))		{	return ResolveState("Rotation");	}
			
			//if (IsPointerEqual(TracerPtr,NullPtr))		{	return ResolveState("FadeOut");	}
			if (CountInv("MenuToken",AAPTR_MASTER))		{	return ResolveState("InactiveStart");	}
			if (CountInv("LookingAt"))				{	return ResolveState("Highlight");	}
			return ResolveState("Idling");
		}
		Goto Idling;
	//==========================================================================
	//==========================================================================
	// Rotations
	Rotation:
		M668 "#" 0
		{
			A_TakeInventory("LookingAt",32767);
			
				 if (CountInv("HoloRotateLeft",AAPTR_MASTER) > 0)		{ user_dir = -1; }
			else if (CountInv("HoloRotateRight",AAPTR_MASTER) > 0)	{ user_dir = 1; }
			else 
			{ 
				user_dir = 0;	
				return ResolveState("Idling");	
			}
			UAngleb = angle;
			USin = -90 + (180/RotateTime);
			return ResolveState("RotateLoop");
		}
		
	RotateLoop:
		M668 "#" 1
		{
			A_Warp(AAPTR_MASTER,-Distance,0,ZHeight,
			(user_dir * (user_rotate / RotateTime)),
			WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USECALLERANGLE);
			
			USin += (180/RotateTime);
			if (USin > 90)
			{ 
				A_TakeInventory("HoloRotate",32767,0,AAPTR_MASTER);
				A_TakeInventory("HoloRotateLeft",32767,0,AAPTR_MASTER);
				A_TakeInventory("HoloRotateRight",32767,0,AAPTR_MASTER);
				return ResolveState("Idling2");
			}
			return ResolveState(null);
		}
		Loop;
	//==========================================================================
	//==========================================================================
	// Looking at the holograph, ready for pressing use on.
	Highlight:
		M669 "#" 0 
		{
			ACS_NamedExecuteAlways("ShowName",0,user_t,0,0);
			A_SetUserVar(user_looking,1);
			A_PlaySound("Doom4/Menu/Hover",Channels,1);
		}
	HighLoop:
		M669 "#" 1
		{
			if (CountInv("MenuSelect",AAPTR_MASTER))
			{
				A_PlaySound("Doom4/Menu/Select",Channels,1);
				A_SetUserVar(user_menu,1);	//Indicates its been selected.
				A_TakeInventory("MenuSelect",32767,0,AAPTR_MASTER);
				A_GiveInventory("MenuToken",1,AAPTR_MASTER);
				return ResolveState("Blink");
			}
			return ResolveState(null);
		}
		M669 "#" 0
		{
			if (user_rotate == 0) 
			{	A_SetUserVarFloat(user_rotate, Max(1,CountInv("HoloWeaponCount",TracerPtr)));	}
			if (CountInv("HoloRotate",AAPTR_MASTER))	{	return ResolveState("Rotation");	}
		
			// Misc checks to make sure the holograph is still going on, 
			// including sight checks to highlight.
			
			if (IsPointerEqual(TracerPtr,NullPtr))	
			{	return ResolveState("FadeOut");	}
			if (CountInv("LookingAt"))
			{	return ResolveState(null);	}
			
			return ResolveState("Idle");
		}
		Loop;
		
	//==========================================================================
	//==========================================================================
	// Selected. Change the graphic after resizing
	Blink:
		M668 "#" 6
	BlinkToNew:
		M669 "##########" 1 A_SetScale(Scale.X-(Scale.Y/10.0),Scale.Y,AAPTR_DEFAULT,true)
		WPPK "##########" 1 A_SetScale(Scale.X+(Scale.Y/10.0),Scale.Y,AAPTR_DEFAULT,true)
		
	// Here's how this works. WeaponUpgrade1-4 (or more if needed) will each have
	// their own list of upgrades to give within them, so one does not need to make
	// new actors for each one as they are just the givers. This is based on TID.
	// I could probably make it modular enough to only need one actor though...
	
	/*
	ID_U1Pistol = 			100,
	ID_U2Pistol = 			101,
	ID_U3Pistol = 			102,
	ID_U4Pistol = 			103,
	ID_U1Shotgun = 			200,
	ID_U2Shotgun = 			201,
	ID_U1SuperShotgun =		300,
	ID_U2SuperShotgun =		301,
	ID_U3SuperShotgun =		302,
	ID_U4SuperShotgun =		303,
	ID_U1AssaultRifle =		400,
	ID_U2AssaultRifle =		401,
	ID_U1Chaingun =			500,
	ID_U2Chaingun =			501,
	ID_U3Chaingun =			502,
	ID_U1RocketLauncher = 	600,
	ID_U2RocketLauncher = 	601,
	ID_U1PlasmaRifle =		700,
	ID_U2PlasmaRifle =		701,
	ID_U1BFG =				800,
	ID_U2BFG =				801,
	ID_U1GaussCannon =		900,
	ID_U2GaussCannon =		901,
	ID_U1Chainsaw =			1000,
	ID_U2Chainsaw =			1001,
	ID_U3Chainsaw =			1002,
	ID_U4Chainsaw =			1003,
	ID_U1StaticRifle =		1100,
	ID_U2StaticRifle =		1101,
	ID_U3StaticRifle =		1102,
	ID_U4StaticRifle =		1103,
	ID_U1Repeater =			1200,
	ID_U2Repeater =			1201,
	ID_U3Repeater =			1202,
	ID_U4Repeater =			1203,
	ID_U1VortexRifle =		1300,
	ID_U2VortexRifle =		1301,
	ID_U3VortexRifle =		1302,
	ID_U4VortexRifle =		1303,
	ID_U1LightningGun =		1400,
	ID_U2LightningGun =		1401,
	ID_U3LightningGun =		1402,
	ID_U4LightningGun =		1403,
	ID_U1Hellshot =			1500,
	ID_U2Hellshot =			1501,
	ID_U3Hellshot =			1502,
	ID_U4Hellshot =			1503,
	ID_Pistol = 		1,
	ID_Shotgun = 		2,
	ID_SuperShotgun =	3,
	ID_AssaultRifle =	4,
	ID_Chaingun =		5,
	ID_RocketLauncher = 6,
	ID_PlasmaRifle =	7,
	ID_BFG =			8,
	ID_GaussCannon =	9,
	ID_Chainsaw =		10,
	ID_StaticRifle =	11,
	ID_Repeater =		12,
	ID_VortexRifle =	13,
	ID_LightningGun =	14,
	ID_Hellshot =		15,	*/
	
	// ID_U#<WeaponName>... Got it? That's how it rolls.
	SpawnUpgradeSelection:
		WPPK "#" 0
		{
			if (user_t == ID_Pistol)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1Pistol);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2Pistol);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3Pistol);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U4Pistol);
			}
			else if (user_t == ID_Shotgun)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1Shotgun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2Shotgun);
			}
			else if (user_t == ID_SuperShotgun)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1SuperShotgun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2SuperShotgun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3SuperShotgun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U4SuperShotgun);
			}
			else if (user_t == ID_AssaultRifle)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1AssaultRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2AssaultRifle);
			}
			else if (user_t == ID_Chaingun)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1Chaingun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2Chaingun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3Chaingun);
			}
			else if (user_t == ID_RocketLauncher)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1RocketLauncher);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2RocketLauncher);
			}
			else if (user_t == ID_PlasmaRifle)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1PlasmaRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2PlasmaRifle);
			}
			else if (user_t == ID_BFG)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1BFG);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2BFG);
			}
			else if (user_t == ID_GaussCannon)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1GaussCannon);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2GaussCannon);
			}
			else if (user_t == ID_StaticRifle)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1StaticRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2StaticRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3StaticRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U4StaticRifle);
			}
			else if (user_t == ID_LightningGun)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1LightningGun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2LightningGun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3LightningGun);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U4LightningGun);
			}
			else if (user_t == ID_VortexRifle)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1VortexRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2VortexRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3VortexRifle);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U4VortexRifle);
			}
			else if (user_t == ID_Repeater)
			{
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U1Repeater);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U2Repeater);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U3Repeater);
				A_SpawnItemEx("WeaponUpgradeHolo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_SETTARGET,0,ID_U4Repeater);
			}
		}
	SelectedWait:
		WPPK "#" 1
		{
			if (CountInv("MenuToken",AAPTR_MASTER) == 2)
			{	
				if (Scale.X > MinScale) { A_SetScale(Scale.X-0.05); }
			}
			else if (CountInv("MenuToken",AAPTR_MASTER) == 1)
			{	
				if (Scale.X < MaxScale) { A_SetScale(Scale.X+0.05); }
			}
			else
			{
				A_SetScale(MaxScale);
				return ResolveState("BlinkToOld");
			}			
			return ResolveState(null);
		}
		Loop;
	BlinkToOld:
		WPPK "##########" 1 A_SetScale(Scale.X-(Scale.Y/10.0),Scale.Y,AAPTR_DEFAULT,true)
		M668 "##########" 1 A_SetScale(Scale.X+(Scale.Y/10.0),Scale.Y,AAPTR_DEFAULT,true)
		Goto Idle;
		
	//==========================================================================
	//==========================================================================
	// This hides the non-selected weapons.
	InactiveStart:
		M668 "#" 0 
		{
			A_Warp(AAPTR_MASTER,0,0,ZHeight,0,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE);
			A_SetUserArrayFloat(UX, 0, x);
			A_SetUserArrayFloat(UY, 0, y);
			A_SetUserArrayFloat(UZ, 0, z);
			A_Warp(AAPTR_MASTER,-Distance,0,ZHeight,0,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE);
			A_SetUserArrayFloat(UX, 1, x);
			A_SetUserArrayFloat(UY, 1, y);
			A_SetUserArrayFloat(UZ, 1, z);
			A_ChangeVelocity(-((UXb-UXa)/TimeDivider),-((UYb-UYa)/TimeDivider),0,CVF_REPLACE);
		}
	InactiveLoop:
		M668 "#" 1
		{
			if (Scale.X <= 0.03)
			{
				A_Stop();
				return ResolveState("Inact");
			}
			A_SetScale(Scale.X-0.0333333);
			return ResolveState(null);
		}
		Loop;
	Inact:
		TNT1 "#" 1 //See TEXTURES.AED.
		{
			if (IsPointerEqual(TracerPtr,NullPtr))	{	return ResolveState("Null");	}
			if (!CountInv("MenuToken",AAPTR_MASTER))	
			{	
				A_ChangeVelocity(((UXb-UXa)/TimeDivider),((UYb-UYa)/TimeDivider),0,CVF_REPLACE);
				return ResolveState("Normalize");	
			}
			return ResolveState(null);
		}
		Loop;
	Normalize:
		M668 "#" 1
		{
			if (Scale.X >= 0.5)
			{
				A_Warp(TracerPtr,-Distance+4,0,ZHeight,0,WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE|WARPF_INTERPOLATE|WARPF_STOP);
				A_SetScale(0.5);
				return ResolveState("Idling");
			}
			A_SetScale(Scale.X+0.0333333);
			return ResolveState(null);
		}
		Loop;
	Death:
	FadeOut:
		M668 "#" 0 
		{
			A_NoGravity;
			A_Stop();
			bNOINTERACTION = true;
			A_RemoveTarget(RMVF_EVERYTHING,None,"Holograph");
		}
		M668 "#" 1 A_FadeOut(0.05)
		Wait;
	Dummy: 
		//Shuts up the warnings.
		M669 ABCDEFGHIJKLMNO 0
		M670 ABCDEFGH 0
		M671 ABCDEFGH 0
		M672 ABCDEFGHIJKLMNOPQRZ 0
		M673 ABCDEFGHIJKLMNOPQRZ 0
		M674 ABCDEFGHIJKLMNOPQRZ 0
		Stop;
	}
}

//==============================================================================
//==============================================================================

//==============================================================================
//==============================================================================
// Sub selections for upgrades.

Class WeaponUpgradeHolo : Actor 
{
	const TimePhase = 0.0333;
	const TimeDivider = 15.0;
	const ZSpeed = 4.0;
	const AngleSpeed = 2.0;
	const Channels = CHAN_NOPAUSE|CHAN_AUTO;
	const Distance = 84;
	const ZHeight = 32;
	double  user_dist;
	double  UX[3];
	double  UY[3];
	double  UZ[3];
	double  UAngle[3];
	double  UPitch[3];
	int user_direw; // East (1) or West (-1)
	int user_dirns; // North (1) or South (-1)
	int UPitchcheck;
	int user_t;
	int user_menu;
	int user_type;
	int user_looking;
	int user_cash;
	int UCost;
	int user_require;
	int user_purchased; //Replace with a green checkmark once bought.
	int user_spriteset;
	+DONTTHRUST
	+NOGRAVITY
	//+USESPECIAL
	+THRUACTORS
	//+BRIGHT
	+NODAMAGE
	+NONSHOOTABLE
	-SHOOTABLE
	+SOLID
	+NODAMAGE
	-COUNTKILL
	+NEVERTARGET
	+NOTIMEFREEZE
	+DONTFALL
	+BRIGHT
	+NOINTERACTION
	Alpha 1
	Scale 0.0
	Radius 10
	Height 10
	Species "Holograph"
	//RenderStyle "Translucent";
	States
	{
	Spawn:
		TNT1 A 0
		TNT1 A 0
		{
			user_t = tid;//Don't keep the TID for compatibility sake
			Thing_ChangeTID(0,0);
			user_dist = GetDistance(false, TracerPtr);
			UXa = x;
			UYa = y;
			UZa = z;
		}
			/*
	ID_U1Pistol = 			100,
	ID_U2Pistol = 			101,
	ID_U3Pistol = 			102,
	ID_U4Pistol = 			103,
	ID_U1Shotgun = 			200,
	ID_U2Shotgun = 			201,
	ID_U1SuperShotgun =		300,
	ID_U2SuperShotgun =		301,
	ID_U3SuperShotgun =		302,
	ID_U4SuperShotgun =		303,
	ID_U1AssaultRifle =		400,
	ID_U2AssaultRifle =		401,
	ID_U1Chaingun =			500,
	ID_U2Chaingun =			501,
	ID_U1RocketLauncher = 	600,
	ID_U2RocketLauncher = 	601,
	ID_U1PlasmaRifle =		700,
	ID_U2PlasmaRifle =		701,
	ID_U1BFG =				800,
	ID_U2BFG =				801,
	ID_U1GaussCannon =		900,
	ID_U2GaussCannon =		901,
	
	Shotgun
	ShotgunMod1 TriShotActive (Official name: Burst Shot)
	ShotgunMod2 GrenadeActive (Explosive Shot)

	HAR
	AssaultRifleMod1 TacticalScopeActive (Tactical Scope)
	AssaultRifleMod2 MicroMissilesActive (Micro Missiles)

	Plasma Rifle
	PlasmaRifleMod1 HeatBlastActive (Heat Blast)
	PlasmaRifleMod2 StunBombActive (Stun Bomb)

	Rocket Launcher
	RocketLauncherMod1 DetonateActive (Remote Detonator)
	RocketLauncherMod2 LockOnActive (Lock on)

	Gauss Cannon
	GaussCannonMod1 PrecisionActive (Precision Shot)
	GaussCannonMod2 SiegeActive (Siege Mode)

	Chaingun
	ChaingunMod1 GatlingRotatorActive (Gatling Rotator)
	ChaingunMod2 MobileTurretActive (Mobile Turret)

	Super Shotgun
	SSGUpgrade
	x1 Reloading Speed
	x2 Piercing Shot
	x3 Double Trouble
	x4 Double Double Trouble Trouble
	
	Static Rifle
	StaticUpgrade# (1-4)
	
	Lightning Gun
	LGUpgradeAmmo
	LGUpgradeRange
	*/
	
	/*	
		Upgrade Token Icons
		A: MAR1		Assault Rifle Scope
		B: MAR2		Assault Rifle Micro Missiles
		C: MCG1		Chaingun Gatling Rotator
		D: MCG2		Chaingun Turret
		E: MGC1		Gauss Cannon Precision Shot (aught to be the same as A)
		F: MGC2		Gauss Cannon Siege Mode
		G: MPR1		Plasma Rifle Heat Wave
		H: MPR2		Plasma Rifle Stun Bomb
		I: MRL1		Rocket Launcher Detonate
		J: MRL2		Rocket Launcher Lock On
		K: MSG1		Shotgun Triple Shot
		L: MSG2		Shotgun Grenade
		M: SSG Reload Speed 	& Static Upgrade 4
		N: SSG Pierce 			& Static Upgrade 3
		O: SSG DT
		P: SSG DDTT
		Q: BFG Ammo Capacity
		R: BFG Spin Mode
		S: LG Battery
		T: LG Range
		U: Static Upgrade 1
		V: Static Upgrade 2
		W: Pistol Damage
	*/
		
		TNT1 A 0
		{
			if (user_t == ID_U1AssaultRifle)		{	user_direw = 1;		if (CountInv("AssaultRifleMod1",AAPTR_MASTER)) 	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(1);	} // A
			if (user_t == ID_U2AssaultRifle)		{	user_direw = -1;	if (CountInv("AssaultRifleMod2",AAPTR_MASTER)) 	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(2);	} // B
			if (user_t == ID_U1Chaingun)			{	user_direw = 1;		if (CountInv("ChaingunMod1",AAPTR_MASTER)) 		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(3);	} // C
			if (user_t == ID_U2Chaingun)			{	user_direw = -1;	if (CountInv("ChaingunMod2",AAPTR_MASTER)) 		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(4);	} // D
			if (user_t == ID_U1GaussCannon)			{	user_direw = 1;		if (CountInv("GaussCannonMod1",AAPTR_MASTER)) 	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(5);	} // E
			if (user_t == ID_U2GaussCannon)			{	user_direw = -1;	if (CountInv("GaussCannonMod2",AAPTR_MASTER)) 	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(6);	} // F
			if (user_t == ID_U1PlasmaRifle)			{	user_direw = 1;		if (CountInv("PlasmaRifleMod1",AAPTR_MASTER)) 	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(7);	} // G
			if (user_t == ID_U2PlasmaRifle)			{	user_direw = -1;	if (CountInv("PlasmaRifleMod2",AAPTR_MASTER)) 	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(8);	} // H
			if (user_t == ID_U1RocketLauncher)		{	user_direw = 1;		if (CountInv("RocketLauncherMod1",AAPTR_MASTER))	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(9);	} // I
			if (user_t == ID_U2RocketLauncher)		{	user_direw = -1;	if (CountInv("RocketLauncherMod2",AAPTR_MASTER))	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(10);	} // J
			if (user_t == ID_U1Shotgun)				{	user_direw = 1;		if (CountInv("ShotgunMod1",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(11);	} // K
			if (user_t == ID_U2Shotgun)				{	user_direw = -1;	if (CountInv("ShotgunMod2",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(12);	} // L
			if (user_t == ID_U1LightningGun)		{	user_direw = 1;		user_dirns = 1;		if (CountInv("LGUpgradeAmmo",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(19);	} // S
			if (user_t == ID_U2LightningGun)		{	user_direw = -1;	user_dirns = 1;		if (CountInv("LGUpgradeRange",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(20);	} // T			
			if (user_t == ID_U3LightningGun)		{	user_direw = 1;		user_dirns = -1;	if (CountInv("LGUpgradeDamage",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(32);	} // B
			if (user_t == ID_U4LightningGun)		{	user_direw = -1;	user_dirns = -1;	if (CountInv("LGUpgradeAltFire",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(31);	} // A
			if (user_t == ID_U1SuperShotgun)		{	user_direw = 1;		user_dirns = 1;		if (CountInv("SSGUpgrade1",AAPTR_MASTER))					{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(13);	} // M	
			if (user_t == ID_U2SuperShotgun)		{	user_direw = -1;	user_dirns = 1;		if (CountInv("SSGUpgrade2",AAPTR_MASTER))					{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(14);	} // N
			if (user_t == ID_U3SuperShotgun)		{	user_direw = 1;		user_dirns = -1;	if (CountInv("SSGUpgrade3",AAPTR_MASTER))					{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(15);	} // O
			if (user_t == ID_U4SuperShotgun)		{	user_direw = -1;	user_dirns = -1;	if (CountInv("SSGUpgrade4",AAPTR_MASTER))					{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(16);	} // P
			if (user_t == ID_U1StaticRifle)			{	user_direw = 1;		user_dirns = 1;		if (CountInv("StaticUpgrade1",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(21);	} // U	
			if (user_t == ID_U2StaticRifle)			{	user_direw = -1;	user_dirns = 1;		if (CountInv("StaticUpgrade2",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(22);	} // V
			if (user_t == ID_U3StaticRifle)			{	user_direw = 1;		user_dirns = -1;	if (CountInv("StaticUpgrade3",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(14);	} // N
			if (user_t == ID_U4StaticRifle)			{	user_direw = -1;	user_dirns = -1;	if (CountInv("StaticUpgrade4",AAPTR_MASTER))				{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(13);	} // M
			
			if (user_t == ID_U1Pistol)				{	user_direw = 1;		user_dirns = 1;		if (CountInv("PistolUpgradeAltCharge",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(33);	} // C
			if (user_t == ID_U2Pistol)				{	user_direw = -1;	user_dirns = 1;		if (CountInv("PistolUpgradeAltDamage",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(23);	} // W
			if (user_t == ID_U3Pistol)				{	user_direw = 1;		user_dirns = -1;	if (CountInv("PistolUpgradeAutomatic",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(34);	} // D
			if (user_t == ID_U4Pistol)				{	user_direw = -1;	user_dirns = -1;	if (CountInv("PistolUpgradeDamage",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(35);	} // E
			if (user_t == ID_U1VortexRifle)			{	user_direw = 1;		user_dirns = 1;		if (CountInv("VortexUpgradeDamage",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(40);	} // J
			if (user_t == ID_U2VortexRifle)			{	user_direw = -1;	user_dirns = 1;		if (CountInv("VortexUpgradeAmmo",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(19);	} // S
			if (user_t == ID_U3VortexRifle)			{	user_direw = 1;		user_dirns = -1;	if (CountInv("VortexUpgradeAltSpeed",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(41);	} // K
			if (user_t == ID_U4VortexRifle)			{	user_direw = -1;	user_dirns = -1;	if (CountInv("VortexUpgradeAltPierce",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(14);	} // N
			if (user_t == ID_U1Repeater)			{	user_direw = 1;		user_dirns = 1;		if (CountInv("RepeaterUpgradePiercing",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(39);	} // I
			if (user_t == ID_U2Repeater)			{	user_direw = -1;	user_dirns = 1;		if (CountInv("RepeaterUpgradeDamage",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(36);	} // F
			if (user_t == ID_U3Repeater)			{	user_direw = 1;		user_dirns = -1;	if (CountInv("RepeaterUpgradeAltDamage",AAPTR_MASTER))	{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(38);	} // H
			if (user_t == ID_U4Repeater)			{	user_direw = -1;	user_dirns = -1;	if (CountInv("RepeaterUpgradeAltAmmo",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(37);	} // G
			if (user_t == ID_U3Chaingun)			{	user_dirns = 1;		return ResolveState("Checker");	}

			return ResolveState("Null");
		}		
		M672 ABCDEFGHIJKLMNOPQRSTUVWWWWWWWW 0 A_Jump(256,"MoveOut") //30 frames
		M675 ABCDEFGHIJKKKKKKKKKK 0
		{
			user_spriteset = 1; //Indicate we need a new sprite set range to use.
			return ResolveState("MoveOut");
		}
	Bought:
		M671 A 0 A_Jump(256,"MoveOut")
	MoveOut:
		"####" "#" 1
		{
			if (Scale.X < 0.5)
			{	
				A_Warp(TracerPtr,-user_dist+2,0,ZHeight,AngleSpeed * user_direw,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USECALLERANGLE);
				A_SetScale(Scale.X+0.05);
				return ResolveState(null);
			}
			else if (user_dirns != 0)
			{
				A_Stop();
				return ResolveState("MoveDelay");
			}
			else
			{	
				if (user_purchased == 1)
				{	return ResolveState("BoughtIdle");	}
				return ResolveState("Idling");	
			}
		}
		Loop;
	MoveDelay:
		"####" "#" 4 A_ChangeVelocity(0,0,ZSpeed * user_dirns)
		"####" "#" 0 
		{
			A_Stop();
			if (user_purchased == 1)
			{	return ResolveState("BoughtIdle");	}
			return ResolveState("Idling");
		}
		Goto Idling;
	BoughtIdle:
		M671 A 1
		{
			if (CountInv("MenuToken",AAPTR_MASTER) < 1)
			{	return ResolveState("MoveToNothing");	}
			return ResolveState(null);
		}
		Loop;
	//==========================================================================
	//==========================================================================
	// Unlit. Continuously runs checks to see if the player's looking at it.
	Idle:
		M672 "#" 0 
		{
			if (user_spriteset)	{ return ResolveState(1);	}
			return ResolveState("IdleFramed");
		}
		M675 "#" 0		
	IdleFramed:
		"####" "#" 0 
		{
			user_looking = user_menu = 0;
			A_PlaySound("Doom4/Menu/Navigate",Channels,1);
		}
	Idling:
		"####" "#" 1
		"####" "#" 0
		{
			if (IsPointerEqual(TracerPtr,NullPtr))		{	return ResolveState("FadeOut");	}
			if (CountInv("MenuToken",AAPTR_MASTER) > 1)	{	return ResolveState("Inact");		}
			if (!CountInv("MenuToken",AAPTR_MASTER))		{	return ResolveState("MoveToNothing");	}
			if (Scale.X < 0.5)						
			{	
				A_SetScale(Scale.X+0.05);	
				if (Scale.X > 0.5) 				
				{	A_SetScale(0.5); }
			}
			else if (Scale.X != 0.5) 				{	A_SetScale(0.5); }
			
			if (CountInv("LookingAt"))
			{
				return ResolveState("Highlight");
			}
			return ResolveState("Idling");
		}
		Loop;
	//==========================================================================
	//==========================================================================
	// Looking at the holograph, ready for pressing use on.
	Highlight:
		M673 "#" 0 
		{
			if (user_spriteset)	{ return ResolveState(1);	}
			return ResolveState("HighlightFramed");
		}
		M676 "#" 0	
	HighlightFramed:
		"####" "#" 0 
		{
				 if (user_t == ID_U1Pistol)			{ UCost =  GetCvar("Cost_U1Pistol); }
			else if (user_t == ID_U2Pistol)			{ UCost =  GetCvar("Cost_U2Pistol); }
			else if (user_t == ID_U3Pistol)			{ UCost =  GetCvar("Cost_U3Pistol); }
			else if (user_t == ID_U4Pistol)			{ UCost =  GetCvar("Cost_U4Pistol); }
			else if (user_t == ID_U1Shotgun)		{ UCost =  GetCvar("Cost_U1Shotgun); }
			else if (user_t == ID_U2Shotgun)		{ UCost =  GetCvar("Cost_U2Shotgun); }
			else if (user_t == ID_U1SuperShotgun)	{ UCost =  GetCvar("Cost_U1SuperShotgun); }
			else if (user_t == ID_U2SuperShotgun)	{ UCost =  GetCvar("Cost_U2SuperShotgun); }
			else if (user_t == ID_U3SuperShotgun)	{ UCost =  GetCvar("Cost_U3SuperShotgun); user_require = 2; }
			else if (user_t == ID_U4SuperShotgun)	{ UCost =  GetCvar("Cost_U4SuperShotgun); user_require = 1; }
			else if (user_t == ID_U1AssaultRifle)	{ UCost =  GetCvar("Cost_U1AssaultRifle); }
			else if (user_t == ID_U2AssaultRifle)	{ UCost =  GetCvar("Cost_U2AssaultRifle); }
			else if (user_t == ID_U1Chaingun)		{ UCost =  GetCvar("Cost_U1Chaingun); }
			else if (user_t == ID_U2Chaingun)		{ UCost =  GetCvar("Cost_U2Chaingun); }
			else if (user_t == ID_U3Chaingun)		{ UCost =  GetCvar("Cost_U3Chaingun); }
			else if (user_t == ID_U1RocketLauncher)	{ UCost =  GetCvar("Cost_U1RocketLauncher); }
			else if (user_t == ID_U2RocketLauncher)	{ UCost =  GetCvar("Cost_U2RocketLauncher); }
			else if (user_t == ID_U1PlasmaRifle)	{ UCost =  GetCvar("Cost_U1PlasmaRifle); }
			else if (user_t == ID_U2PlasmaRifle)	{ UCost =  GetCvar("Cost_U2PlasmaRifle); }
		//	else if (user_t == ID_U1BFG)			{ UCost =  GetCvar("Cost_U1BFG); }
		//	else if (user_t == ID_U2BFG)			{ UCost =  GetCvar("Cost_U2BFG); }
			else if (user_t == ID_U1GaussCannon)	{ UCost =  GetCvar("Cost_U1GaussCannon); }
			else if (user_t == ID_U2GaussCannon)	{ UCost =  GetCvar("Cost_U2GaussCannon); }
			else if (user_t == ID_U1LightningGun)	{ UCost =  GetCvar("Cost_U1LightningGun); }
			else if (user_t == ID_U2LightningGun)	{ UCost =  GetCvar("Cost_U2LightningGun); }
			else if (user_t == ID_U3LightningGun)	{ UCost =  GetCvar("Cost_U3LightningGun); }
			else if (user_t == ID_U4LightningGun)	{ UCost =  GetCvar("Cost_U4LightningGun); }
			else if (user_t == ID_U1StaticRifle)	{ UCost =  GetCvar("Cost_U1StaticRifle); }
			else if (user_t == ID_U2StaticRifle)	{ UCost =  GetCvar("Cost_U2StaticRifle); user_require = 3; }
			else if (user_t == ID_U3StaticRifle)	{ UCost =  GetCvar("Cost_U3StaticRifle); user_require = 4; }
			else if (user_t == ID_U4StaticRifle)	{ UCost =  GetCvar("Cost_U4StaticRifle); user_require = 5; }
			/*
			else if (user_t == ID_U1Chainsaw)		{ UCost =  GetCvar("Cost_U1Chainsaw); }
			else if (user_t == ID_U2Chainsaw)		{ UCost =  GetCvar("Cost_U2Chainsaw); }
			else if (user_t == ID_U3Chainsaw)		{ UCost =  GetCvar("Cost_U3Chainsaw); }
			else if (user_t == ID_U4Chainsaw)		{ UCost =  GetCvar("Cost_U4Chainsaw); }
			
			else if (user_t == ID_U3Hellshot)		{ UCost =  GetCvar("Cost_U3Hellshot); }
			else if (user_t == ID_U4Hellshot)		{ UCost =  GetCvar("Cost_U4Hellshot); }
			*/
			
			else if (user_t == ID_U1Repeater)		{ UCost =  GetCvar("Cost_U1Repeater); }
			else if (user_t == ID_U2Repeater)		{ UCost =  GetCvar("Cost_U2Repeater); }
			else if (user_t == ID_U3Repeater)		{ UCost =  GetCvar("Cost_U3Repeater); }
			else if (user_t == ID_U4Repeater)		{ UCost =  GetCvar("Cost_U4Repeater); }
			else if (user_t == ID_U1VortexRifle)	{ UCost =  GetCvar("Cost_U1VortexRifle); }
			else if (user_t == ID_U2VortexRifle)	{ UCost =  GetCvar("Cost_U2VortexRifle); }
			else if (user_t == ID_U3VortexRifle)	{ UCost =  GetCvar("Cost_U3VortexRifle); }
			else if (user_t == ID_U4VortexRifle)	{ UCost =  GetCvar("Cost_U4VortexRifle); }
			else if (user_t == ID_U1Hellshot)		{ UCost =  GetCvar("Cost_U1Hellshot); }
			else if (user_t == ID_U2Hellshot)		{ UCost =  GetCvar("Cost_U2Hellshot); }
			
			else { UCost =  0; }
			ACS_NamedExecute("ShowUpgradeName",0,user_t,0,0);
			ACS_NamedExecute("ShowCost",0,UCost,user_dirns,user_direw);
			ACS_NamedExecute("ShowRequirements",0,user_require,user_dirns,user_direw);
			user_cash = CountInv("D4DCash",AAPTR_MASTER);
			user_looking = 1;
			A_PlaySound("Doom4/Menu/Hover",Channels,1);
		}
	HighLoop:
		"####" "#" 1
		{			
			if (CountInv("MenuSelect",AAPTR_MASTER))
			{
				// Check for requirements first.
				// Then, check the above prices.
				
				// Requirement 1: SSG Double Double Trouble Trouble
				// Needs: All three SSG upgrades.
				if ((user_require == 1 && (
					!CountInv("SSGUpgrade1",AAPTR_MASTER) ||
					!CountInv("SSGUpgrade2",AAPTR_MASTER) )) 
					
					||
				
				// Requirement 2: SSG Double Trouble
				// Needs: Reload Speed
					(user_require == 2 && (
					!CountInv("SSGUpgrade1",AAPTR_MASTER)))
					
					||
					
				// Requirement 3: Static Upgrade 2
				// Needs: Static Upgrade 1
					(user_require == 3 && (
					!CountInv("StaticUpgrade1",AAPTR_MASTER)))
					
					||
					
				// Requirement 3: Static Upgrade 3
				// Needs: Static Upgrade 2
					(user_require == 4 && (
					!CountInv("StaticUpgrade2",AAPTR_MASTER)))
					
					||
					
				// Requirement 3: Static Upgrade 4
				// Needs: Static Upgrade 3
					(user_require == 5 && (
					!CountInv("StaticUpgrade3",AAPTR_MASTER)))
					)
				{
					A_TakeInventory("MenuSelect",32767,0,AAPTR_MASTER);
					A_PlaySound("Doom4/Player/Nope",Channels);
				}
				else if (user_cash < UCost)
				{	
					A_TakeInventory("MenuSelect",32767,0,AAPTR_MASTER);
					A_PlaySound("Doom4/Player/Nope",Channels);
				}
				else
				{
					A_TakeInventory("MenuSelect",32767,0,AAPTR_MASTER);
					A_PlaySound("Doom4/Menu/Select",Channels,1);
					user_menu = 1;	//Indicates its been selected.
					return ResolveState("Blink");
				}
			}
			return ResolveState(null);
		}
		"####" "#" 0
		{
			// Misc checks to make sure the holograph is still going on, 
			// including sight checks to highlight.
			if (!CountInv("MenuToken",AAPTR_MASTER))		
			{	ACS_NamedExecuteAlways("ClearHoloText",0,0,0,0); return ResolveState("MoveToNothing");	}
			//if (IsPointerEqual(TracerPtr,NullPtr))	
			//{	return ResolveState("FadeOut");	}
			if (!CountInv("LookingAt"))		
			{	ACS_NamedExecuteAlways("ClearHoloText",0,0,0,0); return ResolveState("Idle");	}
			return ResolveState(null);
		}
		Loop;
	//==========================================================================
	//==========================================================================
	// Clicked. 
	// Ugh, this code bloat from just adding the extra sprites is killing my soul.
	Blink:
		M674 "#" 0 
		{
			if (user_spriteset)	{ return ResolveState(1);	}
			return ResolveState("BlinkFramed");
		}
		M677 "#" 0	
	BlinkFramed:
		"####" "#" 6 ACS_NamedExecuteAlways("ClearHoloText",0,0,0,0)
	Purchase:
		M673 "#" 0 
		{
			if (user_spriteset)	{ return ResolveState(1);	}
			return ResolveState("PurchaseFramed");
		}
		M676 "#" 0	
	PurchaseFramed:
		"####" "#" 0
		{
				 if (user_t == ID_U1AssaultRifle)	{	A_GiveInventory("AssaultRifleMod1",1,AAPTR_MASTER);	}
			else if (user_t == ID_U2AssaultRifle)	{	A_GiveInventory("AssaultRifleMod2",1,AAPTR_MASTER);	}
			else if (user_t == ID_U1Chaingun)		{	A_GiveInventory("ChaingunMod1",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2Chaingun)		{	A_GiveInventory("ChaingunMod2",1,AAPTR_MASTER);		}
			else if (user_t == ID_U3Chaingun)		
			{	
				A_PrintBold("\ckChaingun Special Mode toggles Soviet mode.\nOptions->D4D Mod Options->Customize Keybinds");
				A_GiveInventory("SovietToken",1,AAPTR_MASTER); 
				A_GiveInventory("SovietActive",1,AAPTR_MASTER);		
			}
			else if (user_t == ID_U1Pistol)			{	A_GiveInventory("PistolUpgradeAltCharge",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2Pistol)			{	A_GiveInventory("PistolUpgradeAltDamage",1,AAPTR_MASTER);		}
			else if (user_t == ID_U3Pistol)			{	A_GiveInventory("PistolUpgradeAutomatic",1,AAPTR_MASTER);		}
			else if (user_t == ID_U4Pistol)			{	A_GiveInventory("PistolUpgradeDamage",1,AAPTR_MASTER);		}
			else if (user_t == ID_U1GaussCannon)	{	A_GiveInventory("GaussCannonMod1",1,AAPTR_MASTER);	}
			else if (user_t == ID_U2GaussCannon)	{	A_GiveInventory("GaussCannonMod2",1,AAPTR_MASTER);	}
			else if (user_t == ID_U1PlasmaRifle)	{	A_GiveInventory("PlasmaRifleMod1",1,AAPTR_MASTER);	}
			else if (user_t == ID_U2PlasmaRifle)	{	A_GiveInventory("PlasmaRifleMod2",1,AAPTR_MASTER);	}
			else if (user_t == ID_U1RocketLauncher)	{	A_GiveInventory("RocketLauncherMod1",1,AAPTR_MASTER);	}
			else if (user_t == ID_U2RocketLauncher)	{	A_GiveInventory("RocketLauncherMod2",1,AAPTR_MASTER);	}
			else if (user_t == ID_U1Shotgun)		{	A_GiveInventory("ShotgunMod1",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2Shotgun)		{	A_GiveInventory("ShotgunMod2",1,AAPTR_MASTER);		}
			// Reload Speed
			else if (user_t == ID_U1SuperShotgun)	{	A_GiveInventory("SSGUpgrade1",1,AAPTR_MASTER);		}
			// Piercing Shot
			else if (user_t == ID_U2SuperShotgun)	{	A_GiveInventory("SSGUpgrade2",1,AAPTR_MASTER);		}
			// Double Shot
			else if (user_t == ID_U3SuperShotgun)	{	A_GiveInventory("SSGUpgrade3",1,AAPTR_MASTER);		}
			// Spread Decrease
			else if (user_t == ID_U4SuperShotgun)	{	A_GiveInventory("SSGUpgrade4",1,AAPTR_MASTER);		}
			
			else if (user_t == ID_U1LightningGun)	{	A_GiveInventory("LGUpgradeAmmo",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2LightningGun)	{	A_GiveInventory("LGUpgradeRange",1,AAPTR_MASTER);		}
			else if (user_t == ID_U3LightningGun)	{	A_GiveInventory("LGUpgradeDamage",1,AAPTR_MASTER);		}
			else if (user_t == ID_U4LightningGun)	{	A_GiveInventory("LGUpgradeAltFire",1,AAPTR_MASTER);		}
			else if (user_t == ID_U1StaticRifle)	{	A_GiveInventory("StaticUpgrade1",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2StaticRifle)	{	A_GiveInventory("StaticUpgrade2",1,AAPTR_MASTER);		}
			else if (user_t == ID_U3StaticRifle)	{	A_GiveInventory("StaticUpgrade3",1,AAPTR_MASTER);		}
			else if (user_t == ID_U4StaticRifle)	{	A_GiveInventory("StaticUpgrade4",1,AAPTR_MASTER);		}
			
			else if (user_t == ID_U1VortexRifle)	{	A_GiveInventory("VortexUpgradeDamage",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2VortexRifle)	{	A_GiveInventory("VortexUpgradeAmmo",1,AAPTR_MASTER);		}
			else if (user_t == ID_U3VortexRifle)	{	A_GiveInventory("VortexUpgradeAltSpeed",1,AAPTR_MASTER);		}
			else if (user_t == ID_U4VortexRifle)	{	A_GiveInventory("VortexUpgradeAltPierce",1,AAPTR_MASTER);		}
			else if (user_t == ID_U1Repeater)		{	A_GiveInventory("RepeaterUpgradePiercing",1,AAPTR_MASTER);		}
			else if (user_t == ID_U2Repeater)		{	A_GiveInventory("RepeaterUpgradeDamage",1,AAPTR_MASTER);		}
			else if (user_t == ID_U3Repeater)		{	A_GiveInventory("RepeaterUpgradeAltDamage",1,AAPTR_MASTER);		}
			else if (user_t == ID_U4Repeater)		{	A_GiveInventory("RepeaterUpgradeAltAmmo",1,AAPTR_MASTER);		}
			//if (user_t == ID_U1Pistol)				{	user_direw = 1;		user_dirns = 1;		if (CountInv("PistolUpgradeAutomatic",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(33);	} // C
			//if (user_t == ID_U2Pistol)				{	user_direw = -1;	user_dirns = 1;		if (CountInv("PistolUpgradeAltDamage",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(23);	} // W
			//if (user_t == ID_U3Pistol)				{	user_direw = 1;		user_dirns = -1;	if (CountInv("PistolUpgradeAltCharge",AAPTR_MASTER))		{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(34);	} // D
			//if (user_t == ID_U4Pistol)				{	user_direw = -1;	user_dirns = -1;	if (CountInv("PistolUpgradeDamage",AAPTR_MASTER))			{ user_purchased = 1; return ResolveState("Bought"); }	return ResolveState(35);	} // E
			if (UCost)
			{	
				A_GiveInventory("D4DCashFake",UCost,AAPTR_MASTER);
				A_TakeInventory("D4DCash",UCost,0,AAPTR_MASTER);	
				A_GiveInventory("CashUpdaterNegative",1,AAPTR_MASTER);
			}
			user_purchased = 1;
		}
		Goto BoughtIdle;
		
	
	//==========================================================================
	//==========================================================================
	// Another besides this one has been selected.
	Inact:
		"####" "#" 1
		{
			if (CountInv("MenuToken",AAPTR_MASTER) == 2)
			{
				if (Scale.X > 0.25)
				{	A_SetScale(Scale.X-0.05);	}
				else if (Scale.X < 0.25)
				{	A_SetScale(0.25);	}
				return ResolveState(null);				
			}
			else if (CountInv("MenuToken",AAPTR_MASTER) == 1)
			{	return ResolveState("Idling");			}
			else if (!CountInv("MenuToken",AAPTR_MASTER))
			{	return ResolveState("MoveToNothing");	}
			return ResolveState(null);
		}
		Loop;
	//==========================================================================
	//==========================================================================
	// Moving up to the weapon selection level so make this disappear.
	MoveToNothing:
		"####" "#" 0 
		{
			ACS_NamedExecuteAlways("ClearHoloText",0,0,0,0);
			A_SetScale(0.5);
		}
	MovingToNothing:
		"####" "#" 4 
		{
			if (!user_dirns)
			{	return ResolveState("MoveIn");	}
			A_ChangeVelocity(0,0,-ZSpeed*user_dirns);
			return ResolveState(null);
		}
		"####" "#" 0 A_Stop
		Goto MoveIn;
	MoveIn:
		"####" "#" 1
		{
			if (Scale.X > 0.05)
			{	
				A_Warp(TracerPtr,-user_dist+2,0,ZHeight,-AngleSpeed*(user_direw),WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USECALLERANGLE);
				A_SetScale(Scale.X-0.05);
				return ResolveState(null);
			}
			return ResolveState("Null");	
		}
		Loop;
	Checker:
		TNT1 A 0
		{
			if (GetCvar("vid_renderer") &&
			CountInv("AssaultRifleMod1",AAPTR_MASTER) &&
			CountInv("AssaultRifleMod2",AAPTR_MASTER) &&
			CountInv("ChaingunMod1",AAPTR_MASTER) &&
			CountInv("ChaingunMod2",AAPTR_MASTER) &&
			CountInv("GaussCannonMod1",AAPTR_MASTER) &&
			CountInv("GaussCannonMod2",AAPTR_MASTER) &&
			CountInv("PlasmaRifleMod1",AAPTR_MASTER) &&
			CountInv("PlasmaRifleMod2",AAPTR_MASTER) &&
			CountInv("RocketLauncherMod1",AAPTR_MASTER) &&
			CountInv("RocketLauncherMod2",AAPTR_MASTER) &&
			CountInv("ShotgunMod1",AAPTR_MASTER) &&
			CountInv("ShotgunMod2",AAPTR_MASTER) &&
			CountInv("SSGUpgrade1",AAPTR_MASTER) &&
			CountInv("SSGUpgrade2",AAPTR_MASTER) &&
			CountInv("SSGUpgrade3",AAPTR_MASTER) &&
			CountInv("SSGUpgrade4",AAPTR_MASTER) &&
			CountInv("PistolUpgradeAutomatic",AAPTR_MASTER) &&
			CountInv("PistolUpgradeAltDamage",AAPTR_MASTER) &&
			CountInv("PistolUpgradeAltCharge",AAPTR_MASTER) &&
			CountInv("PistolUpgradeDamage",AAPTR_MASTER))
			{
				if (CountInv("SovietToken",AAPTR_MASTER))
				{	
					user_purchased = 1;
					return ResolveState("Bought");
				}
				
				return ResolveState(null);	
			}
			return ResolveState("Null");
		}
		M672 Z 0
		Goto MoveOut;
	Death:
	FadeOut:
		"####" "#" 0 
		{
			ACS_NamedExecuteAlways("ClearHoloText",0,0,0,0);
			A_NoGravity;
			A_Stop();
			bNOINTERACTION = true;
		}
		"####" "#" 1 A_FadeOut(0.05)
		Wait;
	}
}

/*
M670A: Checkmark Empty
M671A: Checkmark Full
M670B: Diagonal arrow empty cyan
M670C: ^ white
M671B: ^ full cyan
M671C: ^ white
M670D: Right empty cyan
M670E: ^ white
M671D: ^ full cyan
M671E: ^ white
M670F: Up empty cyan
M670G: ^ white
M671F: ^ full cyan
M671G: ^ white
M670H: X empty
M671H: X full
*/
/*
Class HoloConfirmation : Actor 
{
	const Distance = 84;
	const ZHeight = 32;
	double  UX[2];
	double  UY[2];
	double  UZ[2];
	int user_t;
	Projectile;
	+NOTIMEFREEZE
	+NOINTERACTION
	Species "Holograph"
	Scale 0
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_t = tid;
			Thing_ChangeTID(0,0);
			A_SetUserArray(UX,0,x);
			A_SetUserArray(UY,0,y);
			A_SetUserArray(UZ,0,z);
			
			if (user_t == CheckMark)	{ return ResolveState(1); }
			return ResolveState(2);
		}
		M670 AH 0
		{	return ResolveState("MoveToIdle");	}
	MoveToIdle:
		M670 "#" 1
	Idle:
		M670 "#" 0
	Idling:
		M670 "#" 1
		M670 "#" 0
		{
			
		}
		
	Death:
	FadeOut:
		M670 "#" 1 A_FadeOut
		Wait;
	}
}
*/

Class HoloCursor : Actor 
{
	//const Channels = CHAN_NOPAUSE|CHAN_AUTO;
	const Distance = 74;
	//const ZHeight = 32;
	const AngleLimit = 50;
	const ZLimit = 80;
	const CDist = 16;
	const RotateThreshold = 15;
	const HighlightThreshold = 28;
	int user_menu;
	double  user_dist;
	double  user_a;
	double  UZ;
	int user_weap;
	int user_cd;
	int user_given;
	int user_mousespeed;
	Projectile;
	+NOTIMEFREEZE
	+NOINTERACTION
	+BRIGHT
	Height 1
	Radius 1
	Species "Holograph"
	XScale -0.25
	YScale 0.25
	States
	{
	Spawn:
		M667 Z 0 NoDelay 
		{
			UZ = 45;
			A_Warp(AAPTR_MASTER,Distance,0,UZ,0,WARPF_NOCHECKPOSITION);
			
			A_RearrangePointers(NullPtr,AAPTR_DEFAULT,AAPTR_DEFAULT,4);
			if (CountInv("D4GaussCannon",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4PlasmaRifle",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4RocketLauncher",AAPTR_MASTER))	{	user_weap++;	}
			if (CountInv("D4AssaultRifle",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4Chaingun",AAPTR_MASTER))			{	user_weap++;	}
			if (CountInv("D4SuperShotgun",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4Shotgun",AAPTR_MASTER))			{	user_weap++;	}
			if (CountInv("D4StaticRifle",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4LightningGun",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4BFG",AAPTR_MASTER))				{	user_weap++;	}
			if (CountInv("D4CarrionCannon",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4Pistol",AAPTR_MASTER))			{	user_weap++;	}
			if (CountInv("D4VortexRifle",AAPTR_MASTER))		{	user_weap++;	}
			if (CountInv("D4Repeater",AAPTR_MASTER))			{	user_weap++;	}
		}
	Input:
		M667 Z 1
		{
			user_menu = CountInv("MenuToken",AAPTR_MASTER);
			//==================================================================
			// Adjust the angle and z based on raw input. The player's totally frozen
			// so it must be raw, not modded.
			user_mousespeed = GetCvar("D4D_MenuMouseSpeed);
			user_a = user_a + ((GetPlayerInput(INPUT_YAW,AAPTR_MASTER))/32767.0) * user_mousespeed;
			UZ = UZ + ((GetPlayerInput(INPUT_PITCH,AAPTR_MASTER))/32767.0) * (user_mousespeed * 2);
			user_a = Clamp(user_a,-AngleLimit,AngleLimit);
			UZ = Clamp(UZ,0,ZLimit);
			
			//==================================================================
			// Move the pointer.
			A_Warp(AAPTR_MASTER,Distance,0,UZ,user_a,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			
			//==================================================================
			// Cooldown to prevent breaking things such as selecting menu items
			// while they're moving. 
			if (user_cd > 0)
			{
				user_cd--;
				return ResolveState(null);
			}
			
			//==================================================================
			// Secondary fire = up one menu level.
			if ((GetPlayerInput(INPUT_BUTTONS,AAPTR_MASTER) & BT_ALTATTACK) &&
				!(GetPlayerInput(INPUT_OLDBUTTONS,AAPTR_MASTER) & BT_ALTATTACK))
			{
				A_GiveInventory("TextClearer",1,AAPTR_MASTER);
				if (GetCvar("D4D_SecondaryExit) > 0 && !(CountInv("MenuToken",AAPTR_MASTER)))
				{	A_GiveInventory("ToggleMenu",1,AAPTR_MASTER);	}
				A_TakeInventory("MenuToken",1,0,AAPTR_MASTER);
				A_GiveToSiblings("LookingAtClearer",1);
				A_RearrangePointers(NullPtr,AAPTR_DEFAULT,NullPtr);
				user_cd = RotateTime + 15;
			}
			
			//==================================================================
			// Rotates the menu if mousing over just far enough.
			// Pressing strafe/user keys also works.
			if (user_menu <= 0 && user_weap > 1)
			{
				if (user_a > RotateThreshold || GetPlayerInput(INPUT_BUTTONS,AAPTR_MASTER) & (BT_MOVELEFT|BT_USER1))
				{
					A_GiveInventory("HoloRotateLeft",1,AAPTR_MASTER);
					A_GiveInventory("HoloRotate",1,AAPTR_MASTER);
					user_cd = RotateTime;
					A_GiveInventory("TextClearer",1,AAPTR_MASTER);
					return ResolveState(null);
				}
				else if (user_a < -RotateThreshold || GetPlayerInput(INPUT_BUTTONS,AAPTR_MASTER) & (BT_MOVERIGHT|BT_USER2))
				{
					A_GiveInventory("HoloRotateRight",1,AAPTR_MASTER);
					A_GiveInventory("HoloRotate",1,AAPTR_MASTER);
					user_cd = RotateTime;
					A_GiveInventory("TextClearer",1,AAPTR_MASTER);
					return ResolveState(null);
				}
			}
			
			if (user_a <= HighlightThreshold && user_a >= -HighlightThreshold)
			{
				A_SetUserVar(user_given,0);
				//==================================================================
				//==================================================================
				// If we don't have one, check for a selectable holo based on how 
				// far into the menu we are.
				if (IsPointerEqual(AAPTR_TARGET,NullPtr))
				{
					//if (user_menu >= 2)
					//{	A_CheckProximity("Null","HoloConfirmation",CDist,1,CPXF_CLOSEST|CPXF_SETTARGET);	}
					if (user_menu >= 1)
					{	A_CheckProximity("Null","WeaponUpgradeHolo",CDist,1,CPXF_CLOSEST|CPXF_SETTARGET);	}
					else 
					{	A_CheckProximity("Null","HoloSelectable",CDist,1,CPXF_CLOSEST|CPXF_SETTARGET);		}
				}
				//==================================================================
				// Holo found.
				if (!IsPointerEqual(AAPTR_TARGET,NullPtr))
				{
					if (GetDistance(true,AAPTR_TARGET) <= CDist) 
					{	//In range. Highlight it.				
						A_RearrangePointers(AAPTR_DEFAULT,AAPTR_DEFAULT,AAPTR_TARGET);
						
						if (!CountInv("LookingAt",AAPTR_TARGET))
						{	A_GiveInventory("LookingAt",1,AAPTR_TARGET);	}
						
						//==========================================================
						// Primary Fire = Select Menu. Only give it once.
						// This code replicates the NOAUTOFIRE flag on weapons.
						
						if ((GetPlayerInput(INPUT_BUTTONS,AAPTR_MASTER) & BT_ATTACK) &&
							!(GetPlayerInput(INPUT_OLDBUTTONS,AAPTR_MASTER) & BT_ATTACK))
						{	A_GiveInventory("MenuSelect",1,AAPTR_MASTER);		}
						
						else if (!(GetPlayerInput(INPUT_BUTTONS,AAPTR_MASTER) & BT_ATTACK))
						{	A_TakeInventory("MenuSelect",32767,AAPTR_MASTER);	}
					}
					else	// Out of range, so clear all of them just to be safe.
					{
						if (!IsPointerEqual(AAPTR_TARGET,NullPtr))
						{	
							A_TakeInventory("MenuSelect",32767,AAPTR_MASTER);
							A_GiveInventory("TextClearer",1,AAPTR_MASTER);
							A_GiveToSiblings("LookingAtClearer",1);
							A_RearrangePointers(NullPtr,AAPTR_DEFAULT,NullPtr);
							A_ClearTarget();
						}
					}
				}
			}
			else
			{	
				if (!user_given)
				{
					user_given = 1;
					A_GiveToSiblings("LookingAtClearer",1);	
				}
			}
			return ResolveState(null);
		}
		Loop;
	}
}

Class TextClearer : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0 ACS_NamedExecute("ClearHoloText",0,0,0,0)
		Stop;
	}
}
Class LookingAtClearer : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CheckClass("HoloSelectable") || CheckClass("WeaponUpgradeHolo"))
			{
				A_TakeInventory("LookingAt");
				return true;
			}
			else	
			{	return false;		}
		}
		Stop;
	}
}

//==============================================================================
//==============================================================================
// Used for selecting upgrades

Class D4UpgradeHand : Weapon
{
	+WEAPON.CHEATNOTWEAPON
	+WEAPON.AMMO_OPTIONAL
	+INVENTORY.ALWAYSPICKUP
	+INVENTORY.NOSCREENFLASH
	+INVENTORY.UNDROPPABLE
	+INVENTORY.UNTOSSABLE
	+NOAUTOFIRE
	States
	{
	Spawn:
		TNT1 A 0
		Stop;
	Select:
		M666 A 0 A_Raise
		Loop;
	Deselect:	
		M666 A 1	//Needed.
	DesLoop:
		M666 A 0 A_Lower
		Loop;
	Ready:
		M666 A 1 A_WeaponReady(WRF_DISABLESWITCH)
		Loop;
	Fire:
		M666 A 1 A_GiveInventory("MenuSelect",1)
	Hold:
		M666 A 1
		M666 A 0 A_Refire("Hold")
		M666 A 0 A_TakeInventory("MenuSelect",32767)
		Goto Ready;
	AltFire:
		M666 A 1 A_TakeInventory("MenuToken",1)
		Goto Ready;
	}
}

//==============================================================================
//==============================================================================
// All these below are just background workers. 

Class EndHoloEffect : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (!CheckClass("HoloVelocityKeeper") && A_CheckSpecies("Null","Holograph"))
			{
				A_ChangeFlag(VULNERABLE,true);
				A_Die();
			}
		}
		Stop;
	}
}

Class HoloVelocityKeeper : Actor 
{
	double  UX;
	double  UY;
	double  UZ;
	double  UPitch;
	Projectile;
	+NOINTERACTION
	+NOTONAUTOMAP
	+NOTIMEFREEZE
	Species "Holograph"
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			UX = vel.x;
			UY = vel.y;
			UZ = vel.z;
			A_Stop();
			A_Warp(AAPTR_MASTER,0,0,0,0,WARPF_COPYPITCH|WARPF_NOCHECKPOSITION);
			UPitch = pitch;
			A_SetPitch(0,SPF_INTERPOLATE,AAPTR_MASTER);
		}
	Death:
		TNT1 A 0 
		{
			A_ChangeVelocity(UX,UY,UZ,CVF_REPLACE,AAPTR_MASTER);
		}
		TNT1 A 1 A_SetPitch(UPitch,SPF_INTERPOLATE,AAPTR_MASTER)
		Stop;
	}
}

//==============================================================================
//==============================================================================

Class HoloXtraParticle : Actor 
{
	const PFlags = SPF_FULLBRIGHT|SPF_RELATIVE|SPF_NOTIMEFREEZE;
	const Life = 17;
	const DistanceTurn = 1.5;
	const Size = 8.0;
	const Distance1 = 24;
	const Distance2 = 48;
	const Distance3 = 72;
	const Distance4 = 96;
	double  user_bottom;
	double  user_spread;
	double  user_ang;
	const MaxHeight = 64;
	const Turn = 1.0;
	Projectile;
	+NOINTERACTION
	+NOTONAUTOMAP
	+NODAMAGE
	+NOTIMEFREEZE
	RenderStyle "None";
	Species "Holograph"
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			/*
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance1,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance1,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),		Distance1,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),		Distance1,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance2,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance2,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),	Distance2,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),	Distance2,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance3,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance3,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),		Distance3,0,2,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),		Distance3,0,2,0,0,0,0,0,0);
			*/
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance4 -4,0,4,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance4 -4,0,4,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),	Distance4 -4,0,4,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),	Distance4 -4,0,4,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance4 -4,0,12,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance4 -4,0,12,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),		Distance4 -4,0,12,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),		Distance4 -4,0,12,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance4 -4,0,20,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance4 -4,0,20,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),	Distance4 -4,0,20,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),	Distance4 -4,0,20,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance4 -4,0,28,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance4 -4,0,28,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),		Distance4 -4,0,28,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),		Distance4 -4,0,28,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance4 -4,0,36,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance4 -4,0,36,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),	Distance4 -4,0,36,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),	Distance4 -4,0,36,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance4 -4,0,44,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance4 -4,0,44,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),		Distance4 -4,0,44,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),		Distance4 -4,0,44,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance4 -4,0,52,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance4 -4,0,52,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),	Distance4 -4,0,52,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),	Distance4 -4,0,52,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance4 -4,0,60,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance4 -4,0,60,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),	Distance4 -4,0,60,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),	Distance4 -4,0,60,0,0,0,0,0,0);
			/*
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance1,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance1,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),	Distance1,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),	Distance1,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,user_ang,			Distance2,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+90),		Distance2,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+180),		Distance2,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,(user_ang+270),		Distance2,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-user_ang,			Distance3,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+90),		Distance3,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+180),	Distance3,0,Distance3 -16,0,0,0,0,0,0);
			A_SpawnParticle(FFFFFF,PFlags,Life,Size,-(user_ang+270),	Distance3,0,Distance3 -16,0,0,0,0,0,0);
			*/
			A_SetUserVarFloat(user_ang, (user_ang + DistanceTurn) % 360.0);
			return ResolveState(null);
		}
		Loop;
	Death:
		TNT1 A 0
		Stop;
	}
}
Class BuyToken				: Inventory { Inventory.InterhubAmount 0 }
Class MenuSelect			: Inventory { Inventory.InterhubAmount 0 }
Class MenuBack				: Inventory { Inventory.InterhubAmount 0 }
Class MenuToken				: Inventory { Inventory.InterhubAmount 0	Inventory.MaxAmount 100 }
Class IsInvul 				: Inventory { Inventory.InterhubAmount 0 }
Class UpgradeSystemActive 	: Inventory { Inventory.InterhubAmount 0 }
Class UpgradeTimeFreezer : 	PowerTimeFreezer	{	Powerup.Duration 0x7FFFFFFD	}
Class UpgradeFlight : 		PowerFlight			{	Powerup.Duration 0x7FFFFFFD	}
Class LookingAt : Inventory {}
Class HoloHighlight : Inventory	{}
Class HoloRotateRight : Inventory { Inventory.MaxAmount 1 Inventory.InterhubAmount 0 }
Class HoloRotateLeft : Inventory { Inventory.MaxAmount 1 Inventory.InterhubAmount 0 }
Class HoloRotate : Inventory { Inventory.MaxAmount 1 Inventory.InterhubAmount 0 }

//This token will end any holographic projections.
Class EndHoloToken : Inventory	{ Inventory.InterHubAmount 0 }
Class HoloCooldown : Inventory	{ Inventory.MaxAmount 50		Inventory.InterHubAmount 0 }

Class HintOnceToken : Inventory { +INVENTORY.UNTOSSABLE Inventory.InterhubAmount 1}
Class HintOnce : CustomInventory
{
	+INVENTORY.ALWAYSPICKUP
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_Log("Strafe/Weapon State 1-2 keys or mouse to scroll");
			A_Log("Secondary fire to move back a menu");
		}
		Stop;
	}
}