//==============================================================================
//==============================================================================
//
//	Base items
//
//==============================================================================
//==============================================================================

// Defines how many pinatas to drop.

Struct D4DropList play
{
	Array<Class<Inventory> > ItemName;
	Array<Int> ItemCount;
	Array<Double> ItemAmountMul;
	
	//--------------------------------------------------------------------------
	// ResetList()
	//
	// Wipes out all items on the drop list and sets all counts to 0.
	//--------------------------------------------------------------------------
	
	void ResetList()
	{
		ItemName.Clear();
		ItemCount.Clear();
		ItemAmountMul.Clear();
	}
	
	//--------------------------------------------------------------------------
	// AddItem(actor, count, amount, adding?)
	//
	// Adds an item to the list and how many to spawn.
	//--------------------------------------------------------------------------
	
	void AddItem(Class<Inventory> newthing, int count = 1, double amountMul = 1.0, 
				bool adding = true, int res = 0)
	{
		// Don't bother if the value is 0. 
		if (count == 0) 
			return;
			
		// Make sure the item's valid first.
		if (!newthing)
		{
			Console.Printf("Error: %s is not a valid item!", newthing);
			return;
		}
		// Search the array first for something, if its size is > 0. Otherwise,
		// add it in if not found.
		int size = ItemName.Size();
		if (size > 0)
		{
			int i = ItemName.Find(newthing);
			if (i < size)
			{
				ItemCount[i] = adding ? ItemCount[i] + count : count;
				
				if (amountMul > 0.0)
					ItemAmountMul[i] = Max(1.0, amountMul);
				return;
			}
		}
		ItemName.Push(newthing);
		ItemCount.Push(count);
		ItemAmountMul.Push(Max(1.0, amountMul));
	}
	
	//--------------------------------------------------------------------------
	// Multiply(amount)
	// 
	// Multiplies the amount on all drops.
	//--------------------------------------------------------------------------
	
	void Multiply(double amt)
	{
		if (amt <= 0.0)	return;
		
		if (ItemAmountMul.Size() > 0)
		{
			for (int i = 0; i < ItemAmountMul.Size(); i++)
				ItemAmountMul[i] *= amt;
		}
	}
	
	//--------------------------------------------------------------------------
	// DropItemsPos(actor)
	//
	// Causes an actor to spawn its entire list of items.
	//--------------------------------------------------------------------------
	
	void DropItemsPos(Vector3 mpos)
	{
		int size = ItemName.Size();
		if (size > 0)
		{
			for (int i = 0; i < size; i++)
			{
				Class<Inventory> check = ItemName[i];
				if (check == null)	continue;
				for (int j = 0; j < ItemCount[i]; j++)
				{
					Inventory it = Inventory(Actor.Spawn(check, mpos + (0, 0, 32)));
					
					if (it)
					{
						it.bTHRUACTORS = true;
						it.amount = int(it.amount * ItemAmountMul[i]);
						it.bTHRUACTORS = false;
						it.VelFromAngle(frandom[a](3,6),random[a](0,359));
						it.vel.Z += frandom[a](1,5);
						it.A_FaceMovementDirection(0,0);
						
					}
				}
			}
			ItemName.Clear();
			ItemCount.Clear();
		}
	}
}