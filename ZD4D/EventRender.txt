//==============================================================================
//==============================================================================
// EventRender
// 
// Houses most of the rendering components that aren't centralized on MC_Utility
// itself. Specifically, things like the radial damage indicator/powerup screens.
//==============================================================================
//==============================================================================
extend Class D4DHandler
{
	private D4VisualDamageManager ArrowManager;
	private ui void RenderDamageIndicators(RenderEvent e)
	{
		if (ArrowManager)
			ArrowManager.Render(e);
	}
	
	private void TickDamageIndicators()
	{
		if (ArrowManager)
			ArrowManager.Tick();
	}
	
	private void AddEventDamageIndicator(WorldEvent e)
	{
		if (ArrowManager)
			ArrowManager.AddIndicator(e.DamageSource, e.Inflictor, e.Thing, e.Damage);
	}
	
	void AddDamageIndicator(Actor src, Actor inf, Actor plr, int damage)
	{
		if (ArrowManager)
			ArrowManager.AddIndicator(src, inf, plr, damage);
	}
	
	//--------------------------------------------------------------------------
	// Powerup Screens
	//--------------------------------------------------------------------------
	
	static const String PowerNames[] =
	{
		"PowerD4QuadDamage","Shade2Ma",
		"PowerD4Regen", 	"Shade2Cy",
		"PowerD4Haste", 	"Shade2Ye",
		"PowerD4Money", 	"Shade2Gr"	
	};
	
	private ui void RenderPowerupScreens(RenderEvent e)
	{
		PlayerInfo plr = players[consoleplayer];
		let mo = Actor(plr.mo);
		if (!mo)	return;
		
		double	sw = Screen.GetWidth(),
				sh = Screen.GetHeight();

		if (mo is "DemonPlayerBase")
		{
			let id = TexMan.CheckForTexture("Shade2Br", TexMan.Type_Any);
			if (id)	
				Screen.DrawTexture(id, false, 0, 0,
					DTA_VirtualWidthF, sw,
					DTA_VirtualHeightF, sh,
					DTA_DestWidthF, sw,		
					DTA_DestHeightF, sh);
		}
		
		
		//R016 N
		for (int i = 0; i < PowerNames.Size(); i += 2)
		{
			Class<Powerup> pn = PowerNames[i];
			double alf = GetPowerFadeAlpha(mo, pn);
			if (alf > 0.0)
			{
				let id = TexMan.CheckForTexture(PowerNames[i+1], TexMan.Type_Any);
				if (id)
				{
					Screen.DrawTexture(id, false, 0, 0,
						DTA_VirtualWidthF, sw,
						DTA_VirtualHeightF, sh,
						DTA_DestWidthF, sw,		
						DTA_DestHeightF, sh,
						DTA_Alpha, alf);
				}
			}
		}
	}
	
	private ui double GetPowerFadeAlpha(Actor mo, Class<Powerup> item, int expirewarn = 105)
	{
		if (!mo || !item)	return 0.0;
		if (expirewarn < 1)	return 1.0;
		
		let power = Powerup(mo.FindInventory(item, true));
		if (!power)	
			return 0.0;
			
		if (power && power.EffectTics >= expirewarn)	
			return 1.0;
		
		return (power.EffectTics / double(expirewarn));
	}
}

//==============================================================================
// Damage Indicators
//==============================================================================

Class D4VisualDamageManager play
{
	private Array<D4DamageIndicator> Arrows;
	private int Timer;
	const ClearTimer = Second * 5;
	
	static D4VisualDamageManager Create()
	{
		let vdm = new('D4VisualDamageManager');
		vdm.Init();
		return vdm;
	}
	
	protected void Init()
	{
		Arrows.Clear();
	}
	
	void AddIndicator(Actor src, Actor inf, Actor plr, int damage = 0)
	{
		if ((!src && !inf) || !plr || src == plr)
			return;
		
		for (int i = 0; i < Arrows.Size(); i++)
		{
			if (Arrows[i] && Arrows[i].src == src)
			{
				Arrows[i].ResetTimer();
				return;
			}
		}
		
		let arrow = new('D4DamageIndicator');
		arrow.src = src;
		arrow.inf = inf;
		if (src)	arrow.srcpos = src.pos;
		else if ((inf && inf.bMISSILE && inf.target) || inf)
		{
			src = (inf.target) ? inf.target : inf;
			arrow.srcpos = src.pos;
		}
		if (inf)	arrow.infpos = inf.pos;
		arrow.plr = plr;
		arrow.tex = TexMan.CheckForTexture(D4DamageIndicator.texname,TexMan.Type_Any);
		arrow.ResetTimer();
		arrow.Init();
		Arrows.Push(arrow);
	}
	
	void Tick()
	{
		int size = Arrows.Size();
		if (size < 1)	return;
		
		// Tick all the arrows and keep their information up to date.
		for (int i = 0; i < size; i++)
		{
			if (Arrows[i])
				Arrows[i].Tick();
		}
		
		// Memory management. Remove all empty slots.
		if (++Timer >= ClearTimer)
		{
			Timer = 0;
			Array<D4DamageIndicator> temp; temp.Clear();
			
			for (int i = 0; i < size; i++)
				if (Arrows[i])	temp.Push(Arrows[i]);
			
			Arrows.Move(temp);
		}
	}
	
	ui void Render(RenderEvent e)
	{
		let CDIToggle = Cvar.GetCvar('D4D_DamageIndicators', players[consoleplayer]);
		if (!CDIToggle || !CDIToggle.GetInt() || Arrows.Size() < 1)
			return;
		
		PlayerInfo plr = players[consoleplayer];
		let CDIAlpha = Cvar.GetCvar('D4D_DIAlpha', plr);
		let CDIScale = Cvar.GetCvar('D4D_DIScale', plr);
		double Alpha = 1.0, Scale = 0.5;
		
		if (CDIAlpha)	Alpha = CDIAlpha.GetFloat();
		if (CDIScale)	Scale = CDIScale.GetFloat();
		
		int size = Arrows.Size();
		for (int i = 0; i < size; i++)
		{
			let arrow = D4DamageIndicator(Arrows[i]);
			if (arrow && arrow.pinfo == plr)
				Arrows[i].Render(e, Alpha, Scale);
		}
	}
}

Class D4DamageIndicator play
{
	const texname = "Graphics/HUD/DmgDir2.png";
	Actor inf, src, plr;
	PlayerInfo pinfo;
	Vector3 infpos, srcpos;
	TextureID tex;
	private double Alpha, Scale;
	private int Timer;
	
	private bool hadsrc, hadinf;
	private Vector2 siz;
	private Shape2D flat;
	private Shape2DTransform trans;
	
	void Init()
	{
		hadsrc = src != null;
		hadinf = inf != null;
		pinfo = plr.player;
		flat = new("Shape2D");
		
		// simple coords
		flat.PushCoord((0,0));	// 0
		flat.PushCoord((1,0));	// 1
		flat.PushCoord((0,1));	// 2
		flat.PushCoord((1,1));	// 3
		
		// PushTriangle takes INDEXES of coords pushed to it in order from
		// first to last, as numbered above.
		flat.PushTriangle(0,2,1); // (0,0) (0,1) (1,0)
		flat.PushTriangle(2,3,1); // (0,1) (1,1) (1,0)
		siz = TexMan.GetScaledSize(tex);
		
		// Create the vertices and push them into the array.
		Vector2 vertices[4];
		vertices[0] = (-siz.x,-siz.y);
		vertices[1] = ( siz.x,-siz.y);
		vertices[2] = (-siz.x, siz.y);
		vertices[3] = ( siz.x, siz.y);
		
		flat.Clear(Shape2D.C_Verts);
		for ( int i=0; i<4; i++ ) flat.PushVertex(vertices[i]);
		
		trans = new('Shape2DTransform');
	}
	
	void ResetTimer(int time = -1)
	{
		if (time < 1)	time = (35 * 3);
		Timer = time;
	}
	
	void Tick()
	{
		if (--Timer < 0 || !plr)
		{
		//	Console.Printf("Destroyed");
			Destroy();	return;	
		}
		
		if (!src && inf && inf.bMISSILE)
			src = inf.target;
		
		if (src)	srcpos = src.pos;
		if (inf)	infpos = inf.pos;
		
	}
	const ThirtyFifth = (1.0 / 35.0);
	ui void Render( RenderEvent e, double _Alpha, double _Scale)
	{	
		// Alpha is already clamped below.
		double Alpha = (ThirtyFifth * Timer) * _Alpha;
		double Scale = _Scale;
		
		if (bDESTROYED || Alpha <= 0.0 || !plr || plr.pos == srcpos || !hadsrc)
			return;
		
		// Grab the player preferences.
		trans.Clear();
		
		// Rotate the damage indicator towards the one responsible.
		Vector3 diff = level.Vec3Diff(srcpos, plr.pos);
		double ang = VectorAngle(diff.X, diff.Y);
		ang = -plr.DeltaAngle(plr.angle, ang);

		Vector2 s = (Screen.GetWidth() / 2, Screen.GetHeight() / 2);
		
		double off = (siz.y + (siz.y * Scale)) * 0.75;
		Vector2 add = (-sin(ang) * off, cos(ang) * off);
		s += add;
		
		trans.Scale((1, 1) * Scale);
		trans.Rotate(ang + 180.0);
		trans.Translate(s);
		
		flat.SetTransform(trans);
		
			
		// draw the shape
		Screen.DrawShape(tex,false,flat,DTA_Alpha, Clamp(Alpha, 0.0, 1.0));
		
	}
}