#include "ZD4D/Doom4PlayerExtra.txt"



Class Doom4Player : PlayerPawn
{
	const DashSpeed = 30.0;
	const DamageDegree = 8;
	const ZFlagCheck =	CLOFF_ALLOWNULL|CLOFF_SKIPTARGET|CLOFF_FROMBASE|
							CLOFF_JUMPENEMY|CLOFF_JUMPFRIEND|CLOFF_JUMPOBJECT|
							CLOFF_JUMPNONHOSTILE|CLOFF_JUMP_ON_MISS;
	const MaxRoll = 0.5;
	const CannonArmX = 83.0;
	const CannonArmY = 23.0;
	const CannonDestX = 83.0;
	const CannonDestY = 23.0;
	
	static const Class<D4DGrenadeItem> GrenadeSelected[] =
	{
		"FlameThrowerPickup",
		"FragGrenadePickup",
		"SyphonGrenadePickup",
		"HoloGrenadePickup",
		"PersonalPortalPickup",
		"KineticMinePickup",
		"TeslaRocketPickup",
		"ShieldWallPickup",
		"ThreatSensorPickup",
		"ThreatScannerPickup"
	};
	
	D4DHandler Event;
	MCHandler MC;
	private int UjumpsDone;
	protected bool LowHP;
	protected int DashTimer;
	protected int CurInputCmds, OldInputCmds;
	protected double DashForward, DashSide, DashAngle, CurDashSpeed;
	protected double UOffsets;
	protected bool spawned;
	D4DGrenadeItem EquipmentShortcut;
	Class<Actor> GrenadeToFire;
	D4PlayerLineFinder LineFinder;
	protected D4ShieldWallTracer ShieldChecker;
	protected D4ShieldWall ShieldWall;
	protected Vector3 MantlePos[2];
	protected double MantleCos;
	protected Vector3 LifePos[3], LifeVel[3];
	protected Vector2 LifeAP[3];
	
	
	// Properties
	meta bool UseLives;
	Property UseLives: UseLives;
	Default 
	{
		Doom4Player.UseLives true;
		+ALLOWPAIN
		+PLAYERPAWN.CROUCHABLEMORPH
		+NOICEDEATH
		+AIMREFLECT
		-NODROPOFF
		Speed 1;
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Gravity 0.8;
		MaxDropOffHeight 32767;
		DeathSound "Eternal/Player/Death";
		TeleFogDestType "D4PlayerFog";
		Player.DisplayName "Doom Slayer";
		Player.CrouchSprite "PLYC";
		Player.StartItem "D4Pistol";
		Player.StartItem "D4DFist";
	//	Player.StartItem "AkimboWeapon";
		Player.StartItem "D4MultiJump", 2;
		Player.StartItem "FlameThrowerPickup";
		Player.StartItem "TrishotClip", 3;
		Player.JumpZ 7.0;
		
		Player.ColorRange 112, 127;
		Player.ColorSet 0, "Green",         0x70, 0x7F,  0x72;
		Player.ColorSet 1, "Gray",          0x60, 0x6F,  0x62; // Called "Indigo" originally so as to have a unique initial
		Player.ColorSet 2, "Brown",         0x40, 0x4F,  0x42;
		Player.ColorSet 3, "Red",           0x20, 0x2F,  0x22;
		// Doom Legacy additions
		Player.ColorSet 4, "Light Gray",    0x58, 0x67,  0x5A;
		Player.ColorSet 5, "Light Brown",   0x38, 0x47,  0x3A;
		Player.ColorSet 6, "Light Red",     0xB0, 0xBF,  0xB2;
		Player.ColorSet 7, "Light Blue",    0xC0, 0xCF,  0xC2;
		
		Player.AttackZOffset 11; //13 is perfect, but makes projectiles hit below. so A middle point to fix the hitscan attacks not hitting where they should
		Player.ViewHeight 41;

		Player.DamageScreenColor "White", 1.0, "WhiteFlashDamage";
		DamageFactor "WhiteFlashDamage", 1.0;
		DamageFactor "HoloAttract", 0;
		PainChance "HoloAttract", 0;
		// Hell On Earth Starter Pack
		DamageFactor "FriendBullet", 0.0;
		DamageFactor "Taunt", 0.0;
		DamageFactor "KillMe", 0.0;
		DamageFactor "Shotgun", 0.7;
		DamageFactor "Shrapnel", 0.0;
		DamageFactor "Blood", 0.5;
		DamageFactor "BlueBlood", 0.5;
		DamageFactor "GreenBlood", 0.5;
		DamageFactor "MinorHead", 0.0;
		DamageFactor "Decaptate", 0.0;
		DamageFactor "MonsterKnocked", 0.0;
		DamageFactor "MonsterBullet", 0.33;
		DamageFactor "MonsterShotgunBullet", 0.33;
		DamageFactor "MonsterCutless", 0.33;
		DamageFactor "CancelTeleportFog", 0.0;
		DamageFactor "BHFTOnBarrel", 0.0;
		DamageFactor "GibRemoving", 0.0;
		DamageFactor "HelperMarineFatallity", 0.0;
		DamageFactor "Leg", 0.0;
		DamageFactor "SpawnMarine", 0.0;
		DamageFactor "TeleportRemover", 0.0;
		DamageFactor "CauseObjectsToSplash", 0.0;
		DamageFactor "Shotgun", 0.0;
		DamageFactor "Cutless", 0.0;
		DamageFactor "SSG", 0.0;
		DamageFactor "Trample", 0.0;
		DamageFactor "bullet", 0.0;
		DamageFactor "cutless", 0.0;
		DamageFactor "shotgun", 0.0;
		DamageFactor "ssg", 0.0;
		// ClusterPlex
		DamageFactor "Player", 0.0;
		DamageFactor "Players", 0.0;
		DamageFactor "PlayerDevBall", 0.0;
		DamageFactor "PlayerDevBall2", 0.0;
		DamageFactor "PlayerDevTracer", 0.0;
		DamageFactor "PlayerExplosive", 0.0;
		DamageFactor "PlayerDTRG", 0.0;
		DamageFactor "PDTBFG", 0.0;
		DamageFactor "PDTBFGTracer", 0.0;
		DamageFactor "LegendaryPlayer", 0.0;
		DamageFactor "LegendaryGuruPlayer", 0.0;
		DamageFactor "Stunner", 0.5;
		DamageFactor "Nope", 0.0;
		DamageFactor "Player", 0.0;
		DamageFactor "Players", 0.0;
		DamageFactor "PlayerNemesisPlasma", 0.0;
		DamageFactor "PlayerPyro", 0.0;
		DamageFactor "PlayerFireSword", 0.0;
		DamageFactor "PlayerBHole", 0.0;
		DamageFactor "PDTPuff", 0.0;
		DamageFactor "Player2hu", 0.0;
		//	Ark
		DamageFactor "PlayerTear", 0.0;
		DamageFactor "PlayerDBFG2", 0.0;
		
		PainChance "SpawnMarine", 0;
		PainChance "Leg", 0;
		PainChance "Taunt", 0;
		PainChance "FriendBullet", 0;
		PainChance "KillMe", 0;
		PainChance "Shrapnel", 0;
		PainChance "MinorHead", 0;
		PainChance "Decaptate", 0;
		PainChance "MonsterKnocked", 0;
		PainChance "CancelTeleportFog", 0;
		PainChance "BHFTOnBarrel", 0;
		PainChance "GibRemoving", 0;
		PainChance "HelperMarineFatallity", 0;
		PainChance "TeleportRemover", 0;
		PainChance "CauseObjectsToSplash", 0;
		PainChance "HoloAttract", 0;
		Species "Marines";
		+THRUSPECIES
		+MTHRUSPECIES
	}
	
	void DoTeleportEffects()
	{
		if (!GetRealPlayer() || GetClass() != 'Doom4Player')
			return;
			
		A_Overlay(Overlay_DashManager, "Overlay.ResetDash");
		A_OverlayFlags(Overlay_DashManager, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
		A_Stop();
			
		if (!bTHRUACTORS && FindInventory("PowerInvulnerable", true) && CountInv("D4PentagramUpgrade2"))
		{
			let it = BlockThingsIterator.Create(self);
			while (it.Next())
			{
				let targ = it.thing;
				if (!targ || !targ.bShootable || targ == self || targ.bNOTELEFRAG || 
					targ.bTHRUACTORS ||	(targ.bTHRUSPECIES && targ.species == species))
					continue;
				
				if (bNOTELESTOMP && !targ.bALWAYSTELEFRAG)
					continue;
				
				double blockdist = radius + targ.radius;
				if (abs(targ.pos.x - it.Position.X) >= blockdist || 
					abs(targ.pos.y - it.Position.Y) >= blockdist)
					continue;

				// Q: Make this z-aware for everything? It never was before.
				if (targ.pos.z + targ.height < pos.z || targ.pos.z > pos.z + height)
				{
					if (CurSector.PortalGroup != targ.CurSector.PortalGroup)
						continue;
				}
				
				targ.DamageMobj(self, self, TELEFRAG_DAMAGE, 'Telefrag');
			}
		}
	}
	
	States
	{
	Spawn:
		PLAY A -1 NoDelay
		{
			if (GetRealPlayer())
			{
				SetupOverlays(true);
			}
			else Species = "None";
		}
		Loop;
	//==========================================================================
	// Overlay:			Life Recorder
	// Records position, velocity, angle, and pitch every second for respawns.
	//==========================================================================
	Overlay.LifeRecorder:
		// When starting a new map, clear out the old data.
		M666 A 0 
		{
			if (health < 1)	return;
			for (int i = 0; i < LifePos.Size(); i++)
			{
				LifePos[i] = Pos;
				LifeVel[i] = Vel;
				LifeAP[i] = (Angle,Pitch);
			}
		}
		// Now pass each second along the arrays, except for the first
		// index (0). 
		M666 A 35
		{
			if (health < 1)	return;
			for (int i = LifePos.Size() - 1; i > 0; i--)
			{
				int j = i - 1;
				LifePos[i] = LifePos[j];
				LifeVel[i] = LifeVel[j];
				LifeAP[i] = LifeAP[j];
			}
			LifePos[0] = Pos;
			LifeVel[0] = Vel;
			LifeAP[0] = (Angle,Pitch);
		}
		Wait;
	//==========================================================================
	// Overlay:			Dash Manager
	// Deals with fast movement in a direction, horizontally.
	//==========================================================================
	Overlay.ResetDash:
		M666 A 0
		{
			DashTimer = 0;
			DashAngle = 0;
			return ResolveState("Overlay.DashManager");
		}
	Overlay.DashManager:
		M666 A 1
		{
			if (!player)	return ResolveState("Null");
			
			DashAngle = 0;
			
			// If we don't 
			if (!CountInv("D4Dash"))
			{
				DashTimer = 1;
				A_OverlayFlags(OverlayID(), PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
				A_SetTics(17);
				return ResolveState(null);
			}
			if (DashTimer > 0) 
				DashTimer--; // Still waiting.
			/*
			else if (DashTimer == 1)
			{
				if (bONMOBJ || pos.z <= GetZAt() || A_CheckFloor("Null") ||
					(player.cheats & (CF_FLY|CF_NOCLIP2)))
					DashTimer = 0; // Can dash.
			}
			*/
			else if (DashTimer == -1)
			{
				int btns = CurInputCmds;
				bool forward = (btns & BT_FORWARD);
				bool backward = (btns & BT_BACK);
				bool left = (btns & BT_MOVELEFT);
				bool right = (btns & BT_MOVERIGHT);
				if (forward || backward || left || right)
				{
					if (forward != backward && left != right)
					{
						if (forward)
						{
							DashAngle = 0;
							if (right != left)
								DashAngle += (left) ? 45 : -45;
							 
						}
						else
						{
							DashAngle = 180;
							if (right != left)
								DashAngle += (left) ? -45 : 45;
						}
					}
					else if (forward != backward || right != left)
					{
						if (forward != backward)
						{
							DashAngle = (backward) ? 180 : 0;
						}
						else if (right != left)
						{
							DashAngle = (left) ? 90 : -90;
						}
					}
					else
					{
						return ResolveState(null);
					}
					
					// Finally, check to make sure our desired angle isn't already
					// going the speed of stupid - NASCAR style. =B
					// Particularly, within 22.5 degrees.
					CurDashSpeed = FindInventory("PowerSpeed", true) ? DashSpeed * 1.5 : DashSpeed;
					if (Vel.XY.Length() > CurDashSpeed)
					{
						double VelAng = VectorAngle(vel.x, vel.y);
						DashAngle = Normalize180(DashAngle);
						if (AbsAngle(VelAng,DashAngle + Angle) < 22.5)
							return ResolveState(null);
					}
					DashTimer = 6;
					DashAngle += Angle;
					return ResolveState("Overlay.Dashing");
				}
				else DashTimer = 0;
			}
			return ResolveState(null);
		}
		Wait;
	Overlay.Dashing:
		M666 AAAAAA 1
		{
			if (health < 1)
				return ResolveState("Overlay.DashManager");
			double vz = Max(0.0, vel.z);
			CurDashSpeed = FindInventory("PowerSpeed", true) ? DashSpeed * 1.5 : DashSpeed;
			Vel3DFromAngle(CurDashSpeed, DashAngle, 0);
			vel.z = vz;
			
			return ResolveState(null);
		}
	Overlay.DashWait:
		M666 A 1
		{
			StateLabel next = "Overlay.DashManager";
			
			// If not teleported (xy will 0 out... I think), not on something 
			// and not blocked, keep boosting the player in the direction.
			if (health > 0 &&
				Vel.XY != (0,0) && waterlevel < 1 &&
				!bONMOBJ && !A_CheckFloor("Null") && !A_CheckCeiling("Null") &&
				!A_CheckBlock("Null",CBF_ABSOLUTEANGLE,AAPTR_DEFAULT,CurDashSpeed,0,0,DashAngle) &&
				!(player.cheats & (CF_FLY|CF_NOCLIP2)))
			{
				next = null;
				double vz = vel.z;
				Vel3DFromAngle(CurDashSpeed, DashAngle, 0);
				vel.z = vz;
			}
			return ResolveState(next);
		}
		Wait;
	//==========================================================================
	// Overlay:			Utility Items
	// Deals with grenades, flame thrower, etc.
	//==========================================================================
	Overlay.UtilityManager:
		M666 A 1
		{
			let plr = player;
			if (!plr)	return ResolveState("Null");
			
			if (health < 1)	return ResolveState(null);
			
			int OID = OverlayID();
			A_OverlayFlags(OID, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
			A_OverlayOffset(OID, -CannonArmX, -CannonArmY, WOF_INTERPOLATE);
			
			if (!GetSelectedEquipment())
			{
				A_SetInventory("FlameThrowerPickup",1);
				let gren = D4DGrenadeItem(FindInventory("FlameThrowerPickup"));
				if (gren)	gren.Selected = true;
			}
			
			if (CheckEquipmentButton())
			{
				int ready = CheckEquipmentCharge(true);
				if (ready > 0)
				{
					let gren = GetSelectedEquipment();
					if (gren)
					{
						gren.TakeCharge();
						GrenadeToFire = gren.Grenade;
						return ResolveState("DeployCannon");
					}
					
					// Shouldn't happen, but just in case.
					D4Msg.PrintStatus(D4Msg.NoEquip);		// No equipment available
					A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				}
				else
				{
					D4Msg.PrintStatus(D4Msg.EquipNotReady); // Equipment not ready
					A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				}
				
			}
			return ResolveState(null);
		}
		Loop;
	JustDrop:	// Simply drop in front of the player. 
		M666 A 1
		{
			Vector3 origin = Vec3Angle(radius * 2, angle, 0);
			if (!level.IsPointInLevel(origin))
				origin = pos;
				
			let gren = Spawn(GrenadeToFire, origin, ALLOW_REPLACE);
			if (gren)
			{
				gren.A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
				gren.master = self;
				gren.target = self;
				gren.angle = angle;
				gren.SetOrigin(origin, false);
			}
			
		}
		Goto Overlay.UtilityManager;
	DeployCannon: // Extend the cannon into view.
		M201 A 1 
		{
			int OID = OverlayID();
			double divisor = 2.0;
			double offx = (CannonArmX / divisor);
			
			if (OverlayX(OID) + offx >= 0)
				return ResolveState("LaunchGrenade");
			
			
			double offy = (CannonArmY / divisor);
			A_OverlayOffset(OID, offx, offy, WOF_ADD|WOF_INTERPOLATE);
			return ResolveState(null);
		}
		Wait;
	LaunchGrenade: // Lob the grenade.
		M201 A 12
		{
			A_OverlayOffset(OverlayID(), 0, 0, WOF_INTERPOLATE);
			if (health > 0 && GrenadeToFire)
			{
				Vector3 px, py, pz, origin;
				double OffsetForward = -1.0;
				double OffsetRight = -15.0;
				double OffsetUp = 5.0;
				[px, py, pz] = MC_CoordUtil.GetAxes(Pitch,Angle,Roll);
				
				origin = Vec2OffsetZ(0,0,player.viewz) + 
					OffsetForward * px + OffsetRight * py + OffsetUp * pz;
				
				let gren = Spawn(GrenadeToFire, origin, ALLOW_REPLACE);
				if (gren)
				{
					gren.A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
					gren.master = self;
					gren.target = self;
					gren.angle = angle;
					gren.Vel3DFromAngle(gren.speed, angle, pitch);
				}
			}
		}
	RetractCannon:
		M201 A 1 
		{
			int OID = OverlayID();
			double divisor = 2.0;
			double offx = (CannonArmX / divisor);
			double offy = (CannonArmY / divisor);
			if (OverlayX(OID) - offx <= CannonArmX)
			{
				return ResolveState(1);
			}
			A_OverlayOffset(OID, -offx, -offy, WOF_ADD|WOF_INTERPOLATE);
			return ResolveState(null);
		}
		Wait;
		M201 A 1 A_OverlayOffset(OverlayID(), -CannonArmX, -CannonArmY, WOF_INTERPOLATE);
		Goto Overlay.UtilityManager;
	
	//==========================================================================
	// Overlay: 		Gun Shifting (WIP)
	// Offsets the weapon whenever turning the camera angle/pitch.
	//==========================================================================
	// (Currently buggy with firing weapons. Needs more fine tuning.)
	Overlay.AnglePitch:
		M666 A 1
		{
			if (GetCvar("D4D_TurningBehavior"))
			{
				if (abs(UOffsets) < 10.0)
				{
					UOffsets += (GetPlayerInput(INPUT_YAW) / 32767.0) * 10.0;
					//A_LogFloat(UOffsets);
				}
				if (UOffsets != 0.0)
				{
					if (UOffsets < 1.0 && UOffsets > -1.0)
					{
						A_WeaponOffset(UOffsets,0,WOF_ADD);
						UOffsets = 0;
					}
					else if (UOffsets < 0.0)
					{
						A_WeaponOffset(UOffsets,0,WOF_ADD);
						UOffsets += 1.0;
					}
					else if (UOffsets > 0.0)
					{
						A_WeaponOffset(UOffsets,0,WOF_ADD);
						UOffsets -= 1.0;
					}
				}
			}
			else
			{	A_SetTics(35);	}
		}
		Loop;
	Overlay.LedgeGrab:
	//	M666 A 1 ;
		M666 A 1
		{
			int waitTics = 14;
			if (!player || !GetCvar("D4D_AllowClimbing"))
			{
				A_SetTics(waitTics);
			}
			else
			{
				// Do not attempt to ledge grab if...
				if (player.onground ||				// Player's on the ground
					pitch >= 0 || 					// Looking down
					vel.XY dot vel.XY > (4 ** 2) ||	// Moving too fast
					!(CurInputCmds & BT_FORWARD))		// Not trying to move forward
				{
					MaxStepHeight = Default.MaxStepHeight;
				}
				else
				{
					MaxStepHeight = 72;
				}
				return;
				/*
				if (D4D_Utility.GetLedgeOffset(self))
				{
					vel.z = 0;
					A_Stop();
					A_SetTics(waitTics);
				}
				*/
			}
		}
		Loop;
	See:
		PLAY ABCD 4 ;
		Loop;
		
	Missile:
		PLAY E 1;
	MissileCont:
		PLAY E 11;
		Goto Spawn;
	Melee:
		PLAY F 1 BRIGHT light("PlayerLight1");
	MeleeCont:
		PLAY F 1 bright light("PlayerLight2");
		PLAY F 1 bright light("PlayerLight3");
		PLAY F 1 bright light("PlayerLight4");
		PLAY F 1 bright light("PlayerLight5");
		PLAY F 1 bright light("PlayerLight6");
		Goto MissileCont;
	
	Pain:
		PLAY G 8 ;
		Goto Spawn;
	Death:
		PLAY H 0 
		{
			if (A_PlayerSkinCheck("AltSkinDeath"))
			{	return ResolveState("AltSkinDeath");	}
			return ResolveState("Death1");
		}
	Death1:
		PLAY H 10;
		PLAY I 10 A_PlayerScream;
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 0 
		{
			if (A_PlayerSkinCheck("AltSkinXDeath"))
			{	return ResolveState("AltSkinXDeath");	}
			return ResolveState("XDeath1");
		}
	XDeath1:
		TNT1 A 1 A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR);
		TNT1 A 1 A_XScream();
		TNT1 A 1 A_NoBlocking();
		TNT1 A -1;
		Stop;
	AltSkinDeath:
		TNT1 A 1 A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR);
		TNT1 A 1 A_PlayerScream;
		TNT1 A 1 A_NoBlocking();
		TNT1 A -1;
		Stop;
	AltSkinXDeath:
		TNT1 A 0 A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR);
		TNT1 A 1 A_PlayerScream;
		TNT1 A 0 A_NoBlocking();
		TNT1 A 1 A_SkullPop;
		TNT1 A -1;
		Stop;
	}
}

Class NewMapToken : Inventory
{	Default { Inventory.InterhubAmount 0; } }

Class Climbing : Inventory {}
Class RlyClimb : Inventory {}

extend class Doom4Player
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (!GetRealPlayer())
			return;
		
		
		if (self.GetClass() == "Doom4Player")
		{
			/*
			ItemsToSave ITS;
			ITS.Init();
			
			What is the point behind this? Simple. It gives
			and takes an inventory item so that it's technically 'present'
			yet at the same time acts as if it's not there, preventing it from
			being used.
			
			Why is it necessary? Because the upgrade menu cannot work without
			them. Each upgrade has a price attached to it (see Upgrades.txt)
			along with pre-requisites. This absolutely must be done or else
			the menu won't work.
			
			But this is only necessary for items that are not already present
			in the player's inventory. If they already are, it's obviously not
			in need of depleting. We just need to make sure they have the
			item available for the menu to read it, as it calls FindInventory
			which won't return null thanks to KEEPDEPLETED -- even if the 
			quantity is 0. Which is perfect.
			
			tl;dr the item's there for the menu while not being active until
			the player has 1+, nuff sed
			*/
			
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				bool doContinue = false;
				Class<UpgradeItem> Type = (Class<UpgradeItem>)(AllActorClasses[i]);
				
				if (D4DHandler.IsUpgradeBlacklisted(Type))
					continue;
					
				if (!CountInv(Type))
				{
					A_SetInventory(Type,1);
					A_SetInventory(Type,0);
				}
				
			}
			stamina = 0;
			A_SetHealth(100);
		}
	}
	
	
	
	
	
	//==========================================================================
	//
	//
	//
	//==========================================================================
	
	// [Gutawer]
	// I can never get the ** operator to actually work, so i'm using a function to do it
	double pow(double base, double power) { return exp(power * log(base)); }
	double effectSize;
	int PentaNoiseWait;
	
	//--------------------------------------------------------------------------
	// Damage Control
	//--------------------------------------------------------------------------
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		// Voodoo doll, or morphed.
		if (!player || !player.mo || player.mo != self)
		{
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		}
		
		// There is one tic after morphing where the player is vulnerable before
		// they receive their temporary invul. Negate all damage for that tic.
		if ((player.cheats & CF_GODMODE2) ||
			(player.mo == self && HPArmor))	
			return -1;
			
		// Immune to barrels with the right upgrades. This is already present on
		// the ProtectionBonus1 item itself but just in case someone tries bypassing,
		// make sure the Slayer truly is protected.
		if (damage > 0 && CountInv("ProtectionBonus1") && (
			(source && (source is 'ExplosiveBarrel' || GetReplacee(source.GetClass()) is 'ExplosiveBarrel')) ||
			(inflictor && (inflictor is 'ExplosiveBarrel' || GetReplacee(inflictor.GetClass()) is 'ExplosiveBarrel'))))
		{
			return -1;
		}
		
		bool TelefragDamage = (!bLAXTELEFRAGDMG && damage >= TELEFRAG_DAMAGE);
		bool IsInvul = (FindInventory("PowerInvulnerable", true) || bINVULNERABLE);
		
		if (TelefragDamage)
		{
			if (bNODAMAGE || (IsInvul && CountInv("D4PentagramUpgrade4")))
				TelefragDamage = false;
		}
		if (!TelefragDamage && (player.cheats & CF_GODMODE) && !(flags & DMG_FORCED))
			return -1;
			
		// Shield wall needs some special circumstance handling here. We need
		// to block explosion damage since this is supposed to effectively act
		// like map geometry. And rails.
		if (ShieldWall && (inflictor || source) && (flags & (DMG_EXPLOSION|DMG_INFLICTOR_IS_PUFF)))
		{
			Actor attacker = inflictor;
			if (!attacker || (flags & DMG_INFLICTOR_IS_PUFF))	
				attacker = source;
				
			if (attacker.pos != pos)
			{
				Vector3 end = pos; end.z += height * 0.5;
				Vector3 start = attacker.pos; start.z += attacker.height * 0.75;
				Vector3 dir = level.Vec3Diff(start, end);
				double len = dir.Length();
				dir = dir.Unit();
				if (!ShieldChecker)	ShieldChecker = new('D4ShieldWallTracer');
				
				ShieldChecker.Target = self;
				if (ShieldChecker.Trace(start, attacker.cursector, dir, len, 0))
				{
					// Hidden by the shield.
					if (ShieldChecker.Results.HitType == TRACE_HitActor &&
						ShieldChecker.Results.HitActor is 'D4ShieldWallBarrier')
						return -1;
				}
			}
		}
		
		// Can't touch dis.
		if (CountInv("CantTouchThis"))
		{
			bNODAMAGE = true;
			flags &= ~DMG_FORCED;
			damage = Clamp(damage, 0, TELEFRAG_DAMAGE - 1);
			TelefragDamage = false;
		}
		
		// Handle Pentagram of Protection effects here. Pretty much a copy/pasta
		// of the internal damage, including thrusting since it's needless to call
		// P_DamageMobj.
		
		if ((!TelefragDamage && IsInvul) || bNODAMAGE)
		{
			// Mainly just doing this to play the sound effect of the pentagram.
			damage = GetModifiedDamage(mod, damage, true);
			if (damage > 0 && !(flags & DMG_NO_FACTOR))
				damage = ApplyDamageFactor(mod, damage);
			
			flags |= (DMG_NO_PROTECT|DMG_NO_FACTOR);
		
			if (damage < 1 && (!inflictor || (!inflictor.bCAUSEPAIN && !bALLOWPAIN)))
				return 0;
				
			if (CountInv("D4PentagramUpgrade3") && mod != 'Reflection' && damage > 0)
			{
				// Make sure never to do this to self! Otherwise, infiniloops happen.
				// Doze are bad. Weally weally bad. :(
				
				bool nts = false;
				Actor who = null;
				if (source && source != self && (source.bSHOOTABLE || source.bVULNERABLE))
					who = source;
				else if (inflictor && inflictor != self && (inflictor.bSHOOTABLE || inflictor.bVULNERABLE))
					who = inflictor;
				
				if (who)
				{
					nts = who.bNOTARGETSWITCH;
					if (who.target && who.target.health > 0) 
						who.bNOTARGETSWITCH = true;
					who.DamageMobj(self, self, Max(1,damage * 0.2), "Reflection");
					who.bNOTARGETSWITCH = nts;
				}
			}
			
			DamageTypeReceived = "WhiteFlashDamage";
			player.DamageCount = Clamp(player.DamageCount + int(damage * 0.5), 0, 100);
			return 0;
		}
		
		
		// Don't negate stuff if it's telefrag damage, unless LAXTELEFRAGDMG is used.
		if (!TelefragDamage)
		{
			// Reduce by 1% for every megasphere we've picked up.
			// DoomDoll does not give this bonus. This is calculated separately
			// from damage protection effects and cannot be pierced unless by
			// telefrag damage.
			damage = AdjustMegasphereDamage(damage);
		}
		
		
		// Make sure armor always takes the damage itself.
		int ArmorBefore = 0, ArmorAfter = 0;
		let arm = BasicArmor(FindInventory("BasicArmor"));
		if (arm && arm.Amount > 0)	
		{
			arm.SavePercent = 1.0;
			ArmorBefore = arm.Amount;
		}
		
		// Prevent powerups like quad damage from hurting the player more than
		// normal. Otherwise this makes rocket jumping a pain in the ass.
		// Also, disable armor piercing because it's effectively a second skin.
		if (inflictor)
		{
			inflictor.bPIERCEARMOR = false;
			if (inflictor == self || inflictor.target == self)
				flags |= DMG_NO_ENHANCE;
		}
		if (source)
		{
			if (source == self)		flags |= DMG_NO_ENHANCE;
			else source.bPIERCEARMOR = false;
		}	
		flags &= ~DMG_NO_ARMOR;
		int finaldamage = damage;
		
		// Disable targeting the player by mishaps. Make sure the damager is alive
		// but dont bother if they don't want to change anyway or they're already
		// targeting the player. This flag will be reset after the main function
		// is called, which will handle reflect damage.
		Actor who = null;
		if (FindInventory("PowerReflection", true) && 
			source && source != self && source.health > 0 && !source.bNOTARGETSWITCH && 
			source.target && source.target != self && source.target.health > 0)
		{
			who = source;
			who.bNOTARGETSWITCH = true;
		}
		
		// Don't consume extra lives inside of a sector meant to end the level,
		// or the player has buddha (doom doll), provided they can survive it.
		// Otherwise, respawn the player if they were to die and consume a life.
		if (UseLives && !FindInventory("PowerMorph",true) && 
			CountInv("D4ExtraLife") > 0 && !(CurSector.Flags & Sector.SECF_ENDLEVEL))
		{
			int prev = health;
			finaldamage = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
			
			// If the player still has health due to regular buddha or flag buddha,
			// don't use the life since they're still alive. Cheat buddha is
			// exempt from this and will still consume lives, since it's a cheat.
			if (finaldamage >= prev && health > 0 && !FindInventory("PowerBuddha", true) && !bBUDDHA)
			{
				UseLife();
			}
		}
		else finaldamage = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		
		if (who)	who.bNOTARGETSWITCH = false;
		if (arm)	ArmorAfter = arm.Amount;
		
		
		
		// Damage done, now deal with the consequences.
		
		// This is needed in the event armor absorbs the damage. Otherwise this
		// won't trigger, and neither will the damage indicators.
		// But this is only if the armor absorbs it all. Damage to the player
		// himself is automatically handled via the event handler
		DamageScreenEffects(finaldamage, ArmorBefore, ArmorAfter); // Shader effects
		int ArmorTaken = (ArmorBefore - ArmorAfter);
		if ((source || inflictor) && finaldamage < 1 && ArmorTaken > 0)
		{
			if (!Event)	Event = D4DHandler.Fetch();
			Event.AddDamageIndicator(source, inflictor, self, finaldamage);
		}
		
		if (GetClass() == 'Doom4Player')
		{
			if (PainTimer < 1 && health > 0 && (ArmorTaken > 0 || finaldamage > 0))
			{
				if (ArmorAfter <= 0)	A_StartSound("Eternal/Player/Pain", CHAN_VOICE, CHANF_OVERLAP);
				else					A_StartSound("Eternal/Player/PainSmall", CHAN_VOICE, CHANF_OVERLAP);
				PainTimer = 17;
			}	
			if (health <= 40)
			{
				if (!LowHP)
				{
					A_StartSound("Doom4/Player/LowHealth", CHAN_VOICE ,CHANF_OVERLAP);
					LowHP = true;
				}
			}
		}
		else
			LowHP = false;
		
		return finaldamage;
	}
	private int PainTimer;
	int AdjustMegasphereDamage(int damage)
	{
		let inv = FindInventory("D4MegasphereDamageReducer");
		if (inv)
		{
			int pc1 = Clamp(inv.Amount, 0, inv.MaxAmount);
			if (pc1 > 0)
			{
				double dmg = Max(0,damage * (1.0 - (0.01 * pc1)));
				damage = int(floor(dmg));
			}
		}
		return damage;
	}
	
	void DamageScreenEffects(int damage, int ArmorBefore, int ArmorAfter)
	{
		if (health < 1)
		{
			effectSize = 0;
			Shader.SetEnabled(player, "damageshader", false);
			return;
		}
		if (damage > 0)
		{
			effectSize += log(damage) / 25.0;
			
			Cvar CV = Cvar.GetCvar('D4D_BloodScreen', player);
			if (CV && CV.GetBool())
				ACS_NamedExecuteAlways("Blood",0, int(damage / DamageDegree),0,0);
		}
		else if (ArmorBefore > ArmorAfter)
		{
			effectSize += log(ArmorBefore - ArmorAfter) / 25.0;
		}
	}
	
	//==========================================================================
	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		if (!player || !player.mo || player.mo != self || FindInventory("PowerMorph", true) ||
			player.mo.GetClass() != 'Doom4Player')
		{	Super.Die(source, inflictor, dmgflags);		return;		}
		
		// If the player has an extra life, abort dying.
		if (UseLife())	return;
		
		Super.Die(source, inflictor, dmgflags);
		
		A_RadiusGive("SyphonDestroyer",16386,RGF_MISSILES,1,"D4SyphonGrenade");
		for (int i = 1; i < 9; i++)
			A_StopSound(i);
	}
	
	//==========================================================================
	// Consumes a life if the player is about to die and 'respawns' them with
	// full health. Returns true if the life was successfully used or if they're
	// still protected via respawn.
	// This effect works through any means that attempts to kill the player:
	// Telefragging, forced damage, you name it, it will still trigger it.
	//==========================================================================
	protected bool UseLife()
	{
		if (!player || !UseLives)
			return false;
		int LifeCount = CountInv("D4ExtraLife");
		if (LifeCount > 0 || CountInv("D4ExtraLifeProtection"))
		{
			if (health < GetMaxHealth(true))
			{
				health = GetMaxHealth(true);
				player.health = health;
			}
			
			if (CountInv("D4ExtraLifeProtection"))
				return true;
			
			A_GiveInventory("Invul5s",1);
			A_GiveInventory("D4ExtraLifeProtection");
			A_SetInventory("LifeRedFlash", LifeCount, beyondMax: true);
			A_TakeInventory("D4ExtraLife",1);
			int LastIndex = LifePos.Size() - 1;
			bool good = false;
			bool thru = bTHRUACTORS;
			Vector3 lpos = pos;
			
			// Iterate through each position. See if it's blocked or not.
			for (int i = LastIndex; i > -1; i--)
			{
				if (TeleportMove(LifePos[LastIndex], bTELESTOMP))
				{
					bTHRUACTORS = true;
					good = !(A_CheckBlock("Null"));
				}
				bTHRUACTORS = thru;
				if (good)		break;
			}
			
			// If none of the previous spots work, see if anything is blocking
			// the player where they stand, ignoring all actors. If so,
			// force them back to the spawn point.
			if (!good)
			{
				bTHRUACTORS = true;
				good = !(A_CheckBlock("Null"));
				bTHRUACTORS = thru;
				if (!good)
				{
					good = true;
					TeleportMove(SpawnPoint, true);
					SetOrigin(SpawnPoint, false);
				}
			}
			
			bTHRUACTORS = thru;
			
			if (good)
			{
				Vel = LifeVel[LastIndex];
				Angle = LifeAP[LastIndex].X;
				Pitch = LifeAP[LastIndex].Y;
				Actor fr = Spawn(TeleFogSourceType, lpos, ALLOW_REPLACE);
				Actor to = Spawn(TeleFogDestType, pos, ALLOW_REPLACE);
				if (fr)	fr.target = self;
				if (to)	to.target = self;
			}
			A_Overlay(Overlay_LifeRecorder, "Overlay.LifeRecorder"); // Reset all the data.
			return true;
		}
		return false;
	}
	
	//==========================================================================
	override bool CanCollideWith (Actor other, bool passive)
	{
		if (!passive)
		{
			// Death Bringer's Shadow allows passing through enemies when invulnerable.
			if (FindInventory("PowerInvulnerable",true) && 
				CountInv("D4PentagramUpgrade2") && 
				other.bISMONSTER)
				return false;
			
		}
		else
		{
			if (other.FindInventory("PowerInvulnerable", true) &&
				other.CountInv("D4PentagramUpgrade2"))
				return false;
		}
		return true;
	}
	
	//--------------------------------------------------------------------------
	//
	// Start-up
	//
	//--------------------------------------------------------------------------
	
	bool started;
	
	void InitPlayer()
	{
		if (!started) 
		{
			A_SetInventory("FlameThrowerPickup",1);
		//	if (GetCvar("skill") >= 3)
		//	{
				if (GetCvar("D4D_NMGrenades") >= 1) // Give and select frag if the setting isn't "Off" 
				{
					if (!CountInv("FragGrenadePickup"))
					{	
						A_SetInventory("FragGrenadePickup",1);
						SelectEquipment("FragGrenadePickup");
					}
				}
				if (GetCvar("D4D_NMGrenades") >= 2) // Give the rest and select syphon if the setting is "All"
				{
					if (!CountInv("HoloGrenadePickup"))
					{
						A_GiveInventory("HoloGrenadePickup",1);
					}
					if (!CountInv("SyphonGrenadePickup"))
					{   
					//	A_GiveInventory("GrenadeSelectedStripper",1); //Just in case
						A_SetInventory("SyphonGrenadePickup",1);
					}
					SelectEquipment("SyphonGrenadePickup");
				}
		//	}
		}
		started = true;
		
		//A_SetInventory("D4MultiJump",int(GetCvar("D4MultiJump")));
		UOffsets = UjumpsDone = 0;
		LowHP = false;
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------
	//
	// Active Functions
	//
	//--------------------------------------------------------------------------
	
	
	
	override void Tick()
	{
		Super.Tick();
		
		let player = self.player;
		if (!player || !player.mo || player.mo != self || health < 1 || level.mapname == 'TITLEMAP')	
		{
			CurInputCmds = 0;
			OldInputCmds = 0;
			return;
		}
		if (PainTimer > 0)	PainTimer--;
		OldInputCmds = CurInputCmds;
		CurInputCmds = GetPlayerInput(MODINPUT_BUTTONS);
		//======================================================================
		// Case sensitivity is important here for the shader strings, i.e. "damageFactor"
		if (effectSize > 0) 
		{
			Shader.SetEnabled(player, "damageshader", true);
			Shader.SetUniform1f(player, "damageshader", "damageFactor", effectSize);
		}
		else Shader.SetEnabled(player, "damageshader", false);
		
		double returnSpeed = 0;
		if (effectSize != 0) returnSpeed = pow(0.01, 1/(effectSize * 5));
		if (returnSpeed < 0.01) returnSpeed = 0.01;
		
		effectSize -= returnSpeed;
		effectSize = clamp(effectSize, 0, 0.5);
		//======================================================================
		
		if (player && player.onground)
		{
			UjumpsDone = 0;
		}
		if (PentaNoiseWait > 0)	PentaNoiseWait--;
		if (level.maptime <= 1)	InitPlayer();
		
		SetInventory("LifeRedFlash",0);
		
		//----------------------------------------------------------------------
		
	}
	
	//----------------------------------------------------------------------------
	//
	// PROC P_CheckJump
	//
	//----------------------------------------------------------------------------
	override void CheckJump()
	{
		let player = self.player;
		// [RH] check for jump
		if (CurInputCmds & BT_JUMP)
		{
			if (player.crouchoffset != 0)
			{
				// Jumping while crouching will force an un-crouch but not jump
				player.crouching = 1;
			}
			else if (waterlevel >= 2)
			{
				Vel.Z = 4 * Speed;
				UjumpsDone = 1;
			}
			else if (bNoGravity)
			{
				Vel.Z = 3.;
				UjumpsDone = 1;
			}
			else if (level.IsJumpingAllowed())
			{
				if (player.onground || pos.z <= floorz)
				{				
					// Regular jump
					// [MC] Ignore jumpTics as you can bunny hop in Doom 2016.
					if (player.jumpTics >= 0)
					{
						UjumpsDone = 1;
						double jumpvelz = JumpZ * 35 / TICRATE;
						double jumpfac = 0;

						// [BC] If the player has the high jump power, double his jump velocity.
						// (actually, pick the best factors from all active items.)
						for (let p = Inv; p != null; p = p.Inv)
						{
							let pp = PowerHighJump(p);
							if (pp)
							{
								double f = pp.Strength;
								if (f > jumpfac) jumpfac = f;
							}
						}
						if (jumpfac > 0) jumpvelz *= jumpfac;

						Vel.Z += jumpvelz + (CountInv("D4HigherJump") * 1.5);
						bOnMobj = false;
						player.jumpTics = -1;
						if (!(player.cheats & CF_PREDICTING)) 
						{
							A_PlaySound("*jump", CHAN_BODY);
						}
					}
				}
				else if (GetClass() == 'Doom4Player' && 
					GetCvar("D4D_MultiJump") && 
					(UjumpsDone < CountInv("D4MultiJump") - 1) && 
					!(OldInputCmds & BT_JUMP))
				{
					if (Vel.Z < 0.0)	Vel.Z = 0.0;
						
					Vel.Z += 8.2 + (CountInv("D4HigherJump") * 1.5);
					UjumpsDone++;
					A_PlaySound("Doom4/Player/DoubleJump");
				}
			}
		}
	}
	
	override void MovePlayer()
	{
		Super.MovePlayer();
		if (GetClass() == 'Doom4Player')
		{
			let plyr = self.player;
			if (plyr)
			{
				if (CountInv("D4AirControl") && !plyr.onground)
				{
					int gpi = CurInputCmds;
					
					if (gpi & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT))
					{
						A_ChangeVelocity(
						((gpi & BT_FORWARD  ) ? .8 : 0) - 
						((gpi & BT_BACK     ) ? .8 : 0),
						((gpi & BT_MOVELEFT ) ? .8 : 0) -
						((gpi & BT_MOVERIGHT) ? .8 : 0),
						0,CVF_RELATIVE);
						
						vel.XY *= 0.95;
					}
				}
			}
		}
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
	void TryDash()
	{
		if (!DashTimer && health > 0)	DashTimer = -1;
	}
}

/*==============================================================================



==============================================================================*/
