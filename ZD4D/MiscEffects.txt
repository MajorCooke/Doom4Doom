Class TracerFXToken : Inventory 
{
	Default 
	{
		Inventory.MaxAmount 5;
		Inventory.InterhubAmount 5;
	}
}

Class D4DFX : Actor
{
	double RollAmt;
	double AutoRollMin, AutoRollMax;
	bool AutoRollFlip, RandomRoll, RandomScaleFlip;
	Property AutoRoll: AutoRollMin, AutoRollMax, AutoRollFlip;
	Property RandomRoll: RandomRoll;
	Property RandomScaleFlip: RandomScaleFlip;
	Default 
	{
		D4DFX.AutoRoll 0, 0, false;
		D4DFX.RandomRoll false;
		D4DFX.RandomScaleFlip false;
		+NOINTERACTION
		+NOBLOCKMAP
		Radius 1;
		Height 1;
	}
	
	override void BeginPlay()
	{
		ChangeStatNum(Thinker.STAT_USER);
		Super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		RollAmt = frandom[rng](AutoRollMin, AutoRollMax);
		if (AutoRollFlip)
			RollAmt * frandompick[rng](-1.0, 1.0);
		if (RandomRoll)
			Roll = random[rng](0,359);
		if (RandomScaleFlip && random(0,1))
			bSPRITEFLIP = true;
	}
	
	override void Tick()
	{
		if (IsFrozen())
			return;
		
		if (bROLLSPRITE && RollAmt != 0.0)
			A_SetRoll(Roll + RollAmt, SPF_INTERPOLATE);
		Super.Tick();
	}
	
	// Rotates the vector around (0,0,0). Like Earth orbiting the Sun.
	static Vector3 RotateVector3D(Vector3 vec, double angle, double Pitch = -360.0)
	{
		Vector2 rot;
		if (Pitch > -270.0)
		{
			rot = (vec.x, vec.z);
			rot = RotateVector(rot, -Pitch);
			vec = (rot.x, vec.y, rot.y);
		}
		rot = (vec.x, vec.y);
		rot = RotateVector(rot, angle);
		return (rot.x, rot.y, vec.z);
	}
}


//---------------------------------------------------------------
//---------------------------------------------------------------
//		Explosions
//---------------------------------------------------------------
//---------------------------------------------------------------

Class D4RocketExplosionFire : D4DFX
{
	Default
	{
		D4DFX.RandomRoll true;
		D4DFX.RandomScaleFlip true;
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+BRIGHT
		Scale 1.15;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		X207 ABCDEFGHIJKLMN 1;
		X207 OPQRSTUVWXY random(1,3);
		Stop;
	}
}

Class D4RocketExplosion : D4DFX 
{
	int FlameMin, FlameMax;
	Property Flames: FlameMin, FlameMax;
	Default 
	{
		D4RocketExplosion.Flames 3, 6;
		D4DFX.RandomRoll true;
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+INVISIBLE
		+BRIGHT
		Scale 1.15;
	}
	
	void SpawnExplosionFire()
	{
		A_SpawnItemEx("D4RocketExplosionFire", flags: SXF_NOCHECKPOSITION);
		int count = Max(0,random(FlameMin,FlameMax));
		for (int i = 0; i < count; i++)
		{
			Actor fire; bool a;
			[a, fire] = A_SpawnItemEx("D4RocketExplosionFire", 0, 0, 0, 0, 0, 0, random(0,359), SXF_NOCHECKPOSITION);
			if (a && fire)
			{
				fire.pitch = random(-90, 90);
				fire.Scale = Scale;
				fire.Vel3DFromAngle(frandom(0.1, 1.0), fire.angle, fire.pitch);
			}
		}
	}
	
	States
	{
	Spawn:
		TNT1 AA 1 NoDelay Light("YellowBigPoint3") NoDelay SpawnExplosionFire();
		TNT1 A 2 Light("YellowBigPoint3");
		TNT1 A 4 Light("YellowMediumPoint1");
		TNT1 A 2 Light("YellowMediumPoint2");
		TNT1 A 2 Light("YellowMediumPoint3");
		TNT1 A 2 Light("YellowSmallPoint1");
		TNT1 A 2 Light("YellowSmallPoint2");
		TNT1 A 2 Light("YellowSmallPoint3");
		Stop;
		
		
	}
}


Class D4RocketExplosionNoGL : D4RocketExplosion 
{
	States
	{
	Spawn:
		TNT1 AA 1 NoDelay SpawnExplosionFire();
		Stop;
	}
}

Class D4RocketExplosionSmoke : Actor 
{
	double user_add;
	Default 
	{
		+ROLLSPRITE
		+CLIENTSIDEONLY
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Alpha 0.5;
		Scale 0.7;
		RenderStyle "Translucent";
	}
	
	override void BeginPlay()
	{
		Destroy();
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_add = frandom(-3.0,3.0);
			A_SetRoll(random(0,359));
			return A_Jump(256,1,2,3,4);
		}
		X037 ABCD 0 { return ResolveState("Act"); }
	Act:
		"####" "#" 1
		{
			A_SetRoll(roll + user_add, SPF_INTERPOLATE);
			A_FadeOut((0.023 / 3.0));
			A_ScaleVelocity(0.986);
			A_SetScale(Scale.X+0.01);
		}
		Loop;
	}
}

Class ExplosionWaveMedium : Actor 
{
	Default 
	{
		RenderStyle "Add";
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.3;
		Alpha 0.6;
	}
	States
	{
	Spawn:
		DB14 AAAA 1 Bright 
		{
			//A_FadeOut(0.06);
			A_SetScale(Scale.X+0.35,Scale.Y+0.35);
		}
		DB14 AAAA 1 Bright 
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X+0.15,Scale.Y+0.15);
		}
		DB14 AAAA 1 Bright 
		{
			A_FadeOut(0.06);
			A_SetScale(Scale.X+0.05,Scale.Y+0.05);
		}
		Wait;
	}
}

// It's funny because Michaelis didn't implement this. I, Major Cooke, did.
Class SovietToken : Inventory	{ Default { Inventory.InterhubAmount 1; +INVENTORY.UNDROPPABLE +INVENTORY.UNTOSSABLE } }
Class SovietActive : Inventory	{ Default { Inventory.InterhubAmount 1; +INVENTORY.UNDROPPABLE +INVENTORY.UNTOSSABLE } }
//---------------------------------------------------------------
//		Puff
//---------------------------------------------------------------

Class D4BulletPuff : Actor //replaces BulletPuff
{
	Default 
	{
		+CLIENTSIDEONLY
		+NOINTERACTION
		+PUFFGETSOWNER
		+PUFFONACTORS
		+FORCEXYBILLBOARD
		+HITTRACER
		+ALWAYSPUFF
		+ROLLSPRITE
		Scale 0.25;
		Decal "BulletChip";
	}
	States
	{
	Spawn:	//non bleeder
		TNT1 A 0 NODELAY
		{
			bSPRITEFLIP = random(0,1);
			roll = random(0,359);
			if (!random(0,2))
			{
				A_PlaySound("Doom4/Other/BulletHitConcrete",CHAN_AUTO,0.75,0,4);
			}
		}
		TNT1 A 0 
		{
/*			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("BulletPuffParticle",0,0,0,frandom(-2,2),-0.2,frandom(-0.5,0.4),random(1,360),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BulletPuffParticle",0,0,0,frandom(-2,2),-0.2,frandom(-0.5,0.4),random(1,360),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BulletPuffParticle",0,0,0,frandom(-2,2),-0.2,frandom(-0.5,0.4),random(1,360),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BulletPuffParticle",0,0,0,frandom(-2,2),-0.2,frandom(-0.5,0.4),random(1,360),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BulletPuffParticle",0,0,0,frandom(-2,2),-0.2,frandom(-0.5,0.4),random(1,360),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BulletPuffParticle",0,0,0,frandom(-2,2),-0.2,frandom(-0.5,0.4),random(1,360),SXF_NOCHECKPOSITION);
			}*/
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnParticle("FF9100",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,2),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("FF9933",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,2),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("FFEBDB",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,2),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("EBA121",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,2),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
			}
		}
		Goto Choose;
		
	Choose:
		TNT1 A 0 A_Jump(256,"Type1","Type2");
	Type1:
		DB12 A 1 Light("YellowSmallPoint4") Bright;
		DB12 B 1 Light("YellowSmallPoint4") Bright;
		DB12 C 1 Light("YellowSmallPoint5") Bright;
		DB12 DEFGHIJKLMNOPQRS 1;
		DB12 T 1 A_FadeOut();
		Wait;
	Type2:
		DB13 A 1 Light("YellowSmallPoint4") Bright;
		DB13 B 1 Light("YellowSmallPoint4") Bright;
		DB13 C 1 Light("YellowSmallPoint5") Bright;
		DB13 DEFGHIJKLMNOPQRS 1;
		DB13 T 1 A_FadeOut();
		Wait;
		
		
	Xdeath:	//hit bleeding actor
		TNT1 A 0 
		{
			if(random(1,2)==2)
			{
				A_PlaySound("Doom4/Other/BulletHitFlesh",CHAN_AUTO,1.0,0/*,4*/);
			}
		}
		TNT1 A 10;
		Stop;
	}
}

Class D4BulletPuffExtreme : D4BulletPuff
{
	Default
	{
		+EXTREMEDEATH
	}
}

Class D4BulletPuffGibDistance : D4BulletPuff
{
	double Range;
	bool RandomDamage;
	Property Range: Range;
	Property RandomDamage: RandomDamage;
	Default
	{
		D4BulletPuffGibDistance.RandomDamage true;
		D4BulletPuffGibDistance.Range 192;
		+HITTRACER
		+PUFFGETSOWNER
		Damage 9;
		DamageType "HitScan";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
			
		if (tracer && (tracer.bSHOOTABLE || tracer.bVULNERABLE))
		{
			if (target && Distance3DSquared(target) <= Range ** 2)
				bEXTREMEDEATH = true;
			int mask = 0; //3;
			int add = 1; //0;
			
		//	if (!RandomDamage)
		//	{	mask = 0; add = 1;	}
			
			int dmg = GetMissileDamage(mask, add);
			if (RandomDamage)	dmg *= random(1,3);
			A_FaceTarget(0,0,180);
			Tracer.DamageMobj(self, target, dmg, DamageType, DMG_INFLICTOR_IS_PUFF|DMG_USEANGLE,angle);
		}
	}
}

Class BulletPuffParticle : Actor 
{
	Default 
	{
		Height 1;
		Radius 1;
		Speed 3;
		Scale 0.3;
		+NOCLIP
		Projectile;
		-NOGRAVITY
		+LOWGRAVITY
		+DONTSPLASH
		+DONTBLAST
		RenderStyle "Add";
		+NOINTERACTION
		+CLIENTSIDEONLY
		+FORCEXYBILLBOARD
		+PUFFONACTORS
		+ALWAYSPUFF
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Jump(170,2,3,4,5);
		FX57 UUUUUVVVWWXXYY 2 Bright A_FadeOut(0.07);
		Stop;
	XDeath:
		TNT1 A 10;
		Stop;
	}
}

//==============================================================================


Class PacifistPuff : Actor 
{
	Default 
	{
		+ALLOWTHRUFLAGS
		+THRUACTORS
		+NOINTERACTION
		+NOCLIP
		+NOBLOCKMAP
		+BLOODLESSIMPACT
		+PAINLESS
		+ALWAYSPUFF
		+PUFFONACTORS
		+SKYEXPLODE
		+DONTSPLASH
		+INVISIBLE
		+NOTONAUTOMAP
		Radius 1;
		Height 1;
		DamageType "AimingLaser";
	}
	States
	{
	Spawn:
		TNT1 A 35;
		Stop;
	}
}

Class PacifistPuffNoThru : PacifistPuff
{
	Default
	{
		-ALLOWTHRUFLAGS
	}
}

Class NonPacifistPuff : PacifistPuff
{
	Default
	{
		-ALLOWTHRUFLAGS
		-BLOODLESSIMPACT
		-PAINLESS
		DamageType "Hitscan";
	}
}

Class NonPacifistPuffExtreme : NonPacifistPuff
{
	Default
	{
		+EXTREMEDEATH
	}
}

//------------------------------------------------------------------
//------------------------------------------------------------------
//
//------------------------------------------------------------------
//------------------------------------------------------------------
Class GenericExplosionParticleSpawner : Actor //particles spawned by barrels and rockets
{
	
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 10 NODELAY
		{
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFA600",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("F27D00",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("FFE645",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			A_SpawnParticle("DB641A",SPF_FULLBRIGHT|SPF_RELATIVE,random(15,60),random(3,8),0,0,0,0,frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
		}
		Stop;
	}
}

//==============================================================================
//==============================================================================

Class ModuleGiver : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_GiveInventory("ShotgunMod1");
			A_GiveInventory("ShotgunMod2");
			A_GiveInventory("SSGUpgrade1");
			A_GiveInventory("SSGUpgrade2");
			A_GiveInventory("SSGUpgrade3");
			A_GiveInventory("SSGUpgrade4");
			A_GiveInventory("GaussCannonMod1");
			A_GiveInventory("GaussCannonMod2");
			A_GiveInventory("AssaultRifleMod1");
			A_GiveInventory("AssaultRifleMod2");
			A_GiveInventory("RocketLauncherMod1");
			A_GiveInventory("RocketLauncherMod2");
			A_GiveInventory("PlasmaRifleMod1");
			A_GiveInventory("PlasmaRifleMod2");
			A_GiveInventory("ChaingunMod1");
			A_GiveInventory("ChaingunMod2");
			A_GiveInventory("GaussCannonMod1");
			A_GiveInventory("GaussCannonMod2");
			A_GiveInventory("StaticUpgrade1");
			A_GiveInventory("StaticUpgrade2");
			A_GiveInventory("StaticUpgrade3");
			A_GiveInventory("StaticUpgrade4");
			A_GiveInventory("LGUpgradeRange");
			A_GiveInventory("LGUpgradeAmmo");
			A_GiveInventory("LGUpgradeAltFire");
			A_GiveInventory("LGUpgradeDamage");
			A_GiveInventory("VortexUpgradeDamage");
			A_GiveInventory("VortexUpgradeAmmo");
			A_GiveInventory("VortexUpgradeAltSpeed");
			A_GiveInventory("VortexUpgradeAltPierce");
			A_GiveInventory("RepeaterUpgradePiercing");
			A_GiveInventory("RepeaterUpgradeDamage");
			A_GiveInventory("RepeaterUpgradeAltDamage");
			A_GiveInventory("RepeaterUpgradeAltAmmo");
			A_GiveInventory("PistolUpgradeAutomatic");
			A_GiveInventory("PistolUpgradeAltDamage");
			A_GiveInventory("PistolUpgradeAltCharge");
			A_GiveInventory("PistolUpgradeDamage");
			A_GiveInventory("PistolUpgradeLance");
			A_GiveInventory("BFGUpgrade1");
			A_GiveInventory("BFGUpgrade2");
			A_GiveInventory("BFGUpgrade3");
			A_GiveInventory("BFGUpgrade4");
			A_GiveInventory("CarrionUpgradePickup");
			A_GiveInventory("CarrionUpgradeAmmo");
			A_GiveInventory("CarrionUpgradeStun");
			A_GiveInventory("CarrionUpgradeTime");
			return true;
		}
		Stop;
	}
}

///////////////////////////////// temporary debug shit
Class D4HologramTooOld : Actor 
{
	Default 
	{
		Radius 16;
		Height 32;
		RenderStyle "Add";
	}
    States
    {
    Spawn:
        TDLD A 1;
        Loop;
    }
}
/*
Class SpinTop : Actor
{
	const FullTurnSpeed = 6.0;
	const FullRollPitchSpeed = 3.0;
	const SpinTic = 360.0 / 70.0;
	double acc;
	double time;
	double tilt;
	MC_Quaternion SpinTilt, SpinAngle, Combined;
	
	Default
	{
		+NOINTERACTION
	}
	
	States
	{
	Spawn:
		WPPK G 35 NoDelay
		{
			time = 0.0;
			acc = 0.0;
			tilt = 0.0;
			Combined = MC_Quaternion.Identity();
		}
		WPPK G 1
		{
			if (acc < 1.0)	acc += (1.0 / 35.0);
			time = (time + (SpinTic * acc)) % 360.0;	// cos(x)'s "x" variable
			tilt = (tilt + acc) % 360.0;				
			
			double 	//c = (cos(time) + 1) / 2,
					//s = (sin(time) + 1) / 2,
					p = sin(time),
					//a = angle + (FullTurnSpeed * acc),
					a = FullTurnSpeed * acc,
					r = cos(time);
			
			SpinAngle = MC_Quaternion.CreateFromAngles(a, pitch, roll);
			SpinTilt = MC_Quaternion.CreateFromAngles(angle, p, r);
			
			Combined = SpinAngle.MultiplyQuat(SpinTilt);
			[a, p, r] = Combined.ToAngles();
			angle = a;
			pitch = p;
			roll = r;
		}
		Wait;
	}
}
*/