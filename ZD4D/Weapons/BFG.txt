//===================================================================================================
//===================================================================================================
//
//		BFG
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code overhaul: Major Cooke
//
//===================================================================================================
//===================================================================================================

Class D4BFG : Doom4Weapon
{
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.AmmoType1 "D4BFGAmmo";
		Weapon.AmmoType2 "D4BFGAmmo";
		Weapon.AmmoUse1 D4BFGAmmo_Amount;
		Weapon.AmmoUse2 D4BFGAmmo_Amount;
		Weapon.AmmoGive1 D4BFGAmmo_MaxAmount;
		Weapon.SelectionOrder 130;
		Weapon.SlotNumber 8;
		Weapon.SlotPriority 0.98;
		Inventory.PickupMessage "BFG 9000! HELL YES!";
		Inventory.PickupSound "";
		Obituary "%o felt the wrath of %k's beautiful greenliness.";
		Tag "BFG 9000";
		+DONTGIB
	}
	
	// Upon spawning or travelling, makes BFG ammo spawn in place of cells
	// and allows BFG ammo pinatas to spawn.
	override void EnableAmmoSpawn()
	{
		if (!Event) Event = D4DHandler.Fetch();
		if (Event)	Event.SetActorSpawn(D4DHandler.BFGAmmo, true);
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		if (Super.TryPickup(toucher))
		{
			for (int i = 5; i < 7; i++)
			A_PlaySound("Doom4/Weapon/BFG/Pickup", i, 1, 0, ATTN_NONE);
			return true;
		}
		return false;
	}
	
	States
	{
	Spawn:
		WPPK I -1;
		Stop;
	Ready:
		WEP7 A 0 
		{
			A_Overlay(GunWatcher,"BFG.Redirector",true);
			A_SetInventory("SineZoom",0);
		}
	ReadyLoop:
		WEP7 A 1 A_WeaponReady((CountInv("BFGUpgrade2") ? (WRF_ALLOWUSER2) : (WRF_NOSECONDARY|WRF_ALLOWUSER2)));
		Loop;
	Deselect:
		WEP7 A 0 
		{
			A_SetInventory("SineZoom",0);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		}
		---- A 1 A_Lower;
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	Select:
		WEP7 A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	Fire:
		WEP7 A 0 
		{
			A_SetInventory("SineZoom",0,0);
			A_PlaySound("Doom4/Weapon/BFG/Fire",CHAN_WEAPON,1);
		}
		WEP7 BBCCDDEEFFGGHHIIJJKKLLMMNN 1 Bright
		{
			A_GiveInventory("SineZoom",16);
			A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING);
		}
		WEP7 O 1 Bright offset(2,37) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(4,42) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(7,47) 
		{
			A_GunFlash("Null");
			A_FireProjectile("D4BFG9000Shot",0,1,3);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			A_SetPitch(pitch-6.0);
		}
		WEP7 P 1 Bright offset(10,52);
		WEP7 P 2 Bright ;
		WEP7 QQQ 1 Bright A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(9,50) A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(8,48) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(7,46) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(6,44) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(5,42) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(4,40);
		WEP7 U 2 Bright offset(3,38);
		WEP7 U 2 Bright offset(2,36);
		WEP7 V 2 Bright offset(1,34);
		WEP7 V 2 Bright offset(1,33);
		WEP7 V 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		WEP7 WXYZ 2 Bright;
		Goto Ready;
	AltFire:
		WEP7 A 0 
		{
			A_TakeInventory("SineZoom",1000,0);
			A_PlaySound("Doom4/Weapon/BFG/Fire",CHAN_WEAPON,1);
		}
		WEP7 BBCCDDEEFFGGHHIIJJKKLLMMNN 1 Bright
		{
			A_GiveInventory("SineZoom",16);
			A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING);
		}
		WEP7 O 1 Bright offset(2,37) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(4,42) { A_GiveInventory("SineZoom",18);	A_ZoomFactor(sin(90-(CountInv("SineZoom")*0.1)),ZOOM_NOSCALETURNING); }
		WEP7 O 1 Bright offset(7,47) 
		{
			A_GunFlash("Null");
			if (CountInv("OrbiterActive"))
			{
				A_GiveInventory("OrbiterExtender",16);
			}
			else
			{
				A_SpawnItemEx("D4BFG9000Orbiter",0,0,32,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTARGET);
				A_FireProjectile("AmmoWaster",0,1);
				A_GiveInventory("OrbiterActive");
			}
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			A_SetPitch(pitch-6.0);
		}
		WEP7 P 1 Bright offset(10,52);
		WEP7 P 2 Bright ;
		WEP7 QQQ 1 Bright A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(9,50) A_SetPitch(pitch+0.5);
		WEP7 RR 1 Bright offset(8,48) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(7,46) A_SetPitch(pitch+0.5);
		WEP7 SS 1 Bright offset(6,44) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(5,42) A_SetPitch(pitch+0.5);
		WEP7 T 2 Bright offset(4,40);
		WEP7 U 2 Bright offset(3,38);
		WEP7 U 2 Bright offset(2,36);
		WEP7 V 2 Bright offset(1,34);
		WEP7 V 2 Bright offset(1,33);
		WEP7 V 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		WEP7 WXYZ 2 Bright;
		Goto Ready;
	BFG.Redirector:
		M666 A 1
		{
			if (CountInv("BFGUpgrade4"))
			{
				if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_RELOAD) &&
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD))
				{
					A_FireBullets(0,0,1,0,"BFGRedirectPuff",FBF_NORANDOMPUFFZ|FBF_NOFLASH,32766);
					A_GiveToChildren("BFGRedirector",1);
				}
			}
		}
		Loop;
	}
}

Class AmmoWaster : Actor 
{
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

Class BFGRedirectPuff : Actor 
{
	Default 
	{
		+PUFFONACTORS
		+ALWAYSPUFF
		+NOINTERACTION
		+BLOODLESSIMPACT
		+DONTTHRUST
		+PAINLESS
		+NOTONAUTOMAP
		+NEVERTARGET
		+BRIGHT
		Radius 1;
		Height 1;
		RenderStyle "None";
	}
	States
	{
	Spawn:
		PLAY A 4;
		Stop;
	}
}

Class BFGRedirector : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (GetClass() is "D4BFG9000Shot")
			{
				if (!CountInv("RedirectedToken"))
				{
					if (A_CheckProximity("Null","BFGRedirectPuff",32000,1,CPXF_SETTRACER))
					{
						A_GiveInventory("RedirectedToken",1);
						A_FaceTracer(0,0,0,0,FAF_MIDDLE);
						A_ChangeVelocity(cos(pitch)*speed, 0, -sin(pitch)*speed,CVF_REPLACE|CVF_RELATIVE);
						return true;
					}
				}
			}
			return false;
		}
		Stop;
	}
}

Class RedirectedToken : Inventory {}
Class SineZoom : Inventory { Default { Inventory.MaxAmount 450; }}
Class OrbiterActive : Inventory { Default { Inventory.InterhubAmount 0; }}
Class OrbiterExtender : Inventory { Default { Inventory.MaxAmount 500;	Inventory.InterhubAmount 0; }}

//-----------------------------------------------------------------
//-----------------------------------------------------------------
const BFG_LaserRadius = 1024;
Class D4BFGProjectile  : Actor 
{
	int drawBeams;
	int renderer;
	Array<Actor> Beamed, Monsters;
	MCHandler handler;
	//==========================================================================
	// Functions
	//==========================================================================
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Beamed.Clear();
		handler = MCHandler.Fetch();
	}
	
	//--------------------------------------------------------------------------
	// Spawns BFG lasers.
	// As of alpha 8, effectively a copy paste of what I did for lightning gun
	// without damage.
	void BFGBeams(int maxtargets)
	{
		if (!handler)	handler = MCHandler.Fetch();
		int size = handler.Monsters.Size();
		if (handler && size > 0)
		{
			int count = 0;
			for (int i = 0; i < size; i++)
			{
				Actor mo = handler.Monsters.Actors[i];
				if (!mo || mo.bCORPSE || mo.health < 1 || mo is "PlayerPawn" || mo.bDORMANT)
					continue;
					
				// Why "squared"? Don't you value a faster game? ;)
				// Note: ** 2 is exactly squaring a value. ** 3 is cubed, etc.
				if (Distance3DSquared(mo) > (BFG_LaserRadius ** 2) || 
					!CheckSight(mo,SF_SEEPASTSHOOTABLELINES|SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
					continue;
				
				A_Face(mo,0,0,0,0,FAF_MIDDLE);
				Beamed.Push(mo);
				
				Vector3 SH = mo.pos;
				SH.z += mo.height / 2.0;
				Actor Puff = Spawn("PacifistPuff", SH);
				if (Puff)
				{
					Actor Beamer = Spawn("BFGBeamSpawner",pos);
					if (Beamer)
					{
						Beamer.Target = Target;
						Beamer.Master = Target;
						Beamer.Tracer = Puff;
						Beamer.Angle = Angle;
						Beamer.Pitch = Pitch;
					}
				}
				
				if (count++ > maxtargets)
					return;
			}
		}
	}
	
	void BFGDetonate()
	{
		if (Beamed.Size() < 1)	
			return;
		
		Actor src = target;
		if (!src)	src = self;
		
		for (int i = 0; i < Beamed.Size(); i++)
		{
			Actor mo = Beamed[i];
			
			if (!mo)	
				continue;
			
			mo.A_SetInventory("D4BFGKillToken",0);
			Class<Actor> rep =  GetReplacee(mo.GetClass());
			if (mo.bFRIENDLY || !mo.bISMONSTER || mo.health < 1 || mo.bDORMANT ||
				(mo is "PlayerPawn") || 
				(mo is "Cyberdemon") || (mo is "SpiderMastermind") ||
				(rep is "Cyberdemon") || (rep is "SpiderMastermind"))
			{
				continue;
			}
			mo.DamageMobj(self, src, 2000, "BFGExploder");
		}
	}
}

Class D4BFG9000Shot : D4BFGProjectile
{
	int boosted;
	int flags;
	int count;
	int c2;
	double UPitch;
	Default 
	{
		Projectile;
		+SEEINVISIBLE
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+BRIGHT
		+ROLLSPRITE
		+NODAMAGETHRUST
		+CANNOTPUSH
		+SKYEXPLODE
		+EXPLODEONWATER
		+DONTREFLECT
		Radius 8;
		Height 12;
		Speed 20;
		Damage 300;
		Scale 0.45;
		DeathSound "Doom4/Weapon/BFG/Impact";
		RenderStyle "Add";
		Decal "D4BFGLightning";
	}
	
	//==========================================================================
	// States
	//==========================================================================
	States
	{
	Spawn:
		BFE1 B 0 NoDelay 
		{
			A_PlaySound("Doom4/Weapon/BFG/Flying",7,0.6,1);
			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			A_FaceMovementDirection(0,0,0);
			boosted = CountInv("BFGUpgrade3",TargetPtr);
			if (boosted)
			{
				A_ScaleVelocity(2);
				A_SetSpeed(40);
			}
		}
	Moving:
		BFE1 B 1 Bright Light("GreenBigFlicker3")
		{
			A_SetScale((sin(c2)*0.075)+0.45);
			c2 = (c2 + random(20,35)) % 360;
			
			A_SetRoll(roll + 5, SPF_INTERPOLATE);
			count = (count + 1) % 2;
			
			// Remember to adjust BFGBeam if the modulo count is changed.
			// Simply change the WaitTime property.
			if (!count)	
				BFGBeams(5);
			
			A_SpawnItemEx("D4BFGTrailSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERPITCH|SXF_TRANSFERROLL);
			int dmg = (boosted ? random[rng](10,20) : random[rng](3,6));
			A_Explode(dmg,BFG_LaserRadius,0,0,BFG_LaserRadius,damagetype: 'BFGBeam');
			
			if (GetCvar("HQEffectsWeapons"))	{	A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,192);	}			
		}
		Loop;
	Death:
		BFE1 C 0
		{
			bRollSprite = false;
			A_StopSound(7);
			if (GetCvar("HQEffectsWeapons"))
			{
				for (count = 0; count < 10; count++)
				{
					A_SpawnItemEx("BFGImpactVapor",3,0,0,frandom(-4,4),frandom(-4,4),frandom(-4,4),0,SXF_NOCHECKPOSITION,128);
					
					if (count < 4)
					{	
						if (count > 0) 
						{	A_SpawnItemEx("D4BFGShockwave2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,count);	}
						A_SpawnItemEx("D4BFGShockwave2",0,0,0,0,0,0,90,SXF_NOCHECKPOSITION,0,count);	
					}
				}
			}
			
			A_SpawnItemEx("BFGImpactVapor",3,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128);
			A_SpawnItemEx("D4BFGImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4BFGShockwave1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			BFGDetonate();
			if (GetCvar("D4D_quakexplosions")==1)
			{
				A_QuakeEx(0,0,0,20,0,2048,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,33,0,2048,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,2.5*randompick(-1,1),frandom(5.5,8.5));
			}
			else
			{
				A_QuakeEx(0,0,0,16,0,512,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,20,0,512,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,1.5*randompick(-1,1),frandom(5.5,8.5));
			}
			UPitch = 0; 
			count = 0;
			c2 = 0;
			Scale.X = Scale.Y = 0;
			bNoDamageThrust = false;
			bCannotPush = false;
			A_Explode(1700,1024,0,0,1024);
		}
	DLoop:
		BFE1 C 1 bright
		{
			if (GetCvar("HQEffectsWeapons"))
			{	A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERROLL);	}
			
			count += 8;
			c2 += 5;
			A_SetScale(sin(c2)*1.5,Max((sin(count)*1.4),0.0));
			
			if (Scale.Y <= 0 || count >= 180)	
			{	return ResolveState(1);	}
			return ResolveState(null);
		}
		Loop;
		TNT1 A 35; //Let the quake last.
		Stop;
	}
}

Class D4BFG9000Orbiter : D4BFGProjectile
{
	
	int boosted;
	int flags;
	int count;
	int c2;
	double  UPitch;
	double ang;
	int tic;
	int dir;
	
	Default 
	{
		Projectile;
		+SEEINVISIBLE
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+BRIGHT
		+ROLLSPRITE
		+NODAMAGETHRUST
		+NOINTERACTION
		+NOCLIP
		Radius 8;
		Height 12;
		Speed 20;
		Damage 300;
		DeathSound "Doom4/Weapon/BFG/Impact";
		DamageType "BFGBeam";
		RenderStyle "Add";
		Alpha 0.35;
		Scale 0.40;
	}
	States
	{
	Spawn:
		BFE1 B 0 NoDelay 
		{
			ang = angle;
			A_PlaySound("Doom4/Weapon/BFG/Flying",7,0.3,1);
			dir = randompick(-1,1);
			tic = 35 * 15;
			if (target) master = target;
		}
	Moving:
		BFE1 B 1 Bright Light("GreenBigFlicker3")
		{
			ang = (ang + ((360.0 / 35.0))) % 360.0;
			if (Target)
				Warp(Target,0,0,0,ang,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEANGLE|WARPF_STOP|WARPF_INTERPOLATE,0.4,3.5);
			
			A_SetScale((sin(c2)*0.075)+0.4);
			c2 = (c2 + random(20,35)) % 360;
			
			A_SetRoll(roll + 5, SPF_INTERPOLATE);
			count = (count + 1) % 2;
			
			if (!count)	{	BFGBeams(5);	}
			
			if (A_JumpIfTargetInLOS("Null",360))
			{	
				A_SpawnItemEx("D4BFGTrailSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERALPHA|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERPITCH|SXF_TRANSFERROLL);
				if (GetCvar("HQEffectsWeapons"))	{	A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,192);	}
				
				A_Explode(random(3,6),BFG_LaserRadius,0,0,BFG_LaserRadius);
				
				if (CountInv("OrbiterExtender",TargetPtr))
				{	
					tic += 35 * CountInv("OrbiterExtender",TargetPtr);
					A_TakeInventory("OrbiterExtender",32767,0,TargetPtr);
				}
				
				tic--;
				
				if (tic <= 0)
				{	return ResolveState("Death");	}
			}
			return ResolveState(null);
		}
		Loop;
	Death:
		BFE1 C 0
		{
			A_StopSound(7);
			A_PlaySound("Doom4/Weapon/BFG/Impact",CHAN_AUTO,0.2);
			A_TakeInventory("OrbiterActive",32767,0,TargetPtr);
			if (GetCvar("HQEffectsWeapons"))
			{
				for (count = 0; count < 10; count++)
				{
					A_SpawnItemEx("BFGImpactVapor",3,0,0,frandom(-4,4),frandom(-4,4),frandom(-4,4),0,SXF_NOCHECKPOSITION,128);
					
					if (count < 4)
					{	
						if (count > 0) 
						{	A_SpawnItemEx("D4BFGShockwave2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,count);	}
						A_SpawnItemEx("D4BFGShockwave2",0,0,0,0,0,0,90,SXF_NOCHECKPOSITION,0,count);	
					}
				}
			}
			
			A_SpawnItemEx("BFGImpactVapor",3,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128);
			A_SpawnItemEx("D4BFGImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4BFGShockwave1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			bRollSprite = false;
			BFGDetonate();
			if (GetCvar("D4D_quakexplosions")==1)
			{
				A_QuakeEx(0,0,0,20,0,2048,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,33,0,2048,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,2.5*randompick(-1,1),frandom(5.5,8.5));
			}
			else
			{
				A_QuakeEx(0,0,0,16,0,512,"",QF_SCALEDOWN|QF_SCALEUP,0,0,0,1,4,1,0);
				A_QuakeEx(0,0,0,20,0,512,"",QF_SCALEDOWN|QF_WAVE|QF_SCALEUP,0,0,0,1,4,1.5*randompick(-1,1),frandom(5.5,8.5));
			}
			UPitch = 0;
			count = 0;
			c2 = 0;
			Scale.X = Scale.Y = 0;
			bNoDamageThrust = false;
			bCANNOTPUSH = false;
			A_Explode(1700,1024,0,0,1024);
		}
	DLoop:
		BFE1 C 1 bright
		{
			if (GetCvar("HQEffectsWeapons"))
			{	A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERROLL);	}
			
			count += 8;
			c2 += 5;
			A_SetScale(sin(c2)*1.5,Max((sin(count)*1.4),0.0));
			
			if (Scale.Y <= 0 || count >= 180)	
			{	return ResolveState(1);	}
			return ResolveState(null);
		}
		Loop;
		TNT1 A 35; //Let the quake last.
		Stop;
	}
}

Class D4BFGShockwave2 : Actor 
{
	double URoll;
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+ROLLCENTER
		+BRIGHT
		RenderStyle "Add";
		Scale 0.25;
		Translation "0:255=%[0,0,0]:[0.1,1.0,0.1]";
	}
	States
	{
	Spawn:
		X072 L 1 NoDelay
		{
			pitch = tid * 45;
			Thing_ChangeTID(0,0);
			
			while (pitch > 90)
			{	pitch -= 180;	}
		}
		X072 L 1
		{
			A_SetScale(Scale.X + 0.2);
			A_FadeOut(0.05);
			A_SetRoll(roll + 10, SPF_INTERPOLATE);
		}
		Wait;
	}
}

Class D4BFGImpactLightEmitter : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 2 Light("GreenMediumPoint1");
		TNT1 A 2 Light("GreenBigPoint3");
		TNT1 A 2 Light("GreenBigPoint2");
		TNT1 A 3 Light("GreenBigPoint1");
		TNT1 A 3 Light("GreenBigPoint2");
		TNT1 A 3 Light("GreenBigPoint3");
		TNT1 A 3 Light("GreenMediumPoint1");
		TNT1 A 3 Light("GreenMediumPoint2");
		TNT1 A 3 Light("GreenMediumPoint3");
		TNT1 A 3 Light("GreenSmallPoint1");
		TNT1 A 3 Light("GreenSmallPoint2");
		TNT1 A 3 Light("GreenSmallPoint3");
		Stop;
	}
}

Class BFGImpactVapor : Actor 
{
	Default 
	{
		+NOINTERACTION
		Scale 0.3;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.1,1.0,0.0]";
		+FORCEXYBILLBOARD 
		Alpha 0.99;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(240,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40);
		X102 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVV 1 Bright
		{
			A_FadeOut(0.02);
			A_SetScale(Scale.X+0.08);
			if(random(1,3)==3)
			{
				A_ScaleVelocity(0.8);
			}
		}
		Goto Spawn+1;
	}
}
Class D4BFGShockwave1 : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.4;
		//Translation "0:255=%[0,0,0]:[0.8,1.5,2.0]";
		Alpha 0.99;
		+ALWAYSPUFF
		+PUFFONACTORS
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		X072 LLLLLL 1 Bright
		{
			A_SetScale(Scale.X+0.16);
		}
		X072 LLLL 1 Bright
		{
			A_SetScale(Scale.X+0.07);
			A_FadeOut(0.07);
		}
		Wait;
	}
}


Class D4BFGLightningGenerator : Actor 
{
	const AngMin = 5.0;
	const AngMax = 30.0;
	int c;
	int count;
	int d;
	int limit;
	int branch;
	int size;
	int t;
	double amin;
	double amax;
	double UPitch;
	
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
		Speed 2;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
		// Branch version. Doesn't spawn further instances of itself and halves
		// everything -- turning, spawn count, you name it.
			if (tid > 0)
			{
				t = tid;
				ChangeTID(0);
				amin = AngMin / 2.0;
				amax = AngMax / 2.0;
				size = 5;
				limit = random(15, 45);
				angle += (frandom(amin*2,amax*2)*frandompick(-1,1)) / 2.0;
				UPitch += (frandom(amin*2,amax*2)*frandompick(-1,1)) / 2.0;
			}
			else
			{	
				amin = AngMin;
				amax = AngMax;
				size = 7;	
				limit = random(30,90);
				UPitch = random(-90,90);
				angle = random(0,359);
			}
			
			c = random(1,4);
			d = c;
		}
	Looping:
		TNT1 A 0
		{
			A_Stop();
			if (limit <= 0)
			{	return ResolveState("Null");	}
			limit--;
			
			if (c <= 0)
			{
				A_Warp(DefPtr,cos(UPitch)*Speed*count,0,-sin(UPitch)*Speed*count,0,WARPF_NOCHECKPOSITION);
				UPitch += (frandom(amin,amax)*frandompick(-1,1));
				A_SetAngle(angle+(frandom(amin,amax)*frandompick(-1,1)));
				A_SetPitch(UPitch);
				
				if (branch > 0)
				{	branch--;	}
				if (!t && !branch)
				{
					A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,64,1);
					A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,128,1);
					A_SpawnItemEx("D4BFGLightningGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,192,1);
					branch += random(1,5);
				}
				
				count = 0;
				c = random(1,4);
				d = c;
			}
			c--;
			count++;
			A_SpawnParticle("A7FF47",SPF_FULLBRIGHT|SPF_RELATIVE,2,size,0,
				((cos(UPitch)*Speed)*count),
				0,
				((-sin(UPitch)*Speed)*count),
				0,0,0,0,0,0,1.0,0.5);
			return ResolveState("Looping");
		}
		Loop;
	}
}

Class D4BFGKillToken : Inventory	{	Default { Inventory.MaxAmount 1;	}}

// -----------------------------------------------------------------------------
// This spawns the trails.

Class D4BFGTrailSpawner : Actor 
{
	double scalar, s, c;
	bool skip;
	property Skip: Skip;
	Default 
	{
		D4BFGTrailSpawner.Skip false;
		Projectile;
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+FORCEXYBILLBOARD
		RenderStyle "Add";
	}
	
	States
	{
	Spawn:
		BFE1 B 0 NoDelay
		{
			if (!Skip)
			{
				A_FaceMovementDirection();
				A_SpawnItemEx("D4BFGTrail2",cos(pitch)*10,0,-sin(pitch)*10,0,0,0,0,SXF_TRANSFERALPHA|SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL);	
			}
			s = sin(roll);
			c = cos(roll);
			return ResolveState("Enact");
		}
	Enact:
		BFE1 B 1
		{
			scalar += frandom(0.005,0.01);
			A_SetScale(Scale.X - abs(s * scalar), Scale.Y - abs(c * scalar));
			if (Scale.X <= 0.0 || Scale.Y <= 0.0)
			{	return Destroy();	}
		}
		Wait;
	}
}

Class D4BFGTrail2 : D4BFGTrailSpawner
{	Default {	D4BFGTrailSpawner.Skip true;	}	}