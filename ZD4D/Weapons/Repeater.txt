//===================================================================================================
//===================================================================================================
//
//		Repeater (I like this name better than "Burst rifle")
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Code: DBThanatos
//
//===================================================================================================
//===================================================================================================
// Primary fire: 3 shot burst. Fairly accurate for mid range. One bullet per shot
// Secondary fire: Fires an incendiary round. Five bullets per shot
//   Upgrades:
// ->Accuracy: makes primary fire a perfectly accurate shots
// ->Piercing: makes primary bullets pierce ONE Monster;
// ->AltDamage: Increases damage of the incendiary round
// ->AltAmmo: Decreases the cost of the incendiary round from 5 to 3
//===================================================================================================

Class D4Repeater : Doom4Weapon
{
	transient CVar RepeaterMode;
	Default 
	{
		Doom4Weapon.MultiplayerWeapon true;
		Doom4Weapon.CvarMode 'D4D_RepeaterMode', 'Single Mode', 'Triple Mode';
		+FLOORCLIP
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOALERT
		Scale 0.7;
		Weapon.AmmoType1 "D4Bullets";
		Weapon.AmmoType2 "D4Bullets";
		Weapon.AmmoGive1 40;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 41 ;//slightly below HAR which is 40
		Weapon.SlotNumber 4;
		Weapon.SlotPriority 0.98;
		Obituary "%o was repeatedly perforated by %k.";
		Inventory.PickupMessage "Repeater. It has a Certain Affinity to other bullet weapons.";
		Tag "Repeater";
	}
	
	States
	{
	Spawn:
		WPPK L -1;
		Wait;
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		---- A 1 A_Lower();
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		M021 A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	Ready:
	    M666 A 0 A_Overlay(SwitchWatcher,"SwitchWatcher",true);
		M021 A 1 A_WeaponReady(WRF_ALLOWUSER2);
		Loop;
	SwitchWatcher:
		M666 A 1
		{
			if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_RELOAD) &&
				!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD))
			{
				ToggleWeaponMode();
			}
		}
		Loop;	
	//===========================================================================	
	// Primary fire
	Fire:
		M021 B 0 
		{
			if (CountInv("RepeaterAimHolding"))
			{
				return ResolveState("AltFireShoot");
			}
			let i = invoker;
			i.AmmoUse1 = CountInv("RepeaterUpgradeDamage") ? 3 : 2;
			
			if (A_JumpIfNoAmmo("NotEnoughAmmo"))
				return ResolveState("NotEnoughAmmo");
			
			Sound snd = ((A_CheckInfiniteAmmo() || CountInv("D4Bullets") >= i.AmmoUse1) && 
						(!CheckWeaponMode()))
						? "Doom4/Weapon/Repeater/FireTriple" : "Doom4/Weapon/Repeater/FireSingle";
			PlaySound(snd,CHAN_WEAPON);
			return ResolveState("FireLoop");
		}
	FireLoop:
		#### B 1
		{
			if (CountInv("RepeaterCounter") >= 3 || A_JumpIfNoAmmo("Null"))
			{
				A_SetInventory("RepeaterCounter", 0);
				return ResolveState("EndFire");
			}
			
			int dmg = CountInv("RepeaterUpgradeDamage") ? 22 : 14;
			
			//checks for upgrades
			if (CountInv("RepeaterUpgradePiercing"))	// if piercing upgrade
			{
				A_RailAttack(dmg*random(1,3),0,0,-1,-1,RGF_SILENT|RGF_NORANDOMPUFFZ,0,"D4BulletPuffForRails",0,0,0,10,0,0,null,0,0,2);
				A_FireBullets(0,0,1,0,"PacifistPuff",FBF_USEAMMO|FBF_PUFFTRACER,0,"BulletSmallTracer",-1,7);
			}
			else //didnt have piercing upgrade
			{
				A_FireBullets(0,0,1,dmg,"D4BulletPuff",FBF_USEAMMO|FBF_PUFFTRACER,0,"BulletSmallTracer",-1,7);
			}
			
			//casings on?
			if (GetCvar("D4D_Casings"))
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);

			A_FireProjectile("MGSmokeSpawner",0,0,4,2);
			
			A_GiveInventory("RepeaterCounter",1 + (CheckWeaponMode() * 2));
			A_GunFlash("Null");
			A_SetPitch(pitch-0.8);
			A_WeaponOffset(8,8,WOF_ADD);
			A_AlertMonsters();
			return ResolveState(null);
			
		}
		M021 C 1 
		{
			A_SetPitch(pitch+0.4);
			A_WeaponOffset(-3,-3,WOF_ADD);
			A_SetTics(IsDoubleSpeed() ? 0 : 1); 
		}
		M021 D 1 
		{
			A_SetPitch(pitch+0.4);
			A_WeaponOffset(-3,-3,WOF_ADD);
		}
		Loop;
		
	EndFire:
		M021 C 1 A_WeaponOffset(6,38);
		M021 C 1 { A_WeaponOffset(5,37); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
		M021 A 1 A_WeaponOffset(4,36);
		M021 A 1 { A_WeaponOffset(3,35); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
		M021 A 1 A_WeaponOffset(2,34);
		M021 A 1 { A_WeaponOffset(1,33); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
		M021 A 0 A_WeaponOffset(0.5,32.5);
		
		M021 AAAAAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_ALLOWUSER2); // half a second without bob, to avoid jerkiness when running and firing
		Goto Ready;
		
	Flash:
		TNT1 A 0 A_SetBlend("Orange",0.05,2);
		ZZZZ C 1 A_Light1();
		ZZZZ C 0 A_Light0();
		Stop;
		
	NotEnoughAmmo:
		M021 A 5 ACS_NamedExecute("NotEnoughAmmo",0,0,0);
		Goto Ready;
	//===========================================================================	
	// Alt fire
	
	AltFire:
		M021 A 0
		{
			if (!invoker.CheckAmmo(0, false, true, (CountInv("RepeaterUpgradeAltAmmo") ? 5 : 8)))
			{	return ResolveState("NotEnoughAmmo");	}
			
			if (!DoSecondaryPriming())
			{
				return ResolveState("AltFireShoot");
			}
			
			PlaySound("Doom4/Weapon/Shotgun/GrenadeAim",6);
			A_GiveInventory("RepeaterAimHolding");
			A_ZoomFactor(1.1,ZOOM_NOSCALETURNING);
			return ResolveState(null);
		}
	AltFireHolding:
		M021 A 1 
		{
			if (!DoSecondaryPriming())
				return ResolveState("Ready");
			A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_NOSECONDARY);
			return ResolveState(null);
		}
		M021 A 0
		{
			if (GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK)
			{
				return ResolveState("AltFireHolding");
			}
			return ResolveState(null);
		}
		Goto AltFireReleaseButton;
		
	AltFireReleaseButton:
		M021 A 5
		{
			A_TakeInventory("RepeaterAimHolding");
			A_ZoomFactor(1.00);
			PlaySound("Doom4/Weapon/Shotgun/CancelAim",6);
		}
		Goto Ready;
	
	AltFireShoot:
		M021 B 2 Bright
		{
			PlaySound("Doom4/Weapon/Repeater/FireSingle",CHAN_WEAPON);
			PlaySound("Doom4/Weapon/HellShot/AltFire",5);
			//Ammo upgrade?
			A_TakeInventory(invoker.AmmoType1, (CountInv("RepeaterUpgradeAltAmmo") ? 5 : 8), TIF_NOTAKEINFINITE);
			
			A_GunFlash("Null");
			//Alt damage upgrade?
			if(CountInv("RepeaterUpgradeAltDamage"))
			{	A_FireProjectile("IncendiaryBulletDMG",0,0,6);	}
			else
			{	A_FireProjectile("IncendiaryBullet",0,0,6);	}
			
			//casings on?
			if (GetCvar("D4D_Casings"))
			{ 
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); 
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); 
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); 
			}

			//weapon HQ on?
			if(GetCvar("HQEffectsWeapons"))
			{ 
				A_FireProjectile("MGSmokeSpawner",0,0,4,2); 
				A_FireProjectile("MGSmokeSpawner",0,0,4,2); 
				A_FireProjectile("MGSmokeSpawner",0,0,4,2); 
			}
			
			A_SetPitch(pitch-1.8);
			A_WeaponOffset(20,20,WOF_ADD);
			A_SetBlend("Orange",0.05,5);
			A_Light2();
			A_AlertMonsters();
		}
		M021 C 0 
		{
			A_Light0();
			return A_JumpIf(IsDoubleSpeed(),"AltFast");
		}
		M021 CCDDCC 1 
		{
			A_SetPitch(pitch+0.3);
			A_WeaponOffset(-2,-2,WOF_ADD);
		}
		M021 AAAAAAAA 1 A_WeaponOffSet(-1,-1,WOF_ADD);
		Goto AltFireHolding;
	AltFast:
		M021 CDC 1 
		{
			A_SetPitch(pitch+0.6);
			A_WeaponOffset(-4,-4,WOF_ADD);
		}
		M021 AAAA 1 A_WeaponOffSet(-2,-2,WOF_ADD);
		Goto AltFireHolding;
	
	/*
		// checks if still holding alt fire, otherwise, unzooms
	AltCheck:
		M021 A 0
		{
			if (GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK)
			{
				return ResolveState("AltFireHolding");
			}
			return ResolveState(null);
		}
		Goto AltFireReleaseButton;*/
	}
	
}

//--------------------------------------------------------------------------------
//	Weapon tokens
Class RepeaterCounter : Inventory	{ Default { Inventory.MaxAmount 3;	}}
Class RepeaterAimHolding : Inventory
{}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Alt fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

Class IncendiaryBullet : FastProjectile
{
	double anglea, angleb;
	int count;
	double x;
	double y;
	double z;
	double oldangle;
	Default 
	{
		Speed 90;
		Radius 2;
		Height 4;
		+HITTRACER
		+PAINLESS
		-BLOODSPLATTER
		alpha 0.9;
		scale 0.2;
		Damage 1;
		RenderStyle "Add";
		/*MissileType "FlareParticleSpawner"
		MissileHeight 8*/
	}
	States
	{
	Spawn:
		TRAC A 1 Bright
		{
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("FTFlameTrail2",0,0,random(0,2),0,0,frandom(0,1),0,32,128);
			}
		}
		Loop;
	Death:
		TNT1 AAAAAAA 2 A_SpawnItemEx("FlareParticleSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	XDeath:
		TNT1 A 0 
		{
			if (!tracer || tracer.health < 1)	{ return ResolveState("Dropout"); }
			anglea = angle;
			z = pos.z;
			A_Warp(AAPTR_TRACER,0,0,0,0,WARPF_NOCHECKPOSITION);
			angleb = angle;
			z -= pos.z;
			A_Warp(AAPTR_TRACER,0,0,z,anglea-angleb,WARPF_NOCHECKPOSITION,"Null",0,-0.5);
			return ResolveState("Warping");
		}
	Warping:
		D008 P 0 A_JumpIf(IsPointerEqual(AAPTR_TRACER,AAPTR_NULL),"Dropout");
		D008 P 0 A_JumpIfHealthLower(1,"DropOut",AAPTR_TRACER);
		D008 P 0 A_Warp(AAPTR_TRACER,0,0,z,anglea-angleb,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,null,0,-0.5);
		TNT1 A 0
		{
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("FlareParticleSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_SpawnParticle("FFEBDB",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(3,6),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
				A_SpawnParticle("EBA121",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(3,6),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
			}
			A_SpawnParticle("FF9100",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(3,6),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
			A_SpawnParticle("FF9933",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(3,6),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
	
			A_Explode(random(2,6),3);
			count++;
		}
		TNT1 A 1 Bright;
		D008 P 0 
		{
			if(count >= 105)
			{
				return ResolveState("Dropout");
			}
			else
			{
				count++;
			}
			return ResolveState(null);
		}
		Loop;

	Dropout:
		TROO ABCDE 3;
		Stop;
	}
}

Class FlareParticleSpawner : D4DFX 
{
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY ;
		TNT1 A 0 A_SpawnItemEx("FlmThrwrSmoke",random(5,-5),random(0,10),random(-5,5),frandom(0.3,-0.3),0,frandom(0.2,1.0),0,32,196);
		TNT1 A 0 A_SpawnItemEx("FTFlameTrail2",random(5,-5),random(0,10),random(-5,5),frandom(0.3,-0.3),0,frandom(0,1),0,32,128);
		TNT1 A 1;
		TNT1 A 0 A_SpawnItemEx("FlmThrwrSmoke",random(5,-5),random(0,10),random(5,5),frandom(0.3,-0.3),0,frandom(0.2,1.0),0,32,196);
		TNT1 A 1 A_SpawnItemEx("FTFlameTrail2",random(5,-5),random(0,10),random(0,5),frandom(0.3,-0.3),0,frandom(0,1),0,32,128);
		Stop;
	}
}

Class IncendiaryBulletDMG : IncendiaryBullet
{
	states
	{
	Warping:
		D008 P 0 A_JumpIf(IsPointerEqual(AAPTR_TRACER,AAPTR_NULL),"Dropout");
		D008 P 0 A_JumpIfHealthLower(1,"DropOut",AAPTR_TRACER);
		D008 P 0 A_Warp(AAPTR_TRACER,0,0,z,anglea-angleb,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,null,0,-0.5);
		TNT1 A 0
		{
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnParticle("FFEBDB",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(4,8),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
				A_SpawnParticle("EBA121",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(4,8),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
				A_SpawnItemEx("FlareParticleSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			}
			A_SpawnParticle("FF9100",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(4,8),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
			A_SpawnParticle("FF9933",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(4,8),0,0,0,0,frandom(1.85,-1.85),frandom(1.85,-1.85),frandom(-1.85,1.85),0,0,vel.z-0.06);
			A_Explode(random(4,8),3);
		}
		TNT1 A 1 Bright {count++;}
		D008 P 0 
		{
			if(count>=105)
			{
				return ResolveState("Dropout");
			}
			else
			{
				count++;
			}
			return ResolveState(null);
		}
		Loop;
	}
}