//==============================================================================
//==============================================================================
//	Carrion Cannon
//	Base code and design by Major Cooke
//	Sprites by Neccronixis (Hellshot from DOOM)
//	Sounds from Battlezone (1 & 2) by Activision

//	No, this weapon has absolutely nothing to do with the Hellshot.
//==============================================================================
//==============================================================================

//==============================================================================
// Pickup Upgrade
// - Increases the amount of ammo collected.

// Ammo Upgrade
// - Decreases the ammo cost.

// Cell Infusion
// - Primary stunlocks attached target

// Argent Accumulator
// +1 second to flame downpour.

enum CarrionConst
{
	CarrionAmmoCostPrimary = 14,
	CarrionAmmoCostSecondary = 500,
	BuildRequirement = 666,	//Amount of carrion needed to build the weapon.
};

Class D4CarrionCannon : Doom4Weapon
{	
	Array<Actor> Enemies;
	Array<Double> EnemyDistance;
	Default 
	{
		Doom4Weapon.MultiplayerWeapon true;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+DONTGIB
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		Weapon.AmmoType1 "D4Carrion";
		Weapon.AmmoGive1 200;
		Weapon.SlotNumber 1;
		Weapon.SelectionOrder 140;
		Weapon.SlotNumber 8;
		Weapon.SlotPriority 0.99;
		Inventory.PickupMessage "Carrion Cannon! Argent energy at your fingertips!";
		Obituary "%o was KenFunky Fried Fishstick'd by %k's Carrion Cannon.";
		Tag "Carrion Cannon";
	}
	
	action void OpeningPortals(int count, int ammoConsume)
	{
		invoker.owner.A_SetInventory("CarrionPortalsOpened",count);
		invoker.owner.A_AlertMonsters();
		invoker.owner.A_PlaySound("Doom4/Monsters/ArgentCharge",CHAN_AUTO,1,0,ATTN_NONE);
		invoker.owner.A_TakeInventory("D4Carrion",ammoConsume,TIF_NOTAKEINFINITE);
	}
	
	States
	{
	Spawn:
		WPPK O -1;
		Stop;
	Select:
		HELG H 0 
		{
			invoker.Enemies.Clear();
			invoker.EnemyDistance.Clear();
			A_SetInventory("CarrionShotOut",0);
			
			if (CountInv("D4CarrionToken") < BuildRequirement)
				A_SetInventory("D4CarrionToken",BuildRequirement);
			return ResolveState("SelLoop");
		}
	SelLoop:
		HELG H 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	Deselect:
		HELG H 0 
		{
			invoker.Enemies.Clear();
			invoker.EnemyDistance.Clear();
			A_SetInventory("CarrionShotOut",0);
		}
	DesLoop:
		HELG H 1 A_Lower;
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	Ready:
		HELG H 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Loop;
	/*==========================================================================
	 Primary Fire
	 ------------
	 Shoots an argent Projectile; which seeks after the enemy the player aims
	 for, or hits one in particular that's in the way. Upon contact, attaches
	 enemy and charges up. Will detonate if carrion is depleted or player stops 
	 holding the fire button. The greater the charge, the more powerful the 
	 explosion. 
	==========================================================================*/
	Fire:
		
		HELG F 2 bright
		{
			if (!CountInv("CarrionShotOut"))
			{
				A_GunFlash("Null");
				A_AlertMonsters();
				A_SetInventory("CarrionShotOut",1);
				A_FireProjectile("CarrionPrimary",0,0,4);
				A_PlaySound("CarrionCannon/Unleash",CHAN_WEAPON,1);
			}
		}
		HELG G 2 bright;
	Hold:
		HELG AABBCCDDEE 1 bright
		{
			A_GunFlash("Null");
			
			if (!(GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) || !CountInv("CarrionShotOut"))
			{
				A_SetInventory("CarrionShotOut",0);
				return ResolveState("HoldEnd");
			}
			return ResolveState(null);
		}
		Loop;
	HoldEnd:
		HELG H 1;
		Goto Ready;
	/*==========================================================================
	 Secondary Fire
	 ------------
	 Opens argent portals and rains down argent fire pillars upon a maximum
	 of five enemies at once.
	==========================================================================*/
	AltFire:
		HELG H 1
		{
			A_SetInventory("CarrionPortalsOpened",0);
			int ammoConsume = 500 / (CountInv("CarrionUpgradeAmmo") ? 2 : 1);
			if (FindInventory("PowerInfiniteAmmo", true) || GetCvar("sv_infiniteammo") || 
				CountInv("D4Carrion") >= ammoConsume)
			{
				// Set up the arrays, make sure they're zero.
				invoker.Enemies.Clear();
				invoker.EnemyDistance.Clear();
				
				// The iterator responsible for finding the monsters. Searches
				// for visible monsters that aren't friendly, dead or already
				// alight.
				ThinkerIterator it = ThinkerIterator.Create();
				Actor mo;
				while (mo = Actor(it.Next()))
				{
					if ((!mo.bVULNERABLE && !mo.bSHOOTABLE) || mo.bFRIENDLY || 
						mo.health < 1 || mo.CountInv("CarrionBombard") || mo is "BossBrain")
						continue;
						
					if (!mo.bISMONSTER || mo.bDORMANT)
						continue;
										
					if (absangle(AngleTo(mo),angle) > 50)
						continue;
						
					if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
						continue;
					
					invoker.Enemies.Push(mo);
					invoker.EnemyDistance.Push(Distance2D(mo));
				}
				
				// We now have our list of actors -- or do we? Do nothing if not.
				if (invoker.Enemies.Size() < 1)
					return ResolveState(null);
				
				int count = 0;
				double increment = 64;
				
				// Now search through this list of actors we've accumulated and
				// afflict them appropriately from closest to farthest.
				for (double i = 0; i <= 4096; i += increment)
				{
					int size = invoker.EnemyDistance.Size();
					
					for (int j = 0; j < size; j++)
					{
						if (size <= j)
							break;
						
						Actor enemy = invoker.Enemies[j];
						
						if (enemy == null || enemy.CountInv("CarrionBombard"))
							continue;
							
						double ed = invoker.EnemyDistance[j];
						if ((ed >= i) && (ed < i + increment))
						{
							let ptl = CarrionPortal(Spawn("CarrionPortal",enemy.pos));
							if (ptl)
							{
								ptl.master = //master and target = owner. This is not a bug.
								ptl.target = invoker.Owner;
								ptl.tracer = enemy;
								enemy.A_GiveInventory("CarrionBombard");
								count++;
							}
							if (count > 4)
							{
								invoker.OpeningPortals(count, ammoConsume);
								return ResolveState(1);
							}
						}
					}
				}
				
				if (count)
				{
					invoker.OpeningPortals(count, ammoConsume);
					return ResolveState(1);
				}
			}
			else
			{
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
			}
			return ResolveState(null);
		}
		Goto Ready;
		HELG A 0
		{
			invoker.Enemies.Clear();
			invoker.EnemyDistance.Clear();
		}
		HELG ABCDEABCDEABCDEABCDEABCDE 2 bright A_GunFlash("Null");
		Goto Ready;
	Reload:
		HELG A 2 bright
		{	
			let it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
			Actor mo;
			int total = 0;
			while (mo = Actor(it.Next()))
			{
				if (Distance3DSquared(mo) > (1024 ** 2)) continue;
				if (mo.bSPECIAL || mo.bMISSILE) continue;
				if (mo.CurState && mo.CurState.Tics > -1 && !mo.CurState.bCanRaise)
					continue;
				
				static const Class<Actor> id[] =
				{
					"BrainStem",
					"ColonGibs",
					"DeadCacodemon",
					"DeadDoomImp",
					"DeadMarine",
					"DeadShotgunGuy",
					"DeadZombieman",
					"GibbedMarine",
					"GibbedMarineExtra",
					"Gibs",
					"SmallBloodPool"
				};
				bool CanDo = (mo.bCORPSE);
				if (!CanDo)
				{
					int size = id.Size();
					for (int i = 0; i < size; i++)
					{
						Class<Actor> t1 = mo.GetReplacee(mo.GetClass());
						CanDo = (t1 == id[i]);
						if (CanDo) break;
					}
				}
				
				if (CanDo)
				{
					mo.A_GiveInventory("CarrionAbsorbant");
					total++;
				}
			}
			if (total > 0)
				A_GiveInventory("D4Carrion", 30 * (CountInv("CarrionUpgradePickup") ? 2 : 1));
		}
		HELG BCDE 2 bright;
		Goto Ready;
	}
}

Class CarrionPortalOpener : Actor 
{
	int cur;
	int count;
	int dist;
	int olddist;
	int cut;
	
	Default 
	{
		Radius 16;
		Height 28;
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay 
		{
			if (tid == 666)
			{
				ChangeTID(0);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*1,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*2,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*3,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*4,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				A_SpawnItemEx("CarrionPortal",0,0,0,0,0,0,72*5,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,666);
				return Destroy();
			}
			/*
			count = 0;
			cut = CountInv("CarrionUpgradeAmmo",TargetPtr) ? 2 : 1;
			while (dist <= 4096 && count < 5)
			{
				olddist = dist;
				dist += 256;
				A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION,"Null",0.5);
				cur = A_RadiusGive("CarrionPortalSpawner",dist,RGF_NOMASTER|RGF_MONSTERS|RGF_CUBE,1,null,"None",olddist,5 - count);
				count += cur;
			}
			if (count > 0)
			{	A_TakeInventory("D4Carrion",CarrionAmmoCostSecondary / cut,TIF_NOTAKEINFINITE,MasterPtr);	} //Will finish this tomorrow.
			A_GiveInventory("CarrionPortalsOpened",count,MasterPtr);
			*/
		}
		Stop;
	}
}

Class CarrionPortal : Actor 
{
	int count;
	int cut;
	int duration;
	int ptr;
	int spec;
	Default 
	{
		Projectile;
		+NOINTERACTION
		+MOVEWITHSECTOR
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{			
			
			if (tid == 666)
			{
				ChangeTID(0);
				spec++;
				Tracer = Target;
				duration = 35*3;
			}
			else
			{
				cut = CountInv("CarrionUpgradeAmmo",TargetPtr) ? 2 : 1;
				duration = (35 * 2) + (CountInv("CarrionUpgradeTime",TargetPtr) ? 35 : 0);
			}
			
		}
		TNT1 A 1
		{
			// Move up to a maximum of MaxHeight. No further.
			// Don't adjust height
			int MaxHeight = 512.0;
			Actor who = self; if (Tracer) who = Tracer;
			Vector3 tpos = (Tracer) ? tracer.pos : pos;
			
			if (Tracer)
			{	tpos.z = (tpos.z + MaxHeight > ceilingz) ? (ceilingz - 1.0) : (tpos.z + MaxHeight);	}
			else 
			{
				if ((ceilingz - 1.0 < tpos.z) || (ceilingz - floorz < MaxHeight - 1.0))
				{	tpos.z = ceilingz - 1.0;	}
			}
			
			
			if (!spec)
			{	Warp(who,tpos.x,tpos.y,tpos.z,0,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION|WARPF_INTERPOLATE);		}
			else
			{	Warp(Tracer,70,0,Min((ceilingz - floorz) - 1,512),4,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR|WARPF_USECALLERANGLE);	}
			
			if (count == 0)
			{	A_SpawnItemEx("CarrionSymbols",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);	}
			if (count % 2 == 0)
			{	A_SpawnItemEx("CarrionCeilingEnergy",frandom(0.0,3.0),0,0,frandom(-2.0,2.0),0,0,random(0,359),SXF_NOCHECKPOSITION);	}
			
			// Empower the other portals because one of them died before it could start.
			if (count < 17 && (!tracer || tracer.bKilled))
			{	
				if (CountInv("CarrionPortalsOpened",TargetPtr) == 1 && !GetCvar("sv_infiniteammo"))
				{
					A_GiveInventory("D4Carrion",CarrionAmmoCostPrimary / cut,TargetPtr);
				}
				if (!spec)	{ 	A_TakeInventory("CarrionPortalsOpened",1,0,TargetPtr);	}
				return ResolveState("Null");
			}
			
			if ((count >= 17) && (count % 3 == 0))
			{
				if (spec)
				{	A_SpawnItemEx("CarrionFirePillar",0,0,-4,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,(count == 18) ? 667 : 666);	}
				else
				{	A_SpawnItemEx("CarrionFirePillar",0,0,-4,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0,(count == 18) ? 1 : 0);	}
			}
			
			if (count >= duration)
			{
				if (Tracer)	Tracer.A_SetInventory("CarrionBombard",0);
				return ResolveState("Null");
			}
			count++;
			return ResolveState(null);
		}
		Wait;
	}
}

Class CarrionFirePillar : Actor 
{
	int t;
	double USpeed;
	double dist;
	double pz;
	int ptr;
	int count;
	Default 
	{
		Projectile;
		+NOINTERACTION
		+FORCERADIUSDMG
		+NODAMAGETHRUST
		+SEEKERMISSILE
		+EXTREMEDEATH
		Speed 50;
		Radius 1;
		Height 1;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			if (tid)
			{
				t = tid;
				ChangeTID(0);
			}
			if (Tracer)	dist = Distance3DSquared(Tracer);
			USpeed = (dist >= (1536 ** 2)) ? (dist / (17.5 ** 2)) : Speed;
			//speed = 50;
			A_ChangeVelocity(0,0,-USpeed,CVF_REPLACE);
		}
		TNT1 A 1
		{
			Pz = pos.z;
			// Preserve the Z at all times.
			
			//A_Warp(DefPtr,0,0,(pos.z - floorz),0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_TOFLOOR);
			
			count = int(USpeed / 8.0);
			if (!A_CheckRange(2048,"Null",true))
			{
				
				for (count; count > 0; count--)
				{
					A_SpawnItemEx("CarrionFlameFast",
						frandom(0.0,4.0),0,frandom(0.0,Pz - pos.z),
						frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION,GetCvar("HQEffectsWeapons")==1 ? 128 : 240);
				}
			}
			else
			{
				A_SpawnItemEx("CarrionFlameFast",
						frandom(0.0,4.0),0,frandom(0.0,Pz - pos.z),
						frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION,GetCvar("HQEffectsWeapons")==1 ? 64 : 215);
			}
			
			// This will never miss.
			if (A_JumpIfHigherOrLower("Death",null,0,0,false,TracerPtr) && t <= 1)
			{	
				A_Warp(TracerPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_STOP);	
				return ResolveState("Death");
			}
			else if (pos.z <= floorz)
			{
				A_Warp(DefPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR|WARPF_STOP);	
				return ResolveState("Death");
			}
			return ResolveState(null);
		}
		Wait;
	Death:
		TNT1 A 0
		{
			if (t >= 666)
			{
				bOldRadiusDmg = true;
				A_Explode(125,128,0,0,64);
			}
			else
			{
				A_Explode(125 / Clamp(CountInv("CarrionPortalsOpened",TargetPtr),1,5),96,0,0,48);
			}
			count = 25;
			
			if (!A_CheckSight("Null"))
			{
				while (count > 0)
				{
					A_SpawnItemEx("CarrionBlastSmall",frandom(30.0,60.0),0,10,frandom(0.0,5.0),0,0,random(0,359),SXF_NOCHECKPOSITION,200);
					A_SpawnItemEx("CarrionFlameFast",frandom(0.0,10.0),0,frandom(0.0,60.0),frandom(0.0,8.0),0,frandom(0.0,3.0),random(0,359),SXF_NOCHECKPOSITION,195);
					count--;
				}
			}
			else
			{
				A_SpawnItemEx("CarrionBlastSmall",frandom(30.0,50.0),0,10,0,0,0,random(0,359),SXF_NOCHECKPOSITION, GetCvar("HQEffectsWeapons")==1? 128 : 235);
				A_SpawnItemEx("CarrionFlameFast",frandom(0.0,10.0),0,frandom(0.0,60.0),frandom(0.0,8.0),0,frandom(0.0,3.0),random(0,359),SXF_NOCHECKPOSITION,GetCvar("HQEffectsWeapons")==1? 128 : 235);
			}
			
			if (t == 1 || t == 667)
			{	
				A_SpawnItemEx("CarrionBlastBack",0,0,15,0,0,0,0,SXF_NOCHECKPOSITION);
				A_PlaySound("CarrionCannon/Burning",5,1,1);
				return ResolveState(1);
			}
			return ResolveState("Null");
		}
		Wait;
		TNT1 A 55
		{
			if (CountInv("CarrionUpgradeTime",TargetPtr) || t >= 666)
			{
				A_SetTics(55+35);
			}
		}
		TNT1 A 35 
		{
			A_SetInventory("CarrionBombard",0,TracerPtr);
			A_PlaySound("CarrionCannon/BurnEnd",5,1,0);
		}
		Stop;
	}
}

Class CarrionBombard : Inventory {}

Class CarrionSymbols : Actor 
{
	const RollAmount = 8.0;
	const ScaleMul = 0.75;
	double  c;
	double  URoll;
	int t;
	int rng;
	double dist;
	double UCos;
	int UFloor;
	int duration;
	
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		+FLATSPRITE
		+ROLLSPRITE
		RenderStyle "Add";
		Radius 32;
		Alpha 0;
		Scale 0;
		//Translation "0:255=%[0,0,0]:[1.0,0.0,0.2]"
	}
	States
	{
	Spawn:
		RUNE C 0 NoDelay
		{
			duration = CountInv("CarrionUpgradeTime",TargetPtr) ? 35 : 0;
			URoll = RollAmount * randompick(-1,1);
		}
	Looping:
		"####" "#" 1
		{
			A_Warp(MasterPtr,0,0,-1,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			if (c >= 90.0)
			{	return ResolveState(1);	}
			c += (90.0/12.0);
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			A_FadeTo(0.99,(1.0/12.0),FTF_CLAMP);
			A_SetScale(sin(c) * ScaleMul);
			return ResolveState(null);
		}
		Loop;
	Shrink:
		"####" "#" 1
		{	
			A_Warp(MasterPtr,0,0,-1,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			if (t < (80 + duration) )
			{	t++;	}
			else
			{
				c += (90.0/12.0);
				A_SetScale(sin(c) * ScaleMul);
				if (Scale.X <= 0)	{	return ResolveState("Null");	}
			}
			
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			return ResolveState(null);
		}
		Loop;
	}
}

Class CarrionCeilingEnergy : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+FLATSPRITE
		+BRIGHT
		RenderStyle "Add";
		Scale 0.45;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SpawnItemEx("CCETurner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
			angle += random(0,359);
			A_SetScale((Scale.X+frandom(0.0,0.2))*randompick(-1,1));
			Scale.Y = (Scale.X*randompick(-1,1));
			
			return A_Jump(256,"S1","S2","S3");
		}
	S1:
		X003 BCD 1 A_SetTics(random(2,4));
		X003 EFGH 1 A_SetTics(random(2,5));
		X003 IJKLMN 1 A_SetTics(random(2,4));
		X003 OPQR 1 A_SetTics(random(1,3));
		X003 STUVWXYZ 1 A_SetTics(random(1,2));
		Stop;
	S2:
		X004 ABC 1 A_SetTics(random(1,3));
		X004 DEFG 1 A_SetTics(random(2,4));
		X004 HIJK 1 A_SetTics(random(2,3));
		X004 LMNOPQ 1 A_SetTics(random(1,3));
		Stop;
	S3:
		FX58 ABC 1 A_SetTics(random(1,3));
		"####" DEFG 1 A_SetTics(random(3,5));
		"####" HIJ 1 A_SetTics(random(2,4));
		"####" KLM 1 A_SetTics(random(2,3));
		"####" NOPQ 1 A_SetTics(random(1,2));
		Stop;
	}
}

Class CCETurner : Actor 
{
	double a;
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { a = frandom(-5.0, 5.0);	}
		TNT1 A 1
		{
			if (!IsPointerEqual(MasterPtr,NullPtr))
			{
				A_SetRoll(roll + a);
				A_SetRoll(roll,SPF_INTERPOLATE,MasterPtr);
				return ResolveState(null);
			}
			return ResolveState("Null");
		}
		Wait;
	}
}

Class CarrionFlameFast : Actor 
{
	const ScaleDown = 0.975;
	const VelUpMin = 0.1;
	const VelUpMax = 0.3;
	
	bool MoveSelf;
	Property MoveSelf: MoveSelf;
	Default 
	{
		CarrionFlameFast.MoveSelf true;
		+NOINTERACTION
		+NOTONAUTOMAP
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[2.0, 0.75, 0]";
		Scale 0.45;
	}
	
	void MoveAbout()
	{
		if (MoveSelf)
			A_ChangeVelocity(vel.x * ScaleDown, vel.y * ScaleDown, vel.z + frandom(VelUpMin,VelUpMax),CVF_REPLACE);
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			Scale.X *= randompick(-1,1);
			return A_Jump(256,"S1","S2","S3","S4","S5");
		}
	S1:
		X052 ABCDEFGHIJKLMNOPQRS 1 MoveAbout();
		Stop;
	S2:
		X053 ABCDEFGHIJKLMNOPQRSTU 1 MoveAbout();
		Stop;
	S3:
		X054 ABCDEFGHIJKLMNOPQRS 1 MoveAbout();
		Stop;
	S4:
		X055 ABCDEFGHIJKLMNOPQRS 1 MoveAbout();
		Stop;
	S5:
		X056 ABCDEFGHIJKLMNOPQR 1 MoveAbout();
		Stop;
	}
}

Class CarrionFlameFastNoMove : CarrionFlameFast
{
	Default
	{
		CarrionFlameFast.MoveSelf false;
	}
}

Class CarrionBlastBack : Actor 
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[2.0,0.75,0]";
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+BRIGHT
		RenderStyle "Add";
		Scale 1.25;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SpawnItemEx("CCETurner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
			angle += random(0,359);
			A_SetScale((Scale.X+frandom(0.0,0.2))*randompick(-1,1));
			Scale.Y = (Scale.X*randompick(-1,1));
			
			return A_Jump(256,"S1","S2","S3");
		}
	S1:
		X003 BCD 1 A_SetTics(random(2,4));
		X003 EFGH 1 A_SetTics(random(2,5));
		X003 IJKLMN 1 A_SetTics( random(2,4));
		X003 OPQR 1 A_SetTics(random(1,3));
		X003 STUVWXYZ 1 A_SetTics(random(1,2));
		Stop;
	S2:
		X004 ABC 1 A_SetTics(random(1,3));
		X004 DEFG 1 A_SetTics(random(2,4));
		X004 HIJK 1 A_SetTics(random(2,3));
		X004 LMNOPQ 1 A_SetTics(random(1,3));
		Stop;
	S3:
		FX58 ABC 1 A_SetTics(random(1,3));
		"####" DEFG 1 A_SetTics(random(3,5));
		"####" HIJ 1 A_SetTics(random(2,4));
		"####" KLM 1 A_SetTics(random(2,3));
		"####" NOPQ 1 A_SetTics(random(1,2));
		Stop;
	}
}
Class CarrionBlastSmall : Actor 
{
	double  URoll;
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+ROLLSPRITE
		+ROLLCENTER
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[2.0, 0.75, 0]";
		Scale 0.25;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			roll = frandom(0.0,359.0);
			URoll = frandom(3.0,8.0);
			A_SetScale((Scale.X+frandom(0.0,0.2))*randompick(-1,1));
			Scale.Y = (Scale.X*randompick(-1,1));
			
			return A_Jump(256,"S1","S2","S3");
		}
	S1:
		X003 BCDEFGHIJKLMNOPQRSTUVWXYZ 1
		{	A_SetRoll(roll + URoll, SPF_INTERPOLATE);	}
		Stop;
	S2:
		X004 ABCDEFGHIJKLMNOPQ 1
		{	A_SetRoll(roll + URoll, SPF_INTERPOLATE);	}
		Stop;
	S3:
		FX58 ABCDEFGHIJKLMNOPQ 1
		{	A_SetRoll(roll + URoll, SPF_INTERPOLATE);	}
		Stop;
	}
}

Class CarrionPortalsOpened : Inventory
{ Default {	Inventory.MaxAmount 5;	Inventory.InterhubAmount 0;	}}

//==============================================================================
//==============================================================================
Class CarrionPrimary : FastProjectile
{
	enum CarrionPrimary
	{
		MaxTime = 70,
		MaxDamage = 5000,
		MaxAmmo = 5000,
	};
	const SizeMul = 0.4;
	const RollAmt = 360.0 / 14.0;
	int neg;
	int maxcharge;
	int charge;
	int hasammo;
	int level;
	int count;
	double sizex;
	double sizey;
	double USin;
	double dmg;
	int cut;
	CarrionShotTrackingLaser Laser;
	
	Default 
	{
		Projectile;
		+BRIGHT
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEYBILLBOARD
		+HITTRACER
		+FORCERADIUSDMG
		+FORCEPAIN
		+SEEKERMISSILE
		+SCREENSEEKER
		+SKYEXPLODE
		+EXPLODEONWATER
		+DONTREFLECT
		+EXTREMEDEATH
		+THRUACTORS
		Speed 60;
		Radius 4;
		Height 4;
		Damage 0;
		RenderStyle "Add";
		Xscale 0.3;
		Yscale 0.8;
		Translation "0:255=%[0,0,0]:[1.0,0.45,0.0]";
		MissileType "CarrionPrimaryTrailSpawner";
		MissileHeight 8;
	}
	
	void ThrustActor(Actor mo, int dmg)
	{
		if (!mo || mo.bDONTTHRUST || mo.health < 1 || mo.Mass < 1 || dmg < 1)
			return;
			
		double thrust = double(dmg) * 0.5 / mo.Mass;
		//if (thrust < 0.01)	return;
		
		A_Face(mo, 0, 0, 0, 0, FAF_MIDDLE);
		
		double cospitch = cos(pitch);
		Vector3 apply =	(
			thrust * cospitch * cos(angle),
			thrust * cospitch * sin(angle),
			thrust * -sin(pitch));
		
		mo.Vel += apply;
	}
	
	States
	{
	Spawn:
		X016 A 0 NoDelay 
		{
			Master = Target;
			neg = randompick(-1,1);
			Laser = CarrionShotTrackingLaser(Spawn("CarrionShotTrackingLaser", pos));
			if (Laser)
			{
				Laser.Target = Target;
				Laser.Orb = self;
			}
		}
	Moving:
		X016 ABCDEFGHIJKLMNOPQRSTUVWXY 1
		{
			// If not actively holding primary fire
			// or player died / goes out of sight,
			// kill the Projectile.
			if (!target || !target.CountInv("CarrionShotOut") || target.health < 1)
			{	
				bNOINTERACTION = true;
				A_Stop();
				return ResolveState("Death");	
			}
			
			if (!tracer || tracer.health < 0)
			{	
				bBOUNCEONFLOORS = false;
				bBOUNCEONCEILINGS = false;
				bThruActors = true;
			}
			else
			{	
				bBOUNCEONFLOORS = true;
				bBOUNCEONCEILINGS = true;
				bTHRUACTORS = false;
			}
			A_FaceTracer(0,0);
			A_SeekerMissile(90,90,SMF_LOOK|SMF_PRECISE,256);
			
			// Seeker missiles set those they're after as tracer.
			// If the enemy dies before it can make contact, unsolidify itself
			// so it passes through non-shootable materials.
			
			
			return ResolveState(null);
		}
		Loop;
	Crash:
	XDeath:
		X016 ABCDEFGHIJKLMNOPQRSTUVWXY 1 Bright
		{
			// See https://zdoom.org/Changelog/a210aaea3/files for details.
			let targ = target;
			let trac = tracer;
			if (targ && trac && targ.health > 0 && trac.health > 0)
			{
				if (targ.CountInv("CarrionUpgradeStun") && charge % 6 == 0)
				{	
					bCausePain = true;
					bForcePain = true;
					// Just to prevent it from dying. It's only meant to 'stun'.
					if (trac.health > 0 && !trac.bDORMANT) 
						trac.TriggerPainChance(DamageType, bFORCEPAIN);
					
				}
				if (charge < MaxTime &&
					targ.CountInv("CarrionShotOut") &&
					//(GetPlayerInput(MODINPUT_BUTTONS,TargetPtr) & (BT_ATTACK)) &&
					trac.health > 0)
				{
					cut = CountInv("CarrionUpgradeAmmo",TargetPtr) ? 2 : 1;
					
					bool infammo = (sv_infiniteammo || targ.FindInventory("PowerInfiniteAmmo",true));
					
					if (infammo || targ.CountInv("D4Carrion") >= CarrionAmmoCostPrimary / cut)
					{
						if (!charge)
						{
							sizex = Scale.X;
							sizey = Scale.Y;
							
							A_PlaySound("Doom4/Monsters/ArgentCharge",CHAN_AUTO,1,0,ATTN_NONE);
						}
						A_SetRoll(roll + RollAmt * neg,SPF_INTERPOLATE);
						
						A_Warp(TracerPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,"Null",0.5);
						if (trac.bSHOOTABLE)
						{
							USin += (90.0/70.0);
							A_SetScale(sizex + (sin(USin) * SizeMul), sizey + (sin(USin) * SizeMul));
							int dspeed = (targ.FindInventory("PowerDoubleFiringSpeed", true) != null) ? 2 : 1;
							charge += 1 * dspeed;
							targ.A_GiveInventory("CarrionTick",1);
							targ.A_TakeInventory("D4Carrion",(CarrionAmmoCostPrimary * dspeed) / cut,TIF_NOTAKEINFINITE);
						}
						return ResolveState(null);
					}
				}
			}
			return ResolveState("Death");
		}
		Loop;
	Death:
		TNT1 A 10
		{
			if (charge)
			{
				if (Laser)	Laser.Kill = true;
				A_GiveInventory("CarrionTick",charge,TargetPtr);
				A_GiveInventory("CarrionShootSound",1,TargetPtr);
				A_GiveInventory("KillLaser");
				
				Sound 							explosnd = "CarrionCannon/ExplosionBig";
				if (charge <= (70/3))			explosnd = "CarrionCannon/ExplosionSmall";
				else if (charge <= (70/3)*2)	explosnd = "CarrionCannon/ExplosionMedium";
					
				A_PlaySound(explosnd, CHAN_AUTO);
				A_SpawnItemEx("CarrionShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				dmg = charge * (MaxDamage / 70.0);
				
				
				
				// Thrust away from the player by setting up.
				double ta = angle, tp = pitch;
				A_FaceTarget(0,0,0,0,FAF_MIDDLE);
				if (tracer) Warp(tracer, cos(pitch), 0, -sin(pitch), 0, WARPF_NOCHECKPOSITION|WARPF_USECALLERANGLE, 0.5);
				
				// Then explode.
				int idmg = int(dmg);
				int radbase = 128;
				int fullrad = radbase + charge;
				int rad = radbase + (2 * charge);
				int dmgflags = DMG_EXPLOSION|DMG_THRUSTLESS; //Emulating A_Explode, count as such.
				let MCEvent = MCHandler.Fetch();
				if (MCEvent)
				{
					if (tracer)
					{
						ThrustActor(tracer, dmg);
						int tdmg = tracer.DamageMobj(self, target, idmg, 'Normal', dmgflags);
					//	Console.Printf("Damage: %d", tdmg);
					}
					for (int i = 0; i < MCEvent.Monsters.Size(); i++)
					{
						Actor mo = MCEvent.Monsters.Actors[i];
						if (!mo || mo.health < 1 || mo == target || mo == tracer || 
							!CheckSight(mo, SF_IGNOREWATERBOUNDARY|SF_IGNOREVISIBILITY))
							continue;
						
						int ddmg = GetRadiusDamage(mo, idmg, rad, fullrad);
						if (ddmg < 1)	continue;
						
						ThrustActor(mo, ddmg);
						int tdmg = mo.DamageMobj(self, target, ddmg, 'Normal', dmgflags);
					//	Console.Printf("Damage: %d", tdmg);
					}
				}
				else	A_Explode(idmg,rad,0,0,fullrad);
				
				angle = ta; pitch = tp;
				A_SpawnItemEx("D4RocketExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				
				if (charge >= 50)
				{
					let boom = CarrionExplosion(Spawn("CarrionExplosion",pos));
					if (boom && charge >= MaxTime)
					{
						boom.ExplosionSize = 5;
					}
				}
			}	
			else A_GiveInventory("NoLaser");
			
			if (target)	target.A_SetInventory("CarrionShotOut",0);
			
		}
		Stop;
	}
}

Class CarrionPrimaryTrailSpawner : Actor //dummy to spawn muliple trails through fastprojectile's method
{
	Default 
	{
		+NOINTERACTION
		Translation "0:255=%[0,0,0]:[1,0.25,0]";
	}
	States
	{
	Spawn:
		TNT1 A 3 NODELAY
		{
			A_SpawnItemEx("SummonerTrail",-2,0,random(0,10),0,0,frandom(0.5,3),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			A_SpawnItemEx("SummonerTrail",-2,0,random(0,-10),0,0,frandom(-0.5,-3),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		}
		Stop;
	}
}
Class CarrionTick : Inventory
{	Default { Inventory.MaxAmount 70;	Inventory.InterhubAmount 0;	}}

Class CarrionShootSound : CustomInventory
{
	const MaxAmt = 70;
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
				 if (CountInv("CarrionTick") >= MaxAmt)			{	A_PlaySound("CarrionCannon/Shoot7",CHAN_WEAPON,1);	}
			else if (CountInv("CarrionTick") >= (MaxAmt/4)*3)	{	A_PlaySound("CarrionCannon/Shoot6",CHAN_WEAPON,1);	}
			else if (CountInv("CarrionTick") >= (MaxAmt/4)*2)	{	A_PlaySound("CarrionCannon/Shoot5",CHAN_WEAPON,1);	}
			else if (CountInv("CarrionTick") >= (MaxAmt/4)*1)	{	A_PlaySound("CarrionCannon/Shoot4",CHAN_WEAPON,1);	}
			else 												{	A_PlaySound("CarrionCannon/Shoot3",CHAN_WEAPON,1);	}
			A_SetInventory("CarrionTick",0);
		}
		Stop;
	}
}

//==============================================================================
// Effects
//==============================================================================

Class CarrionShotTrackingLaser : Actor
{
	CarrionPrimary Orb;
	bool Kill;
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 1
		{
			if (!Orb || !Target)	return Destroy();
			//if (AbsAngle(Angle, AngleTo(Orb)) > 45)	return;
			
			Class<Actor> Which = (Kill) ? "CarrionBeamBoomSpawner" : "CarrionBeamSpawner";
			Pitch = Target.Pitch;
			Warp(Target,0,7.5,0,0,WARPF_NOCHECKPOSITION|WARPF_STOP,0.6 + sin(pitch) * 0.2, -0.6 + cos(pitch) * 0.4);
			
			let Beam = Spawn(Which, pos);
			if (Beam)
			{
				Beam.Tracer = Orb;
				Beam.Target = Target;
				Beam.Master = Target;
				Beam.Angle = Angle;
				Beam.Pitch = Pitch;
			}
		}
		Wait;
	}
}

Class CarrionExplosion : Actor
{
	int ExplosionSize;
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[2.0,1.0,0.0]";
		Alpha 0.0;
		Scale 1;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		X119 A 1
		{
			Vector3 move = (0,0,-24);
			A_FadeIn(0.33);
			if (ExplosionSize > 4)
			{
				move = (0,0,-48);
				A_SetScale(1.5);
				A_PlaySound("Doom4/Other/DollExplode",CHAN_AUTO,1);
			}
			SetOrigin(pos + move, false);
		}
		X119 BCDEFGHIJKLMNOPQRSTUVWXYZ 1
		{
			if (alpha < 0.99)
				A_FadeIn(0.33, FTF_CLAMP);
		}
		X120 ABCDEFGHIJKLMNO 1;
		X120 PQRSTUVW 1 A_FadeOut(1.0/8.0);
		Stop;
	}
}

Class CarrionShockwave : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+ROLLCENTER
		+BRIGHT
		RenderStyle "Add";
		Scale 0.25;
	}
	
	States
	{
	Spawn:
		X072 L 1 NoDelay
		{
			angle = random(0,359);
		}
		X072 L 1
		{
			A_SetScale(Scale.X + 0.2);
			A_FadeOut(0.05);
			A_SetAngle(angle + 10, SPF_INTERPOLATE);
		}
		Wait;
	}
}

//==============================================================================
// Absorption
//==============================================================================

Class CarrionAbsorbant : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	
	States
	{
	Pickup:
		TNT1 A 0
		{
			//Do not remove things with specials assigned. Wait until they trigger first.
			if (special)	{	return false;	}
			bSOLID = bCORPSE = false;
			
			A_SpawnItemEx("CorpseFader",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME);
			A_Remove(DefPtr,RMVF_EVERYTHING);
			return true;
		}
		Stop;
	}
}

Class CorpseFader : Actor 
{
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Stencil";
		StencilColor "Red";
	}
	States
	{
	Spawn:
		"----" A 1 
		{
			A_FadeOut(0.05);
		}
		Wait;
	}
}

Class CarrionShotOut : Inventory { Default { Inventory.InterhubAmount 0; }}
Class CarrionLevel : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.InterhubAmount 10; }}
Class NoLaser : Inventory { Default { Inventory.InterhubAmount 0; }}
Class KillLaser : Inventory { Default { Inventory.InterhubAmount 0; }}