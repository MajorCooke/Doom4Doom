//===================================================================================================
//===================================================================================================
//
//		Chainsaw
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code enhancement: Major Cooke
//
//===================================================================================================
//===================================================================================================
Class D4Chainsaw : Doom4Weapon //replaces Chainsaw
{
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		+WEAPON.ALT_AMMO_OPTIONAL
		+FLOORCLIP
		+DONTGIB
		Scale 0.6;
		Weapon.AmmoType1 "D4Fuel";
		Weapon.AmmoType2 "D4Fuel";
		Weapon.AmmoGive1 2;
		Weapon.AmmoUse1 0;
		Weapon.AmmoUse2 1;
		Weapon.SlotNumber 1;
		Weapon.SlotPriority 1.0;
		Obituary "%o was shredded to pieces by %k's Chainsaw.";
		Inventory.PickupMessage "Chainsaw. Shred and shear!";
		Tag "Chainsaw";
		Weapon.SelectionOrder 90;
	}
	
	// Upon spawning or travelling, makes the fuel spawn with some ammo types.
	override void EnableAmmoSpawn()
	{
		if (!Event) Event = D4DHandler.Fetch();
		if (Event)	Event.SetActorSpawn(D4DHandler.ChainsawAmmo, true);
	}
	
	States
	{
	Spawn:
		WPPK A -1;
		Wait;
	Select:
		CSWN A 0 
		{
			if (player && player.mo == invoker.owner)
			{
				A_PlaySound("Doom4/Weapon/Chainsaw/Idle",CHAN_WEAPON,0.25,1);
			}
			if (CountInv("BloodyChainsawToken"))	return ResolveState("BloodySel");
			
			return ResolveState("ContinueSelect");
		}
		
		BloodySel:
			CSWB A 0 { return ResolveState("ContinueSelect"); }	
		ContinueSelect:
			---- A 1 A_Raise(WeaponSwitchSpeed);
			Wait;
			
	Deselect:
		"####" "#" 0 
		{
			A_StopSound(CHAN_WEAPON);
			A_PlaySound("Doom4/Weapon/Chainsaw/Down",5,0.5);
			
			// Must be spent immediately or you get nothing.
			A_SetInventory("OnAcid",0);
			A_Overlay(Ch_Sizzling,"Null");
			A_Overlay(AcidFX,"Null");
		}
		---- A 1 A_Lower;
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
		
	
	
	Ready:
	Idle:
		CSWN A 0 
		{
			if (player && player.mo && player.mo == invoker.owner)
				A_PlaySound("Doom4/Weapon/Chainsaw/Idle",CHAN_WEAPON,0.25,1);
		}
		//CSWN A 0 A_JumpIfInventory("ChainsawKill",1,"ReadyAfterCSawKill");
		CSWN A 0 
		{
			A_TakeInventory("ChainsawKill",1000);
			return A_JumpIfInventory("BloodyChainsawToken",1,"PrepareSpriteBloodyReady");
		}
		Goto PrepareSpriteNormalReady;

		PrepareSpriteNormalReady:
			CSWN A 0;
			Goto ContinueReady;
		PrepareSpriteBloodyReady:
			CSWB A 0;
			Goto ContinueReady;
			
	ContinueReady:
		"####" A 1
		{
			if (!CountInv("OnAcid"))
			{
				return ResolveState(1);
			}
			else
			{
				A_WeaponReady(WRF_ALLOWUSER2);
				return ResolveState(null);
			}
		}
		Loop;
		"####" AABB 1 
		{
			A_WeaponReady(WRF_ALLOWUSER2);
			if (random(1,3)==1)
			{
				A_WeaponOffset(0+random(1,-1),32+random(-1,1));
			}
		}
		Loop;
	//==========================================================================
	// Overlays
	AcidFX:
		M666 A 1
		{
			if (CountInv("OnAcid"))
			{	A_SpawnParticle("22FF22",SPF_FULLBRIGHT|SPF_RELATIVE,25,frandom(3.0,5.0),0,cos(pitch)*8,frandom(-2.0,2.0),32.0-sin(pitch)*frandom(16.0,20.0),frandom(1.0,3.0),frandom(-2.0,2.0),frandom(-3.0,3.0),-0.004,-0.004,-0.01);	}
			else
			{	return ResolveState("Null");	}
			return ResolveState(null);
		}
		Loop;
	Sizzling:
		M666 AAAAAAAAAA 35;
		M666 A 35 A_DamageSelf(10,"Slime",DMSS_AFFECTARMOR);
		Wait;
	//==========================================================================	
	// Primary fire
	Fire:
		"####" AAA 1 A_WeaponOffset(-12,25,WOF_ADD);
		"####" "#" 0 A_PlaySound("Doom4/Weapon/Chainsaw/Fire",CHAN_WEAPON,1.0,1);
		"####" CCC 1 A_WeaponOffset(12,-25,WOF_ADD);
	Hold:
		"####" C 1 
		{
			A_Saw(0,0,random(10,18),"ChainsawPuffDiagonal",SF_NORANDOM);
			A_WeaponOffset(0+random(2,-2),32+random(0,4));
		}
		"####" D 1 A_WeaponOffset(0+random(2,-2),32+random(0,4));
		"####" C 0 A_Refire;
	EndHold:
		"####" "#" 0 A_WeaponOffset(0,32);
		"####" CCC 1 A_WeaponOffset(-12,25,WOF_ADD);
		"####" "#" 0 A_PlaySound("Doom4/Weapon/Chainsaw/Down",5,0.5);
		"####" AAA 1 A_WeaponOffset(12,-25,WOF_ADD);
		Goto Idle;
		
	//===========================================================================	
	// Secondary fire
	AltFire:
		"####" "#" 1
		{
			target = GetPlayerTarget();
			if (!CountInv("OnAcid") && target && target is "ExplosiveBarrel" && Distance3DSquared(target) <= 128 ** 2)
			{
				target.A_GiveInventory("ReplaceBarrel",1);
				SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
				A_Stop();
				return ResolveState("Dipper");
			}
			else if (!CountInv("D4Fuel") && !invoker.CheckAmmo(1, false, true) && !CountInv("OnAcid"))
			{	
				D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
				A_PlaySound("Doom4/Player/Nope");
				return ResolveState("HoldingAfterNoAmmoMessage");
			}
			return ResolveState(1);
		}
		"####" AAA 1 A_WeaponOffset(-12,25,WOF_ADD);
		"####" "#" 0 A_PlaySound("Doom4/Weapon/Chainsaw/AltFire",CHAN_WEAPON,1.0,1);
		"####" EEE 1 A_WeaponOffset(12,-25,WOF_ADD);
		
	AltHold:
		"####" A 0 A_JumpIfInventory("BloodyChainsawToken",1,"PrepareSpriteBloodyAltHold");
		Goto PrepareSpriteNormalAltHold;

		PrepareSpriteNormalAltHold:
			CSWN A 0;
			Goto ContinueAltHold;	
		PrepareSpriteBloodyAltHold:
			CSWB A 0;
			Goto ContinueAltHold;
	NEA:
		"####" A 0 
		{
			D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
			A_PlaySound("Doom4/Player/Nope");
			return ResolveState("HoldingAfterNoAmmoMessage");
		}
	NEAHold:
		"####" AA 1 
		{
			if (random(1,3)==1)
			{
				A_WeaponOffset(0+random(1,-1),32+random(0,1));
			}
		}
		"####" "#" 0 A_Refire(1);
		Goto Ready;
		"####" BB 1 
		{
			if (random(1,3)==1)
			{
				A_WeaponOffset(0+random(1,-1),32+random(0,1));
			}
		}
		"####" "#" 0 A_Refire("NEAHold");
		Goto Ready;
	Dipper:
		"####" AAA 1 A_WeaponOffset(-12,25,WOF_ADD);
		CSWN A 15 
		{
			A_PlaySound("Doom4/Weapon/Chainsaw/Dip",CHAN_AUTO,1);
			A_SetInventory("BloodyChainsawToken",0);
		}
		"####" AAA 1 A_WeaponOffset(12,-25,WOF_ADD);
		"####" A 0 
		{
			A_GiveInventory("OnAcid",1);
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			A_Overlay(Ch_Sizzling,"Sizzling");
			A_Overlay(AcidFX,"AcidFX");
		}
		Goto Ready;
	NotEnoughAmmo:
		"####" A 0 
		{
			D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
			A_PlaySound("Doom4/Player/Nope");
		}
		"####" EEE 1 A_WeaponOffset(-12,25,WOF_ADD);
		"####" AAA 1 A_WeaponOffset(12,-25,WOF_ADD);
	HoldingAfterNoAmmoMessage:	//this one is to guarantee player doesnt accidentally kill more monsters and spend fuel by holding altfire 
		"####" AB 1
		{
			if (random(1,3)==1)
				A_WeaponOffset(0+random(1,-1),32+random(0,1));
			
		}
		"####" E 0 A_Refire("HoldingAfterNoAmmoMessage");
		Goto Ready;
		
	DealDamage:
		"####" "#" 0 
		{
			A_PlaySound("Doom4/Weapon/Chainsaw/Execute",5,0.4);
			A_SetBlend("Red",0.4,35);
			A_WeaponOffset(0,32); //resets to original offsets
		}
		CSWB EFEF 1;  //has sprite names, because will always be bloody after execution
		CSWB EEE 1 A_WeaponOffset(-12,25,WOF_ADD);
		"####" "#" 0 A_PlaySound("Doom4/Weapon/Chainsaw/Idle",CHAN_WEAPON,0.25,1);	//returns to idle(ready) anim
		"####" AAA 1 A_WeaponOffset(12,-25,WOF_ADD);
		
	HoldingAfterPinataKill:	//this one is to guarantee player doesnt accidentally kill more monsters and spend fuel by holding altfire
		"####" AB 1 
		{
			A_Overlay(Ch_Sizzling,"Null");
			if (random(1,3)==1)
				A_WeaponOffset(0+random(1,-1),32+random(0,1));
		}
		"####" E 0 A_Refire("HoldingAfterPinataKill");
		"####" E 0 A_TakeInventory("ChainsawKill",1000);
		Goto Ready;
	
	ContinueAltHold:
		"####" E 0 A_FireBullets(0,0,1,0,"ChainsawPuffPinata",0,71);
		"####" EF 1
		{
			if (CountInv("NotEnoughFuel"))
			{	
				A_SetInventory("NotEnoughFuel",0);
				return ResolveState("NotEnoughAmmo");	
			}
			if (CountInv("ChainsawKill"))
			{	
				A_SetInventory("ChainsawKill",0);
				return ResolveState("DealDamage");	
			}
			if (!CountInv("OnAcid"))
			{	A_WeaponOffset(0+random(3,-3),32+random(0,6));	}
			A_FireBullets(0,0,1,0,"ChainsawPuff",0,40);
			return ResolveState(null);
		}
		
		"####" E 0 A_Refire; //it constantly loops back to "hold" where all the distance/targethealth/ammo checks are
		Goto EndAltHold;
			
	EndAltHold:	//the animation between firing and idle
		"####" EEE 1 A_WeaponOffset(-12,25,WOF_ADD);
		"####" "#" 0 A_PlaySound("Doom4/Weapon/Chainsaw/Down",5,0.6);
		"####" AAA 1 A_WeaponOffset(12,-25,WOF_ADD);
		Goto Idle;

	ChainsawFinished: 	//i dont think this is used anymore :P
		"####" EF 1 A_WeaponOffset(-12,10,WOF_ADD);
		"####" ABABABABABAB 1 A_WeaponOffset(2,-2,WOF_ADD);
		Goto EndAltHold;	//lowers the firing chainsaw
	}
}
Class CountDownToBurn : Inventory { Default { Inventory.MaxAmount 350; Inventory.InterhubAmount 0; }}
Class NotEnoughFuel : Inventory { Default { Inventory.InterhubAmount 0; }}
//-------------------------------------------------------------------
// Main vertical puff
Class ChainsawPuff : Actor 
{
	Default 
	{
		+CLIENTSIDEONLY
		Radius 10;
		+NOINTERACTION
		//+ALWAYSPUFF
		+PUFFONACTORS
		+PUFFGETSOWNER
		+ALLOWTHRUFLAGS	//to ignore pinky's shield
		+THRUGHOST
		+FORCEXYBILLBOARD
		Scale 0.2;
		RenderStyle "Add";
		Obituary "%o was RAWRsawed by %k's hungry hungry hippo-like metal teeth.";
		//Alpha 0.6;
		Decal "ChainsawVertical";
		DamageType "ChainsawKill";
	}
	States
	{
	Spawn:	//hit non bleeding actor
		TNT1 A 0 NODELAY A_PlaySound("Doom4/Weapon/Chainsaw/WallHit",CHAN_BODY,0.5);
		Goto Choose;
	
	Xdeath:	//hit bleeding actor
			TNT1 A 1;
			Stop;
			
	Crash:	//hit walls or planes
		TNT1 A 0 A_PlaySound("Doom4/Weapon/Chainsaw/WallHit",CHAN_BODY,0.5);
	Choose:
		TNT1 A 0 
		{
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnParticle("FF9100",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,3),frandom(70,-70),0,0,0,frandom(1,4),0,frandom(-1,1.5),vel.x-0.03,vel.y-0.03,vel.y-0.2);
				A_SpawnParticle("FF9933",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,3),frandom(70,-70),0,0,0,frandom(1,4),0,frandom(-1,1.5),vel.x-0.03,vel.y-0.03,vel.y-0.2);
				A_SpawnParticle("FFEBDB",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,3),frandom(70,-70),0,0,0,frandom(1,4),0,frandom(-1,1.5),vel.x-0.03,vel.y-0.03,vel.y-0.2);
				A_SpawnParticle("EBA121",SPF_FULLBRIGHT|SPF_RELATIVE,random(10,22),random(1,3),frandom(70,-70),0,0,0,frandom(1,4),0,frandom(-1,1.5),vel.x-0.03,vel.y-0.03,vel.y-0.2);
			}
		}
		TNT1 A 0 A_Jump(256,"Type1","Type2");
	Type1:
		DB12 A 1 Light("YellowSmallPoint4") Bright;
		DB12 B 1 Light("YellowSmallPoint4") Bright;
		DB12 C 1 Light("YellowSmallPoint5") Bright;
		DB12 C 1 A_FadeOut();
		Wait;
	Type2:
		DB13 A 1 Light("YellowSmallPoint4") Bright;
		DB13 B 1 Light("YellowSmallPoint4") Bright;
		DB13 C 1 Light("YellowSmallPoint5") Bright;
		DB13 C 1 A_FadeOut();
		Wait;
	}
}

Class ChainsawPuffDiagonal : ChainsawPuff
{
	Default 
	{
		Decal "ChainsawDiagonal";
	}
}



Class ChainsawPuffPinata : ChainsawPuff
{
	int UColor;
	int count;
	int cap;
	int quad;
	Default 
	{
		+NOINTERACTION
		+PUFFGETSOWNER
		+PAINLESS
		+HITTRACER
		+PUFFONACTORS
		+EXTREMEDEATH
		-ALLOWTHRUFLAGS	//because i added them in the puff above
		-THRUGHOST
		+BLOODLESSIMPACT
		DamageType "ChainsawPinata";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			if (tracer && tracer.bShootable)
			{	return ResolveState("XDeathChecker");	}
			return ResolveState("Super::Spawn");
		}
		Goto Super::Spawn;
	XDeath:	//hit bleeding actor
	XDeathChecker:
		TNT1 A 0
		{						
			if (!tracer || !tracer.bShootable || !tracer.bIsMonster || tracer.bInvulnerable || tracer.bNoDamage)
			{
				return ResolveState("Null");
			}
			return ResolveState("ShreddingTime");			
		}
		Goto ShreddingTime;
	ShreddingTime:
		TNT1 A 0
		{
			if (!Target || !Tracer)	return ResolveState("Null");
			cap = Target.CountInv("D4Fuel");
			
			// Get the real damage.
			int RealDmg = Target.GetModifiedDamage("ChainsawPinata", 200, false, self, tracer, DMG_NO_FACTOR|DMG_NO_PROTECT);
			//Prevent division by 0.
			if (RealDmg < 1)	return ResolveState("Null");
			
			int AmmoCost = int(ceil(double(Tracer.Health) / double(RealDmg)));
			RealDmg *= AmmoCost;
			
			// 
			if (Target.CountInv("OnAcid") || 
				sv_infiniteammo || Target.FindInventory("PowerInfiniteAmmo",true) ||
				AmmoCost <= cap)
			{
				tracer.SpawnBlood(pos, tracer.AngleTo(self), RealDmg);
				int hp = tracer.health;
				
				int check = tracer.DamageMobj(self, target, RealDmg, "ChainsawPinata", DMG_NO_FACTOR);
				
				
				if ((!tracer || tracer.health < hp) && check > 0)
				{
					if (AmmoCost > 0)
						Target.A_TakeInventory("D4Fuel", AmmoCost, TIF_NOTAKEINFINITE);
					
					if (!tracer || tracer.health < 1)
					{
						Target.A_GiveInventory("ChainsawKill",1);
						Target.A_GiveInventory("BloodyChainsawToken");
						Target.A_SetInventory("OnAcid",0);
					}
				}
			}
			else
			{
				Target.A_GiveInventory("NotEnoughFuel",1);
				return ResolveState("Null");
			}
			return ResolveState("Null");
		}
	ExtraGibFuckery:
		TNT1 A 1;
		Stop;

	}
}

Class NoCarrion : Inventory {}
Class OnAcid : Inventory { Default { +INVENTORY.UNDROPPABLE }}

Class BloodyChainsawToken : Inventory
{
	Default 
	{
		Inventory.InterHubAmount 0;
	}
}


Class ChainsawKill : Inventory
{
	Default 
	{
		Inventory.InterHubAmount 0;
	}
}

Class ReplaceBarrel : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (GetClass() is "ExplosiveBarrel" ||
				GetClass() is "D4ExplosiveBarrel")
			{
				A_SpawnItemEx("D4EmptyBarrel",0,0,0,vel.x,vel.y,vel.z,angle,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL|SXF_CLEARCALLERTID,0,tid);
				A_Remove(DefPtr,RMVF_EVERYTHING);
				return true;
			}
			return false;
		}
		Stop;
	}
}

