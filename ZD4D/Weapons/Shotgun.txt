//===================================================================================================
//===================================================================================================
//
//		Shotgun
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code enhancement: Major Cooke
//	Offset tweaks: Xaser
//
//===================================================================================================
//===================================================================================================
Class D4Shotgun : Doom4Weapon //replaces Shotgun
{
	Default 
	{
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOALERT
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Inventory.PickupMessage "Shotgun! Accurate!";
		Obituary "%o now knows %k's skills with the shotgun have not dimmed after 24 years.";
		Weapon.AmmoType1 "D4Shells";
		Weapon.AmmoType2 "D4Shells";
		Weapon.AmmoGive1 8;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 20;
		Weapon.SlotNumber 3;
		Weapon.SlotPriority 0.99;
		Tag "Shotgun";
		Scale 0.6;
		+DONTGIB
	}
	
	int Timer;
	override void DoEffect()
	{
		Super.DoEffect();
		if (!Owner)	return;
		
		if (++Timer > 1)
		{
			Timer = 0;
			Owner.A_TakeInventory("SGTripleShotTimer",1);
			Owner.A_TakeInventory("SGGrenadeTimer",1);
		}
	}
	
	States
	{
	Spawn:
		WPPK C -1;
		Stop;
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		"----" A 0 
		{
			A_SetInventory("AltFireToken",0);
			A_ZoomFactor(1.0,ZOOM_NOSCALETURNING);
		}
	DesLoop:
		---- A 1 A_Lower;
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		
		DW3A A 0 
		{
			if (CountInv("GrenadeActive"))		{	return ResolveState("GrenadeSpriteSelect");	}
			if (CountInv("TriShotActive"))		{	return ResolveState("TriShotSpriteSelect");	}
			return ResolveState("ResumeSelectSequence");
		}
		
		GrenadeSpriteSelect:
			DW3F A 0;
			Goto ResumeSelectSequence;
		TriShotSpriteSelect:
			DW3B A 0;
			Goto ResumeSelectSequence;
			
	ResumeSelectSequence:
		---- A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
		
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	ReadyDelay:
		---- A 1;
	Ready:
		DW3A A 0
		{
			A_SetInventory("AltFireToken",0);
			if (CountInv("GrenadeActive"))
				return ResolveState("ReadyGrenade"); 
			else if (CountInv("TriShotActive"))
				return ResolveState("ReadyTriShot"); 
			return ResolveState("ReadyLoop"); 
		}
	ReadyTrishot:	DW3B A 0 { return ResolveState("ReadyLoop");	}
	ReadyGrenade:	DW3F A 0 { return ResolveState("ReadyLoop");	}
	ReadyLoop:
		"####" "#" 1 
		{
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
			return ResolveState(null);
		}
		Loop;
	
	//==========================================================================
	//==========================================================================
	// Overlays
	Overlay.PitchSetter:
		M666 A 4 A_SetPitch(pitch-4.2,SPF_INTERPOLATE);
		M666 AAAAAA 1 A_SetPitch(pitch+0.7);
		Stop;
	Overlay.PitchSetterQuick:
		M666 A 2 A_SetPitch(pitch-1.5,SPF_INTERPOLATE);
		M666 AAA 1 A_SetPitch(pitch+0.5);
		Stop;
	
	//-------------------------------------------------------
	// Regular fire -- All compressed now! -M.C.
	//-------------------------------------------------------
	Fire:
		DW3A A 0 
		{
			if (CountInv("TriShotActive"))		{	return ResolveState("FireTriShot");	}
			else if (CountInv("GrenadeActive"))	{	return ResolveState("FireGrenade");	}
			else								{	return ResolveState("PrimaryFire");	}
		}
		FireTriShot:	DW3C A 0 {	return ResolveState("PrimaryFire");	}
		FireGrenade:	DW3F A 0 {	return ResolveState("PrimaryFire");	}
	
	PrimaryFire:
		"####" B 1 Bright 
		{
			A_WeaponOffset(6,36);
			
			for (int i = 0; i < 2; i++)
				A_FireProjectile("SGSmokeSpawner",0,0,6,2);
			A_FireBullets(4.5,1.1,7,5, "D4BulletPuff", FBF_USEAMMO|FBF_PUFFTRACER, 0, "BulletSmallTracer", 0, 5);	//original SG is spread h5.6 v0.0. Here it adds to the same 5.6 total
			A_AlertMonsters();
			A_GunFlash("Null");
			A_ZoomFactor(0.99,ZOOM_NOSCALETURNING);
			A_PlaySound("Doom4/Weapon/Shotgun/Fire",CHAN_WEAPON,1);
			A_SetBlend("orange",0.05,6);
			A_Overlay(2,"Overlay.PitchSetter");
		}
		"####" C 1 Bright A_WeaponOffset(8,38);
		"####" A 1 
		{ 
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			A_WeaponOffset(12,41);
		}
		"####" A 3 { A_WeaponOffset(18,44); A_SetTics(IsDoubleSpeed() ? 0 : 3); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset(15,41); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset(12,38); A_SetTics(IsDoubleSpeed() ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset(10,37); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset( 8,36); A_SetTics(IsDoubleSpeed() ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset( 6,35); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset( 4,34); A_SetTics(IsDoubleSpeed() ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset( 2,33); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		"####" A 1 { A_WeaponOffset( 0,32.01); A_SetTics(IsDoubleSpeed() ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		//pump start
		"####" DFHI 1 
		{
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			A_WeaponOffset(3,2,WOF_ADD); //+12 + 8 
		}
		"####" H 2 
		{
			if (GetCvar("D4D_Casings"))	{ A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); }
			A_SetTics(IsDoubleSpeed() ? 0 : 2);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		"####" HHHHGFED 1 
		{
			A_WeaponOffset(-1.5,-1,WOF_ADD); //-9 -6
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		---- A 0
		{
			// For some stupid fucking reason, after firing,
			// if one doesn't press the alt-fire key until after the animation
			// ends, it doesn't respond on the first press. So it must be forced.
			int cur = GetPlayerInput(MODINPUT_BUTTONS);
			if (cur & BT_ATTACK && invoker.CheckAmmo(0, true, true))
			{	return ResolveState("PrimaryFire");		}
			else if (cur & BT_ALTATTACK)
			{	return ResolveState("AltFire");	}
			
			return ResolveState(null);
		}
		/*
		"####" "#" 0 
		{
			A_WeaponReady(WRF_NOSECONDARY);
			A_Refire("PrimaryFire");
		}
		*/
		"####" "#" 0 A_WeaponReady(WRF_NOBOB);
		Goto Ready;

	//-------------------------------------------------------
	// Alt fires
	//-------------------------------------------------------
	AltFire:
		"####" "#" 0 
		{
			if (!DoSecondaryPriming())
			{
				if (CountInv("TriShotActive"))
					return ResolveState("FireMod1");
				else if (CountInv("GrenadeActive"))
					return ResolveState("FireMod2");
				return ResolveState("ReadyDelay");
			}
			//You can ironsight it juuuuust a little.
			A_GiveInventory("AltFireToken",1);
			A_ZoomFactor(1.05,ZOOM_NOSCALETURNING);
			if (CountInv("TriShotActive"))
			{	A_PlaySound("Doom4/Weapon/Shotgun/TripleShotAim",5); }
			else if (CountInv("GrenadeActive"))
			{	A_PlaySound("Doom4/Weapon/Shotgun/GrenadeAim",5); }
			return ResolveState("AltHold");			
		}
	DelayAltHold:
		---- A 1;
	AltHold:
		"####" "#" 1 
		{
			if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) &&
				!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ATTACK))
			{
				if (DoSecondaryPriming())
				{
					if (CountInv("TriShotActive"))
					{	return ResolveState("FireMod1");	}
					if (CountInv("GrenadeActive"))
					{	return ResolveState("FireMod2");	}
				}
				A_ZoomFactor(1.0, ZOOM_NOSCALETURNING);
				A_SetInventory("AltFireToken", 0);
				return ResolveState("Fire");
			}
			return ResolveState(null);
		}
		"####" "#" 0 
		{	// Needs to be manual here because the refire could be assigned to
			// the primary instead of secondary when coming in from regular fire.
			StateLabel next = null;
			if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK)
				next = "AltHold";
			return ResolveState(next);
		}
		"####" "#" 0 
		{
			if (CountInv("TriShotActive") || CountInv("GrenadeActive"))
			{
				A_PlaySound("Doom4/Weapon/Shotgun/CancelAim",6);
			}
			A_SetInventory("AltFireToken",0);
			A_ZoomFactor(1.0,ZOOM_NOSCALETURNING);
		}
		Goto Ready;

		
		//-------------------------------------------------------
		// Triple shot
		FireMod1:
			"####" "#" 1
			{
				// Fake it because the parameter "ammocount" only works for DEH ammo.
				if (invoker.CheckAmmo(0, false, true, 3))		//do you have the ammo required?
				{
					if (!CountInv("SGTripleShotTimer"))	//is the weapon no longer cooling off?
					{
						return ResolveState("TripleShot"); // then fire :)
					}
					else
					{
						//A_PrintBold("Mod not ready"); //Still cooling off.
						D4Msg.PrintStatus(D4Msg.ModNotReady);
						A_PlaySound("Doom4/Player/Nope",Channels);
						return ResolveState(null);
					}
				}
				else
				{
					D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
					return ResolveState(null);
				}
			}
			Goto AltHold; 
			
		TripleShot:
			DW3E A 1 Bright
			{
				A_SetInventory("AltFireToken",0);
				// 51th counter in Trishot is invisible, then countdown brings it down to 50 which looks full
				A_GiveInventory("SGTripleShotTimer",51);
				
				A_FireProjectile("SGSmokeSpawner",0,0,6,2);
				A_FireBullets(6,6,7,10, "D4BulletPuff", FBF_PUFFTRACER, 0, "BulletSmallTracer", 0, 5);
				A_TakeInventory(invoker.AmmoType1, invoker.AmmoUse1, TIF_NOTAKEINFINITE);
				A_AlertMonsters();
				A_GunFlash("Null");
				A_TakeInventory("TrishotClip",1);
				A_ZoomFactor(0.995,ZOOM_NOSCALETURNING);
				A_PlaySound("Doom4/Weapon/Shotgun/TripleFireDeeper",CHAN_WEAPON,1);
				A_Overlay(3,"Overlay.PitchSetterQuick");
				A_SetBlend("orange",0.03,3);
				A_WeaponOffset(6,36);
			}
			DW3E B 1 Bright A_WeaponOffset(3,34);
			DW3D B 1        A_WeaponOffset(2,33);
			DW3D B 2 A_SetTics(IsDoubleSpeed() ? 0 : 2);
			DW3E C 1 Bright 
			{
				A_FireProjectile("SGSmokeSpawner",0,0,6,2);
				A_FireBullets(6,6,7,10, "D4BulletPuff", FBF_PUFFTRACER, 0, "BulletSmallTracer", 0, 5);
				A_TakeInventory(invoker.AmmoType1, invoker.AmmoUse1, TIF_NOTAKEINFINITE);
				A_AlertMonsters();
				A_GunFlash("Null");
				A_TakeInventory("TrishotClip",1);
				A_ZoomFactor(0.993,ZOOM_NOSCALETURNING);
				A_Overlay(4,"Overlay.PitchSetterQuick");
				A_SetBlend("orange",0.03,3);
				A_WeaponOffset(12,40);
			}
			DW3E D 1 Bright A_WeaponOffset(9,38);
			DW3D A 1        A_WeaponOffset(7,37);
			DW3D A 2 A_SetTics(IsDoubleSpeed() ? 0 : 2);
			DW3E E 1 Bright
			{
				
				A_FireProjectile("SGSmokeSpawner",0,0,6,2);
				A_FireBullets(6,6,7,10, "D4BulletPuff", FBF_PUFFTRACER, 0, "BulletSmallTracer", 0, 5);
				A_TakeInventory(invoker.AmmoType1, invoker.AmmoUse1, TIF_NOTAKEINFINITE);
				A_AlertMonsters();
				A_GunFlash("Null");
				A_TakeInventory("TrishotClip",1);
				A_ZoomFactor(0.99,ZOOM_NOSCALETURNING);
				A_Overlay(5,"Overlay.PitchSetterQuick");
				A_SetBlend("orange",0.03,3);
				A_WeaponOffset(6,36);
				// Timers are now all handled by the weapons internally.
			}
			DW3E F 1 Bright;
			DW3b A 1 { A_WeaponOffset(12,40); A_ZoomFactor(1,ZOOM_NOSCALETURNING); }
			DW3b A 3 { A_WeaponOffset(18,44); A_SetTics(IsDoubleSpeed() ? 0 : 3); }
			DW3b A 1   A_WeaponOffset(15,41);
			DW3b A 1 { A_WeaponOffset(12,38); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			DW3b A 1   A_WeaponOffset(10,37);
			DW3b A 1 { A_WeaponOffset( 8,36); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			DW3b A 1   A_WeaponOffset( 5,34);
			DW3b A 2 { A_WeaponOffset( 1,33); A_SetTics(IsDoubleSpeed() ? 0 : 2); }
			
			DW3c DFHI 1 A_WeaponOffset(3,2,WOF_ADD); //+12 + 8
			DW3c H 2
			{
				if (GetCvar("D4D_Casings"))
				{
					A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
			}
			DW3c HHHGFE 1 A_WeaponOffset(-1.5,-1,WOF_ADD); //-9 -6
			DW3C D 1 A_WeaponOffset(-3,-2,WOF_ADD);
			"####" "#" 1
			{
				A_WeaponOffset(-3,-2,WOF_ADD);
				if (GetPlayerInput(INPUT_BUTTONS|INPUT_OLDBUTTONS) & BT_ALTATTACK)
				{	return ResolveState("AltFire");	}
				A_WeaponReady(WRF_NOPRIMARY);
				return ResolveState(null);
			}
			Goto Ready;
			
		//-------------------------------------------------------
		// Grenade launcher
		FireMod2:
			DW3F A 1
			{
				if (invoker.CheckAmmo(0, false, true, 2))		//do you have the ammo required?
				{
					if (!CountInv("SGGrenadeTimer"))	//is the weapon no longer cooling off?
						return ResolveState("GrenadeLauncher"); // then fire :)
					else
					{
						D4Msg.PrintStatus(D4Msg.ModNotReady);
						A_PlaySound("Doom4/Player/Nope",Channels);
						return ResolveState(null);
					}
				}
				else
				{
					D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);	//if it reaches here, weapon doesnt have enough ammo for this
					return ResolveState(null);
				}
			}
			Goto AltHold;
	
		GrenadeLauncher:
			DW3F B 1 Bright Offset(6,36)
			{
				A_SetInventory("AltFireToken",0);
				A_FireProjectile("D4ShotgunGrenade",0,0,7);
				A_AlertMonsters();
				A_GunFlash("Null");
				A_TakeInventory(invoker.AmmoType1,2,TIF_NOTAKEINFINITE);
				A_Overlay(10,"Overlay.PitchSetter");
				A_ZoomFactor(0.99,ZOOM_NOSCALETURNING);
				A_PlaySound("Doom4/Weapon/Shotgun/GrenadeLaunch",CHAN_WEAPON,1);
				A_SetBlend("orange",0.05,6);
				A_GiveInventory("SGGrenadeTimer",52); //this is for the cooldown, handled by the weapon
			}
			DW3F C 1 Bright Offset(6,36);
			DW3F A 1 Offset(12,40) { A_ZoomFactor(1,ZOOM_NOSCALETURNING); }
			DW3F A 3 Offset(18,44);
			DW3F A 1 Offset(15,41);
			DW3F A 1 Offset(12,38);
			DW3F A 1 Offset(10,37);
			DW3F A 1 Offset( 8,36);
			DW3F A 1 Offset( 5,34);
			DW3F A 2 Offset( 1,33);
			
			DW3F DFHI 1 A_WeaponOffset(3,2,WOF_ADD); //+12 + 8
			DW3F H 2
			{
				if (GetCvar("D4D_Casings"))
				{
					A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
					A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				}
			}
			DW3F HHHGFE 1 A_WeaponOffset(-1.5,-1,WOF_ADD); //-9 -6
			DW3F D 1 A_WeaponOffset(-3,-2,WOF_ADD);
			"####" "#" 1
			{
				A_WeaponOffset(-3,-2,WOF_ADD);
				if (GetPlayerInput(INPUT_BUTTONS|INPUT_OLDBUTTONS) & BT_ALTATTACK)
				{	return ResolveState("AltFire");	}
				A_WeaponReady(WRF_NOPRIMARY);
				return ResolveState(null);
			}
			Goto Ready;

	//-------------------------------------------------------
	// Alt fire switcheroo
	//-------------------------------------------------------
	Reload:
		"####" "#" 0 
		{
			A_ZoomFactor(1.0,ZOOM_NOSCALETURNING);
			A_TakeInventory("AltFireToken",32767,0);
			if (CountInv("ShotgunMod1")) //if has trishot
			{
				if (CountInv("GrenadeActive")) //but grenade was active
					return ResolveState("FromGrenadeToTrishot");
				else if (!CountInv("TriShotActive"))
					return ResolveState("FromNormalToTrishot"); //No previous mods
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			if (CountInv("ShotgunMod2")) //if it has grenade
			{
				if (CountInv("TriShotActive")) //but trishot was active
					return ResolveState("FromTriShotToGrenade");
				else if (!CountInv("GrenadeActive"))
					return ResolveState("FromNormalToGrenade"); //No previous mods
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			else
			{
				D4Msg.PrintStatus(D4Msg.NoMods);
			}
			return ResolveState(null);
		}
		"####" "#" 5;
		Goto Ready;
		
		FromNormalToGrenade:
			//TNT1 A 0 A_PrintBold("From normal to grenade")
			//hide normal fire
			DW3A AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			DW3A A 5;
			//pull of and arm grenade mod
			DW3G ABCDEFG 1 A_WeaponOffset(0,-10,WOF_ADD); // 0 -80
			DW3G H 1
			{
				A_WeaponOffset(0,-10,WOF_ADD);
				A_PlaySound("Doom4/Weapon/Shotgun/SwitchToGrenade",5,1);
				A_GiveInventory("GrenadeActive",1);
			}
			DW3G JKK 2;
			DW3G LMN 1;
			DW3G OOO 1 A_WeaponOffset(5,5,WOF_ADD);
			DW3G O 3;
			DW3G PPP 1 A_WeaponOffset(-5,-5,WOF_ADD);
			Goto Ready;
			
		FromNormalToTrishot:
			//TNT1 A 0 A_PrintBold("From normal to trishot")
			//hide normal fire
			DW3A AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			DW3A A 5;
			//pull up trishot
			DW3B BCDEFHH 1 A_WeaponOffset(0,-10,WOF_ADD); // 0 -80
			DW3B H 1
			{
				A_WeaponOffset(0,-10,WOF_ADD);
				A_PlaySound("Doom4/Weapon/Shotgun/SwitchToTripleShot",5,1);
				A_GiveInventory("TriShotActive",1);
			}
			DW3B IJKLM 1;
			DW3B NNNN 1 A_WeaponOffset(3,3,WOF_ADD);
			DW3B NNNN 1 A_WeaponOffset(-3,-3,WOF_ADD);
			DW3B OPQ 3; //A_WeaponOffset(-1,-4,WOF_ADD);
			Goto Ready;
			
		FromTriShotToGrenade:
			//TNT1 A 0 A_PrintBold("From trishot to grenade")
			//hide trishot
			DW3B AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			DW3B A 5;
			//pull of and arm grenade mod
			DW3G ABCDEFG 1 A_WeaponOffset(0,-10,WOF_ADD); // -0 -80
			DW3G H 1
			{
				A_WeaponOffset(0,-10,WOF_ADD);
				A_PlaySound("Doom4/Weapon/Shotgun/SwitchToGrenade",5,1);
				A_TakeInventory("TriShotActive",1);
				A_GiveInventory("GrenadeActive",1);
			}
			DW3G JKK 2;
			DW3G LMN 1;
			DW3G OOO 1 A_WeaponOffset(5,5,WOF_ADD);
			DW3G O 3;
			DW3G PPP 1 A_WeaponOffset(-5,-5,WOF_ADD);
			Goto Ready;
			
		FromGrenadeToTrishot:
			//TNT1 A 0 A_PrintBold("From grenade to trishot")
			//hide grenade
			DW3F AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			DW3F A 5;
			//pull trishot
			DW3B BCDEFHH 1 A_WeaponOffset(0,-10,WOF_ADD); // -0 -80
			DW3B H 1
			{
				A_WeaponOffset(0,-10,WOF_ADD);
				A_PlaySound("Doom4/Weapon/Shotgun/SwitchToTripleShot",5,1);
				A_TakeInventory("GrenadeActive",1);
				A_GiveInventory("TrishotActive",1);
			}
			DW3B IIJJKLM 1;
			DW3B NNNN 1 A_WeaponOffset(3,3,WOF_ADD);
			DW3B NNNN 2 A_WeaponOffset(-3,-3,WOF_ADD);
			DW3B OPQ 3; //A_WeaponOffset(-1,-4,WOF_ADD)
			Goto Ready;
	}
}



//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Mods tokens
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

Class TriShotActive : Inventory		{	Default { +INVENTORY.UNDROPPABLE} }
Class GrenadeActive : Inventory		{	Default { +INVENTORY.UNDROPPABLE} }
Class TrishotClip : Inventory 		{	Default { Inventory.MaxAmount 3; } } // For orange visual cue
Class SGGrenadeTimer : Counter {} // shotgun timer to cool off
Class SGTripleShotTimer : Counter {} // Triple shot timer to cool off

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Primary fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class SGSmokeSpawner : Actor 
{
	Default 
	{
		Radius 1;
		Height 1;
		Speed 14;
		Projectile;
		+NOTIMEFREEZE
	}
    States
    {
    Spawn:
        TNT1 A 1;
        TNT1 A 0 A_Die();
        Goto Death;
    Death:
		TNT1 A 0 A_Stop();
		TNT1 A 0 A_SpawnItemEx("SGSmoke",0,frandom(1.5,-1.5),0,0,0,frandom(0.05,0.3),0,32);
		TNT1 AA 1 A_SpawnItemEx("SGSmoke",0,frandom(1.5,-1.5),0,0,0,frandom(0.05,0.3),0,32);
        Stop;
    }
}

Class SGSmoke : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Alpha 0.8;
	}
	States
	{
	Spawn:
	   TNT1 A 0 NoDelay A_Jump(256,1,2);	//to define wich graphic will use
	   X201 EF 0 { return ResolveState("Cont"); }
	Cont:
	   "####" "#" 0 A_SetScale(frandom(0.03,0.04));
	   "####" "###" 2 
	   {
			A_SetScale(Scale.X+0.005);
			A_FadeOut(frandom(0.035,0.099));
	   }
	Looper:
	   "####" "#" 0 A_SetScale(Scale.X+0.004);
	   "####" "#" 2 A_FadeOut(0.035);
	   Loop;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Grenade mod related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class D4ShotgunGrenade : FastProjectile
{
	Default 
	{
		Projectile;
		-NOGRAVITY
		+EXTREMEDEATH
		+NODAMAGETHRUST
		+FORCERADIUSDMG
		Gravity 0.15;
		Speed 45;
		Damage 5;
		Radius 5;
		Height 10;
		Scale 0.4;
		MissileType "SGGrenadeSmokeTrail";
		MissileHeight 8;
		DeathSound "Doom4/Weapon/Shotgun/GrenadeExplo";
		Decal "D4ExploScorchSmall";
	}
	States
	{
	Spawn:
		GRNL A 2 Bright A_ChangeVelocity(0,0,-0.6);
		Loop;
	Death:
		TNT1 A 0 
		{
			if (CountInv("ProtectionBonus2", TargetPtr))
			{			
				A_Explode(15,128);
				A_Explode(113,180,0,0,60);
			}
			else
			{			
				A_Explode(30,128);	
				A_Explode(98,180,0,0,60);
			}
			A_RadiusThrust(128,128,RTF_THRUSTZ|RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE,60);
			if (GetCvar("D4D_quakexplosions"))
			{
				A_QuakeEx(2,2,2,15,0,768,"",QF_SCALEDOWN);
			}
			A_SpawnItemEx("GrenadeCluster",0,0,0,frandom(-2,2),frandom(-2,2),frandom(3,6),0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("GrenadeCluster",0,0,0,frandom(-2,2),frandom(-2,2),frandom(3,6),0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("GrenadeCluster",0,0,0,frandom(-2,2),frandom(-2,2),frandom(3,6),0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("GrenadeCluster",0,0,0,frandom(-2,2),frandom(-2,2),frandom(3,6),0,SXF_NOCHECKPOSITION);
		}
		TNT1 A 3 A_SpawnItemEx("SGGrenadeExplo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0
		{
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.0),frandom(0.5,1.0),frandom(0.5,1.0),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.0),frandom(0.5,1.0),frandom(0.5,1.0),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.0),frandom(0.5,1.0),frandom(0.5,1.0),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.0),frandom(0.5,1.0),frandom(0.5,1.0),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.0),frandom(0.5,1.0),frandom(0.5,1.0),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("GenericExplosionParticleSpawner",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			}
		}
		TNT1 A 20;
		Stop;
	}
}

Class GrenadeCluster : Actor 
{
	Default 
	{
		Projectile;
		Radius 3;
		Height 6;
		RenderStyle "Add";
		Scale 0.1;
		-NOGRAVITY
		Gravity 0.4;
	}
	States
	{
	Spawn:
		FBAL AABBCCDDEEFF 1 bright Light("YellowSmallFlicker3")
		{
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("DoomImpBallFlamelet",0,0,0,0,0,frandom(0,0.8),0,SXF_NOCHECKPOSITION);
			}
		}
		Loop;
	Death:
		FX52 A 0 A_Explode(32,32);
		FX52 AABBCCDDEEFFGGHH 1 bright Light("YellowSmallFlicker2") A_SetScale(Scale.X+0.02);
		FX52 IIJJKKLLMMNN 1 bright Light("YellowSmallFlicker3") A_SetScale(Scale.X+0.02);
		Stop;
	}
}


Class SGGrenadeExplo : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.1;
	}
	States
	{
	Spawn:
		X112 AABBCCDD 1 Bright A_SetScale(Scale.X+0.07);
		X112 EFGH 2 Bright A_SetScale(Scale.X+0.03);
		X112 H 1 Bright 
		{
			A_FadeOut(0.07);
			A_SetScale(Scale.X+0.03);
		}
		Wait;
	}
}

Class SGGrenadeSmokeTrail : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.015;
		RenderStyle "Add";
		Alpha 0.8;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);
		X102 ABCDEFGHIJKLMNOPQRSTUV 2
		{
			A_FadeOut(0.035);
			A_SetScale(Scale.X+0.006);
		}
		Goto Spawn;

	}
}


//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Casing
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class ShotgunCasingSpawner : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 22;
	const YOff = 11;
	const ZOff = 35;
	double  pos;
	int t;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (master) { pitch = master.pitch; }
			
			// And set a multiplier for taking from the distance so it actually goes well with the gun.
			
			if (pitch > 0) //Looking down
			{	pos = (sin(pitch) * 12);	}
			else //Looking up
			{	pos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			
			if (D4D_Casings)
			{
				if (D4D_SilentCasings)
				{	A_SpawnItemEx("D4ShellCasingSilent",0,0,0,0,frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
				else
				{	A_SpawnItemEx("D4ShellCasing",0,0,0,0,frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
			}
			
		}
		Stop;
	Nothing:
		TNT1 A 100;
		Stop;
	}
}