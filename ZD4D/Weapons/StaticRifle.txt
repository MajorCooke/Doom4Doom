//===================================================================================================
//===================================================================================================
//
//		Static rifle
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Code: DBThanatos
//	Beam trails: Major Cooke
//	Offset tweaks: Xaser
//
//===================================================================================================
//===================================================================================================
const RailFlags = 	RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING;
const RailFlags3 = 	RGF_SILENT|RGF_FULLBRIGHT;
const StaticLength = 4096;
Class StaticRifleChargingToken : Inventory { Default { Inventory.MaxAmount 540; } }// 520 is max already, the extra 20 is a cushion to retain "max charge"
Class ShowStaticRifleCharge : Inventory {}

Class D4StaticRifle : Doom4Weapon
{
	/*
	enum StaticRifle
	{
		RailFlags = 	RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,
		RailFlags3 = 	RGF_SILENT|RGF_FULLBRIGHT,
	};
	
	const Sparsity = 10.415;
	*/
	
	const ChargeDrainDelay = 4;
	int Timer;
	Default 
	{
		Doom4Weapon.MultiplayerWeapon true;
		+FLOORCLIP
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Scale 0.6;
		Tag "Static Rifle";
		Obituary "%k's static rifle taught %o that running away doesn't necessarily make one a pussy.";
		Inventory.PickupMessage "Static Rifle, move to charge!";
		Decal "D4RailgunOrange";
		Weapon.SelectionOrder 110;
		Weapon.SlotNumber 7;
		Weapon.SlotPriority 0.98;
		+DONTGIB
	}
	
	// Always happens regardless of the weapon selected or not.
	override void DoEffect()
	{
		Super.DoEffect();
		if (!Owner)	return;
		
		if (Owner.CountInv("StaticChargeDrain"))
		{
			if (Owner.CountInv("StaticRifleChargingToken") > 540)
				Owner.A_SetInventory("StaticRifleChargingToken", 540);
			else if (Owner.CountInv("StaticRifleChargingToken"))
			{
				Owner.A_TakeInventory("StaticRifleChargingToken", 32);
				if (Owner.CountInv("StaticRifleChargingToken") < 1)
					Owner.A_SetInventory("StaticChargeDrain", 0);
			}
			else	Owner.A_SetInventory("StaticChargeDrain",0);
		}
		else if (!Owner.CountInv("StaticUpgrade4"))
		{
			if (Timer++ >= 4 && (Owner.Vel.Length() < 2.0))
			{
				Timer = 0;
				int Taker = 3;
				if (Owner.CountInv("StaticUpgrade2"))	Taker -= 1;
				if (Owner.CountInv("StaticUpgrade3"))	Taker -= 1;
				Owner.A_TakeInventory("StaticRifleChargingToken", Taker);
			}
		}
	}
	
	// Only happens when selected.
	action void MonitorCharge()
	{
		let o = invoker.owner;
		if (!o)	return;
		
		double vol = 0.0;
		Inventory stat = Inventory(o.FindInventory("StaticRifleChargingToken"));
		
		if (!stat || stat.Amount < 540)
		{
			double UVel = o.vel.Length();
			if (CountInv("StaticRifleActive") && (UVel * 0.25) >= 1.0)
			{
					 if (CountInv("StaticUpgrade4"))		A_GiveInventory("StaticRifleChargingToken", int((UVel * 2.9) * 0.25));	
				else if (CountInv("StaticUpgrade3"))		A_GiveInventory("StaticRifleChargingToken", int((UVel * 2.55) * 0.25));	
				else if (CountInv("StaticUpgrade2"))		A_GiveInventory("StaticRifleChargingToken", int((UVel * 2.2) * 0.25));	
				else if (CountInv("StaticUpgrade1"))		A_GiveInventory("StaticRifleChargingToken", int((UVel * 1.85) * 0.25));	
				else										A_GiveInventory("StaticRifleChargingToken", int((UVel * 1.7) * 0.25));	
			}
			
		}
		if (stat)
		{
			int maxamt = Max(1,stat.MaxAmount);
			int curamt = stat.Amount;
			vol = double(curamt) / double(maxamt);
		}
		A_SoundVolume(7, vol);
	}
	
	States
	{
	Spawn:
		WPPK K -1;
		Wait;
	//-------------------------------------------------------
	// DeSelect sequence
	//-------------------------------------------------------
	Deselect:
		STRF A 1
		{
			A_Overlay(SR_Charging,"Null");
			A_StopSound(7);
			A_SetInventory("StaticRifleActive",0);
			
			A_Lower();
		}
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		STRF A 0 
		{
			A_Overlay(SR_Charging, "Overlay.Charging");
			A_PlaySound("Doom4/Weapon/StaticRifle/ChargeLoop",7,0.01,1);
			A_GiveInventory("StaticRifleActive",1);
			
		}
		---- A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	ReadyNoHolding:
		STRF A 1;
		STRF A 0 A_Refire("ReadyNoHolding");
	Ready:
		STRF A 0 
		{	
			StateLabel next = null;
			if (CountInv("StaticRifleChargingToken") >= 40)
				next = "ReadyCharging";
			return ResolveState(next);
		}
	ReadyDischarged:
		STRF A 1
		{
			if (CountInv("StaticUpgrade4"))
			{	A_WeaponReady(WRF_ALLOWUSER2);	}
			else
			{	A_WeaponReady(WRF_ALLOWUSER2|WRF_NOSECONDARY);	}
		}
		Goto Ready;
	ReadyCharging:
		STRF BBBCCC 1 
		{
			if (CountInv("StaticUpgrade4"))
			{	A_WeaponReady(WRF_ALLOWUSER2);	}
			else
			{	A_WeaponReady(WRF_ALLOWUSER2|WRF_NOSECONDARY);	}
		}
		Goto Ready;
	//===========================================================================	
	// Primary fire
	Fire:
	AltFire:
		STRF A 0
		{
			if (CountInv("StaticRifleChargingToken") >= 20)
			{
				if (CountInv("StaticUpgrade4"))
				{
					A_Overlay(SR_Fire,"Overlay.Fire");
					A_Overlay(SR_Anim,"Overlay.Anim");
					if (!CountInv("StaticChargeDrain"))
						A_GiveInventory("StaticChargeDrain",1);
					return ResolveState("FireWatcher");
				}
				else
				{	
					A_Overlay(SR_Fire,"Overlay.Fire");
					A_Overlay(SR_Anim,"Overlay.Anim");
					
					// It's important that the tics be updated if the animation 
					// under (Overlay.)Anim state is changed at all.
					// AnimLoop1 and 2 don't count.
					A_SetTics(10); 
					return ResolveState(null);
				}
			}
			else	D4Msg.PrintStatus(D4Msg.ChargeTooLow);
			return ResolveState(null);
		}
		STRF A 1;
		STRF A 0 A_Refire("ReadyNoHolding");
		Goto Ready;
	FireWatcher:
		M666 A 1;
		M666 A 1
		{
			int CurInput = GetPlayerInput(MODINPUT_BUTTONS);
			int OldInput = GetPlayerInput(MODINPUT_OLDBUTTONS);
			if (CountInv("StaticChargeDrain"))
			{
				if (((CurInput & BT_ATTACK) &&
					!(OldInput & BT_ATTACK))
					||
					((CurInput & BT_ALTATTACK) &&
					!(OldInput & BT_ALTATTACK)))
				{
					A_Overlay(SR_Fire,"Overlay.Fire");
					A_Overlay(SR_Anim,"Overlay.Anim");
				}
				return ResolveState(null);
			}
			//Don't allow spamalamadingdongs.
			
			else if ((CurInput & BT_ATTACK) || 
					(CurInput & BT_ALTATTACK))
			{
				return ResolveState("ReadyNoHolding"); 
			}
			
			return ResolveState("Ready");
		}
		Wait;
	Overlay.Fire:
		STRF A 0
		{
			// Due to the ability to multi-shot with the fully upgraded variant,
			// there is no pitch altering. Just zooming.
			int Count = CountInv("StaticRifleChargingToken");
			if (Count >= 20)
			{
				A_GunFlash("Null");
				if (Count >= 520)	//if at max
				{
					A_FireBullets(0,0,1,0,"PacifistPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,StaticLength,"StaticTrailBigSpawner",0,5);
					A_RailAttack(Count,0,1,"Red","",RGF_SILENT|RGF_FULLBRIGHT,0,"StaticPuff",0,0,32765,0,2.0,1.0);
				}
				else	//normal attacks
				{
					Class<Actor> Puff = null;
					int Flag = 0;
					
					if (CountInv("StaticUpgrade3"))
					{
						Puff = "PacifistPuff";
						Flag = RailFlags3;
					}
					else
					{
						Puff = "PacifistPuffNoThru";
						Flag = RailFlags;
					}
					A_FireBullets(0,0,1,0,Puff,FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,StaticLength,"StaticTrailSpawner",0,5);
					A_RailAttack(Count,0,1,"","",Flag,0,"StaticPuff",0,0,32765,0,2.0,1.0);
				}
			}
			//refuses to fire if the charge was too low
			else
			{	
				A_SetTics(10);
				D4Msg.PrintStatus(D4Msg.ChargeTooLow);
			}
			//----------------------
			//effects and sounds depend on the charge level
			if (Count >= 500)	//if max, it has a 20 tokens chance to deal max damage
			{	
				A_PlaySound("Doom4/Weapon/StaticRifle/FireMax",CHAN_Weapon); 
				A_ZoomFactor(0.65,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
				A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			}
			else if (Count <= 40)	//if very low
			{		
				A_PlaySound("Doom4/Weapon/StaticRifle/FireMin",CHAN_Weapon,0.5); 	//otherwise, will play super low sound
				A_ZoomFactor(0.95,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
				A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			}
			else 		//if anything in between
			{	
				A_PlaySound("Doom4/Weapon/StaticRifle/Fire",CHAN_Weapon,0.8);
				A_ZoomFactor(0.9,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
				A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			}
			A_PlaySound("Doom4/Weapon/StaticRifle/FireContinuation",5,0.7);
			
			if (CountInv("StaticUpgrade4"))
			{	A_GiveInventory("StaticChargeDrain",1);	}
			else
			{	A_SetInventory("StaticRifleChargingToken",0);	}
			return ResolveState(null);
		}
		Stop;
	
	Overlay.Charging:
		TNT1 A 1 MonitorCharge();
		Wait;
	
	Overlay.Anim:
	Anim:
		STRF D 1 Bright A_WeaponOffset( 3.0, 35.0);
		STRF D 1 Bright A_WeaponOffset(12.0, 38.0);
		STRF D 1 Bright A_WeaponOffset(15.0, 42.0);
		STRF A 1 A_WeaponOffset(14.0, 41.0);
		STRF A 1 A_WeaponOffset(12.0, 39.0);
		STRF A 1 A_WeaponOffset(10.0, 37.0);
		STRF A 1 A_WeaponOffset( 7.0, 35.0);
		STRF A 1 A_WeaponOffset( 4.0, 34.0);
		STRF A 1 A_WeaponOffset( 2.0, 33.0);
		STRF A 1 A_WeaponOffset( 0.0, 32.0);
	AnimLoop1:
		STRF BBBCCC 1
		{
			if (!CountInv("StaticChargeDrain"))
			{	return ResolveState("Null");	}
			if (CountInv("StaticRifleChargingToken") < 19)
			{	return ResolveState("AnimLoop2");	}
			return ResolveState(null);
		}
		Loop;
	AnimLoop2:
		STRF A 1
		{
			if (!CountInv("StaticChargeDrain"))
			{	return ResolveState("Null");	}
			return ResolveState(null);
		}
		Loop;
		
	}
}

Class StaticChargeDrain : 	Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.InterhubAmount 0; } }
Class StaticRifleActive : 	Inventory {}


//----------------------------------------------------------------------
Class StaticPuff : Actor 
{
	Default 
	{
		+NOINTERACTION
		+PUFFGETSOWNER
		+PUFFONACTORS
		+ALWAYSPUFF
	}
	States
	{
	Spawn:	//hit non bleeding
		TNT1 A 1 A_GiveToTarget("StaticHitSound");
		Stop;
	Xdeath:	//hit bleeder
		TNT1 A 1 A_GiveToTarget("StaticHitSound");
		Stop;
	Crash:	//hit everything else
		TNT1 A 1;
		Stop;
	}
}

Class StaticHitSound : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP 
		RenderStyle "None";
	}
	States
	{
	Spawn:
		MEGA A 6;
		Loop;
	Pickup:
		TNT1 A 0 A_PlaySound("Doom4/Weapon/StaticRifle/Hit",10,1,0,140);
		Stop;
	}
}
//----------------------------------------------------------------------

Class StaticRiflePitch8 : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 3;
		TNT1 AAAAAAAA 1
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH); //Never override the pitch. Offset to it instead.
			A_SetPitch(pitch+1);		//Needs to affect itself first.
			A_SetPitch(pitch,0,MasterPtr);
		}
		Stop;
	}
}

Class StaticRiflePitch4 : StaticRiflePitch8
{
	States
	{
	Spawn:
		TNT1 A 2;
		TNT1 AAAAAAAA 1
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH); //Never override the pitch. Offset to it instead.
			A_SetPitch(pitch+0.5);		//Needs to affect itself first.
			A_SetPitch(pitch,0,MasterPtr);
		}
		Stop;
	}
}
Class StaticRiflePitch1 : StaticRiflePitch8
{
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 AAAAA 1
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH); //Never override the pitch. Offset to it instead.
			A_SetPitch(pitch+0.2);		//Needs to affect itself first.
			A_SetPitch(pitch,0,MasterPtr);
		}
		Stop;
	}
}

Class StaticRifleTrailSoftware : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+PUFFGETSOWNER
		RenderStyle "Add";
		//Translation "0:255=223:208"
		Scale 0.1;
	}
	States
	{
	Spawn:
		//X025 A 0 NODELAY 
		//{	return A_Jump(256,2,4,6,8,10,12,14,16,18,20);		}
		X025 ACDEFGHIJKLMNOPQRSTUVWXY 0 A_Jump(256,"Play");
	Play:
		"####" "#" 4 BRIGHT ;
		"####" "#" 1 BRIGHT 
		{	
			A_FadeOut(0.075);
			A_SetScale(Scale.X-0.01);
		}
		Wait;
	}
}