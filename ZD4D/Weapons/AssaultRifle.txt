//===================================================================================================
//===================================================================================================
//
//	Heavy Assault Rifle
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code rewrite + layer support: Major Cooke
//	Offset tweaks: Xaser
//
//===================================================================================================
//===================================================================================================

Class D4AssaultRifle : Doom4Weapon //replaces Chaingun
{
	const MG_AmmoUse_Micro = 2;
	const MG_AmmoUse_Normal = 1;
	const MG_AmmoUse_Scope = 1;
	Default 
	{
		+WEAPON.NOALERT
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.SlotNumber 1;
		Inventory.PickupMessage "Heavy Assault Rifle! The classic catch-all solution.";
		Tag "Heavy Assault Rifle";
		Weapon.AmmoType1 "D4Bullets";
		Weapon.AmmoGive1 20;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 40;
		Weapon.SlotNumber 4;
		Weapon.SlotPriority 0.99;
		+DONTGIB
	}
	States
	{
	Spawn:
		WPPK E -1;
		Stop;
	
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		"####" "#" 0
		{
			A_SetInventory("AltFireToken",0);
			A_SetInventory("MGMissileToken",0);
			if (CountInv("MGZoomToken"))
			{
				A_SetInventory("MGZoomToken",0);
				return ResolveState("ZoomDeselect");
			}
			return ResolveState("DesLoop");
		}
	DesLoop:
		---- A 1 A_Lower;
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	ZoomDeselect:	//this one has assigned sprites because if it reached here, it HAD to had the scope
		ARSI A 1
		{
			A_SetInventory("MGZoomToken",0);
		//Zoom Out
			A_ZoomFactor(1.0);
			A_PlaySound("Doom4/Weapon/Machinegun/ZoomOut", 8, 1.0, 0);
		}
		Goto DesLoop;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		ARNI A 0 // Be safer about sprite selection.
		{
			if (CountInv("MicroMissilesActive"))	return ResolveState("MicroMissilesSel");	
			if (CountInv("TacticalScopeActive"))	return ResolveState("TacticalScopeSel");
			return ResolveState("ResumeSelectSequence");
		}
		MicroMissilesSel:
			ARMI A 0 { return ResolveState("ResumeSelectSequence"); }
		TacticalScopeSel:
			ARSI A 0 { return ResolveState("ResumeSelectSequence"); }
			
	ResumeSelectSequence:
		---- A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	Ready:
		ARNI A 0
		{
			int Alt = CountInv("AltFireToken");
			int Tac = CountInv("TacticalScopeActive");
			int Mic = CountInv("MicroMissilesActive");
			
			if (Tac)
			{
				if (Alt)	return ResolveState("HoldScope");				// We're holding it zoomed.
				else		return ResolveState("TacticalScopeReady");		// Just the normal unzoomed sprite.
			}
			else if (Mic)
			{
				if (Alt)	return ResolveState("MissilesReady");			// Up and open
				else		return ResolveState("MicroMissilesReady");		// Closed
			}
			return ResolveState("ResumeReadySequence");	
		}
		
		MicroMissilesReady:
			ARMI A 0 {	return ResolveState("ResumeReadySequence");	} //I just know someone's going to abuse fast weapons.
		TacticalScopeReady:
			ARSI A 0 {	return ResolveState("ResumeReadySequence");	}
			
	ResumeReadySequence:
		"####" "#" 0
		{
			if (CountInv("MGZoomToken"))		return ResolveState("ZoomOut");
			if (CountInv("MGMissileToken"))		return ResolveState("MissilesClose");	
			return ResolveState("VeryReady");
		}
	VeryReady:
		"####" "#####" 1 
		{
			int WeapReadyFlags = WRF_ALLOWRELOAD|WRF_ALLOWUSER2;
			
			if (!CountInv("AssaultRifleMod1") && !CountInv("AssaultRifleMod2"))
			{
				WeapReadyFlags |= WRF_NOSECONDARY;
				invoker.AmmoUse1 = MG_AmmoUse_Normal;
			}
			else
			{
				int Alt = CountInv("AltFireToken");
				int Tac = CountInv("TacticalScopeActive");
				int Mic = CountInv("MicroMissilesActive");
				
				if (Alt)
				{
						 if (Tac)	invoker.AmmoUse1 = MG_AmmoUse_Scope;
					else if (Mic)	invoker.AmmoUse1 = MG_AmmoUse_Micro;
					else			invoker.AmmoUse1 = MG_AmmoUse_Normal;
				}
				else	invoker.AmmoUse1 = MG_AmmoUse_Normal;
			}
			A_WeaponReady(WeapReadyFlags);
		}
		Loop;
	//-------------------------------------------------------
	// Regular fire
	//-------------------------------------------------------
	Fire:
		"----" A 0
		{
			// If holding the alt-fire, go to fire zoomed.
			// Otherwise, grab the sprite and get rolling.
			
			int Alt = CountInv("AltFireToken");
			int Tac = CountInv("TacticalScopeActive");
			int Mic = CountInv("MicroMissilesActive");
			
			if (Tac)
			{	
				if (Alt)
				{
					if (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
						return ResolveState("FireZoomed");
					return ResolveState("ZoomOut");
				}
				else
				{	
					return ResolveState("TacticalScopeSprite");	
				}
			}
			
			
			// Same thing here.
			if (Mic)
			{	
				if (Alt)	return ResolveState("MissilesFire");	
				else		return ResolveState("MicroMissilesSprite");			
			}
			
			// We don't have a mod. Don't keep the token.
			A_SetInventory("AltFireToken",0);
			return ResolveState("NormalSprite");
		}
	FireNormal:
		NormalSprite:
			ARNF A 0 A_Jump(256,"FireNormalLooper");
			Goto FireNormalLooper;
		MicroMissilesSprite:
			ARMF A 0 A_Jump(256,"FireNormalLooper");
			Goto FireNormalLooper;
		TacticalScopeSprite:
			ARSF A 0 A_Jump(256,"FireNormalLooper");
			Goto FireNormalLooper;
	FireNormalLooper:
		"####" A 1 Bright
		{
			if (!CountInv("MachinegunFireToken"))
			{
				A_PlaySound("Doom4/Weapon/Machinegun/Fire",5,1);
				A_GiveInventory("MachinegunFireToken",1);
			}
			else
			{
				A_PlaySound("Doom4/Weapon/Machinegun/Fire",6,1);	//it plays in another channel
				A_TakeInventory("MachinegunFireToken",1);
			}
			if (GetCvar("D4D_Casings"))
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			
			
			
			A_FireBullets(1,1,1,6,"D4BulletPuff",FBF_USEAMMO|FBF_PUFFTRACER,0,"BulletSmallTracer",-1,7); 
			
			A_AlertMonsters();
			A_GunFlash("Null");
			A_FireProjectile("MGSmokeSpawner",0,0,5,2);
			
			A_SetPitch(pitch-0.5);
			A_ZoomFactor(0.995,ZOOM_NOSCALETURNING);
			A_SetBlend("orange",0.03,6);
			A_SetTics(IsDoubleSpeed() ? 0 : 1);
		}
		"####" B 1 Bright 
		{	
			A_WeaponOffset(4,4,WOF_ADD);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		}
		"####" C 1 Bright 
		{
			A_WeaponOffset(-2,-2,WOF_ADD);
			A_SetPitch(pitch+0.25);
		}
		"####" D 1 Bright
		{
			A_WeaponOffset(-2,-2,WOF_ADD);
			A_SetPitch(pitch+0.25);
		}
		"####" D 1
		{
			if ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) && 
				(CountInv("TacticalScopeActive") || (CountInv("MicroMissilesActive"))))
			{	return ResolveState("AltFire");	}
			A_SetTics(IsDoubleSpeed() ? 0 : 1);
			return ResolveState(null);
		}
		"####" D 0 A_Refire("FireNormalLooper");
		Goto Ready;
		
		
	//-------------------------------------------------------
	// No ammo, used for the alt fires
	//-------------------------------------------------------
	NotEnoughAmmo:
		"####" "#" 5 
		{
			D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
			A_SetInventory("MGMissileToken",0);
			A_SetInventory("AltFireToken",0);
		}
		Goto Ready;
	//-------------------------------------------------------
	// Alt fires
	//-------------------------------------------------------
	AltFire:
		"####" "#" 0 
		{
			
			//Always give at least a token.
			
			if (CountInv("AssaultRifleMod1") && CountInv("TacticalScopeActive"))
			{	
				invoker.AmmoUse1 = MG_AmmoUse_Scope;
				A_SetInventory("AltFireToken",1);
				if (CountInv("MGZoomToken"))
				{	return ResolveState("HoldScope");	}	// Already scoped.
				return ResolveState("StartScope");			// Begin zooming in.
			} 	
			if (CountInv("AssaultRifleMod2") && CountInv("MicroMissilesActive"))
			{	
				invoker.AmmoUse1 = MG_AmmoUse_Micro;
				A_SetInventory("AltFireToken",1);
				if (CountInv("MGMissileToken") && invoker.CheckAmmo(0,false,true))
					return ResolveState("MissilesReady");	// Already raised.
					
				A_PlaySound("Doom4/Weapon/Machinegun/MinMissilePrepare",6);
				return ResolveState("StartMicro");				// Begin raising the micro missiles.
			}
			
			A_SetInventory("AltFireToken",0);
			return ResolveState("AltHoldNone");
		}
	AltHoldNone:
		"####" "#" 1 A_WeaponReady(WRF_NOSECONDARY);
		"####" "#" 0 A_Refire("AltHoldNone");
		"####" "#" 0 A_SetInventory("AltFireToken",0);
		Goto Ready;
		

		//-------------------------------------------------------
		// Scope
		StartScope:
			//Zoom In
			ARSI A 3
			{
				A_ZoomFactor(2.5);
				A_PlaySound("Doom4/Weapon/Machinegun/ZoomIn", 8, 1.0, 0);
				A_GiveInventory("MGZoomToken",1);
			}
		HoldScope:
			R016 N 1 A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB); // Allow primary fire.
			"####" "#" 0 
			{
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK)
				{	return ResolveState("HoldScope");	}
				return ResolveState(null);
			}
		ZoomOut:
			//Zoom Out
			ARSI A 3
			{
				A_ZoomFactor(1.0);
				A_StopSound(6);
				A_PlaySound("Doom4/Weapon/Machinegun/ZoomOut", 8, 1.0, 0);
				A_SetInventory("MGZoomToken",0);
				A_SetInventory("AltFireToken",0);
			}
			Goto Ready;
			
		FireZoomed:
			R016 N 1 Bright
			{
				if (!CountInv("MachinegunFireToken"))
				{
					A_PlaySound("Doom4/Weapon/Machinegun/FireZoomed",5,1);
					A_GiveInventory("MachinegunFireToken",1);
				}
				else
				{
					A_PlaySound("Doom4/Weapon/Machinegun/FireZoomed",6,1);	//it plays in another channel
					A_SetInventory("MachinegunFireToken",0);
				}
				A_AlertMonsters();
				A_GunFlash("Null");
				
				//while this is there for the puff, it also deals 2*random(1,3) extra damage to first target hit
				A_FireBullets(0,0,1,2,"D4BulletPuff",FBF_USEAMMO|FBF_PUFFTRACER,0,"BulletSmallTracer",-1,0); 
				A_RailAttack(6*random(1,3),0,0,-1,-1,RGF_SILENT);
				//casings check
				if (GetCvar("D4D_Casings"))
				{	
					A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);	
				}
				
				A_SetPitch(pitch-0.4);
				A_SetBlend("orange",0.03,6);
			}
			"####" N 1 Bright A_SetTics(IsDoubleSpeed() ? 0 : 1);
			"####" NN 1 Bright A_SetPitch(pitch+0.2);
			"####" N 1
			{
				A_SetTics(IsDoubleSpeed() ? 0 : 1);
				//Holding both
				if ((GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) &&
					(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK))
				{
					return ResolveState(null);
				}
				//Secondary
				else if (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
				{
					return ResolveState("HoldScope");
				}
				//Primary
				else if (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
				{
					return ResolveState("ZoomOut");
				}
				return ResolveState(null);
			}
			"####" N 0 A_Refire("FireZoomed");
			Goto HoldScope;
		
		//-------------------------------------------------------
		// MiniMissiles
		FireMod2:
		StartMicro:
			ARMI A 0 
			{				
				if (invoker.CheckAmmo(0,false,true))
				{	return ResolveState("MissilesOpen");	}
				return ResolveState("NotEnoughAmmo");
			}			
		MissilesOpen:
			ARMR A 0 
			{
				A_GiveInventory("MGMissileToken",1);
				return A_JumpIf(IsDoubleSpeed(),"MissilesOpenFast");
			}
			ARMR ABCDEF 1;
			Goto MissilesReady;
		MissilesOpenFast:
			ARMR ACE 1;
			Goto MissilesReady;
		MissilesReady:
			ARMR F 1 
			{
				if (!DoSecondaryPriming())
				{
					if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK)
						return ResolveState("MissilesFire");
					return ResolveState("MissilesClose");
				}
				A_WeaponReady(WRF_NOSECONDARY);
				return ResolveState(null);
			}
			ARMR F 0 A_Refire("MissilesReady");
			Goto MissilesClose;
		MissilesClose:
			ARMR A 0 
			{
				A_SetInventory("MGMissileToken",0);
				A_SetInventory("AltFireToken",0);
				A_PlaySound("Doom4/Weapon/Machinegun/MinMissileRelease",6);
			}
			ARMR E 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMR D 1;
			ARMR C 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMR B 1;
			ARMR A 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			Goto Ready;
		
		
		MissilesFire:
			ARMR F 0
			{
				if (!invoker.CheckAmmo(0,false,true))
				{	return ResolveState("MissilesClose");	}
				A_AlertMonsters();
				A_GunFlash("Null");
				if(GetCvar("HQEffectsWeapons"))
				{
					A_FireProjectile("MGSmokeSpawner",0,0,5,2);
					A_FireProjectile("MGMiniMissile",0,0,5,2);	//fires the regular micro missiles
					A_TakeInventory(invoker.AmmoType1, invoker.AmmoUse1, TIF_NOTAKEINFINITE);
				}
				else
				{
					A_FireProjectile("MGMiniMissileNoTrail",0,0,5,2);	//micro missiles without trail
				}
				
				A_SetPitch(pitch-0.5);
				A_PlaySound("Doom4/Weapon/Machinegun/MiniMissileFire",5,1);
				A_SetBlend("orange",0.03,6);
				
				// Go by n-1 here. 
				
				int count = CountInv("MicroMissilesCounter");
				StateLabel next = "MissilesFire6";
				
				Switch (count)
				{
					Case 0:	next = "MissilesFire1";	break;
					Case 1:	next = "MissilesFire2";	break;
					Case 2:	next = "MissilesFire3";	break;
					Case 3:	next = "MissilesFire4";	break;
					Case 4:	next = "MissilesFire5";	break;
					Default: break;
				}
				A_SetInventory("MicroMissilesCounter",(count + 1) % 5);
				return ResolveState(next);
			}
		
		MissilesFire1:
			ARMA B 1 Bright A_WeaponOffset(1.0, 33.0);
			ARMA C 1      { A_WeaponOffset(3.0, 35.0); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA D 1      { A_WeaponOffset(1.5, 33.5); A_SetPitch(pitch+0.25); }
			ARMA D 1      { A_WeaponOffset(0.0, 32.0); A_SetPitch(pitch+0.25); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA D 1;
			ARMA D 0 A_Refire("MissilesFire");
			"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
			Goto MissilesReady;
		MissilesFire2:
			ARMA E 1 Bright  A_WeaponOffset(1.0, 33.0);
			ARMA F 1      { A_WeaponOffset(3.0, 35.0); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA G 1      { A_WeaponOffset(1.5, 33.5); A_SetPitch(pitch+0.25); }
			ARMA G 1      { A_WeaponOffset(0.0, 32.0); A_SetPitch(pitch+0.25); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA G 1;
			ARMA G 0 A_Refire("MissilesFire");
			"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
			Goto MissilesReady;
		MissilesFire3:
			ARMA H 1 Bright A_WeaponOffset(1.0, 33.0);
			ARMA I 1      { A_WeaponOffset(3.0, 35.0); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA J 1      { A_WeaponOffset(1.5, 33.5); A_SetPitch(pitch+0.25); }
			ARMA J 1      { A_WeaponOffset(0.0, 32.0); A_SetPitch(pitch+0.25); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA J 1;
			ARMA J 0 A_Refire("MissilesFire");
			"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
			Goto MissilesReady;
		MissilesFire4:
			ARMA K 1 Bright A_WeaponOffset(1.0, 33.0);
			ARMA L 1	{	A_WeaponOffset(3.0, 35.0); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA M 1	{	A_WeaponOffset(1.5, 33.5); A_SetPitch(pitch+0.25); }
			ARMA M 1	{	A_WeaponOffset(0.0, 32.0); A_SetPitch(pitch+0.25); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA M 1;
			ARMA M 0 A_Refire("MissilesFire");
			"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
			Goto MissilesReady;
		MissilesFire5:
			ARMA N 1 Bright A_WeaponOffset(1.0, 33.0);
			ARMA O 1	{ 	A_WeaponOffset(3.0, 35.0); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA P 1	{	A_WeaponOffset(1.5, 33.5); A_SetPitch(pitch+0.25); }
			ARMA P 1 	{	A_WeaponOffset(0.0, 32.0); A_SetPitch(pitch+0.25); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA P 1;
			ARMA P 0 A_Refire("MissilesFire");
			"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
			Goto MissilesReady;
		MissilesFire6:
			ARMA Q 1 Bright A_WeaponOffset(1.0, 33.0);
			ARMA R 1      { A_WeaponOffset(3.0, 35.0); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMA F 1      { A_WeaponOffset(1.5, 33.5); A_SetPitch(pitch+0.25); }
			ARMA F 1      { A_WeaponOffset(0.0, 32.0); A_SetPitch(pitch+0.25); A_SetTics(IsDoubleSpeed() ? 0 : 1); }
			ARMR F 1;
			ARMR F 0 A_Refire("MissilesFire");
			"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
			Goto MissilesReady;

				
		
		

	//-------------------------------------------------------
	// Alt fire switcheroo
	//-------------------------------------------------------
	//AssaultRifleMod1 - TacticalScope
	//AssaultRifleMod2 - MicroMissiles

	Reload:
		
		"####" "#" 0 
		{
			if(CountInv("AssaultRifleMod1")) //if has TacticalScope
			{
				if(CountInv("MicroMissilesActive")) //but MicroMissiles was active
				{
					return ResolveState("FromMicroMissilesToTacticalScope");
				}
				else if(!CountInv("TacticalScopeActive"))
				{
					return ResolveState("FromNormalToTacticalScope"); //but if it didnt have MicroMissiles active, then it was in "normal"
				}
			}
			if(CountInv("AssaultRifleMod2")) //if it has MicroMissiles
			{
				if(CountInv("TacticalScopeActive")) //but TacticalScope was active
				{
					return ResolveState("FromTacticalScopeToMicroMissiles");
				}
				else if(!CountInv("MicroMissilesActive"))	//if nothing was active,
				{
					return ResolveState("FromNormalToMicroMissiles"); //then it was in "normal" SG
				}
			}
			else
			{
				D4Msg.PrintStatus(D4Msg.NoMods);
			}
			return ResolveState(null);
		}
		"####" "#" 5;
		Goto Ready;
		
		// There reeeeaaaally doesn't need to be so many 'from <x>' states, but
		// oh well... If it ain't broke, don't fix it I guess. For now...
		
		FromNormalToMicroMissiles:
			"####" "####" 1 A_WeaponOffset(4,20,WOF_ADD);
			TNT1 A 5;
			ARMS AA 1 A_WeaponOffset(0,-15,WOF_ADD);
			"####" "#" 0 A_PlaySound("Doom4/Weapon/Machinegun/SwitchToMissiles",5,1);
			"####" "#" 0 A_GiveInventory("MicroMissilesActive",1);
			ARMS BCDEFGHIJ 1 A_WeaponOffset(0,-4,WOF_ADD);
			ARMS KKK 1 A_WeaponOffset(2,2,WOF_ADD);
			ARMS KKK 1 A_WeaponOffset(-2,-2,WOF_ADD);
			ARMS LMNN 1 A_WeaponOffset(-4,-2,WOF_ADD);
			ARMI A 1 A_WeaponOffset(0,-2,WOF_ADD);
			Goto Ready;
			
		FromNormalToTacticalScope:
			"####" "####" 1 A_WeaponOffset(4,20,WOF_ADD);
			TNT1 A 5;
			ARSS AA 1 A_WeaponOffset(0,-10,WOF_ADD);
			ARSS F 0  A_PlaySound("Doom4/Weapon/Machinegun/SwitchToScope",5,1);
			ARSS F 0 A_GiveInventory("TacticalScopeActive",1);
			ARSS ABCD 1 A_WeaponOffset(0,-10,WOF_ADD);
			ARSS EF 1;
			ARSS GGGHIII 2;
			ARSS IJK 1;
			ARSS LMNO 1 A_WeaponOffset(-4,-5,WOF_ADD);
			Goto Ready;
			
		FromTacticalScopeToMicroMissiles:
			"####" "####" 1 A_WeaponOffset(4,20,WOF_ADD);
			TNT1 A 5;
			"####" "#" 0 
			{
				A_PlaySound("Doom4/Weapon/Machinegun/SwitchToMissiles",5,1);
				A_SetInventory("TacticalScopeActive",0);
				A_GiveInventory("MicroMissilesActive",1);
			}
			ARMS AA 1 A_WeaponOffset(0,-15,WOF_ADD);
			ARMS BCDEFG 1 A_WeaponOffset(0,-4,WOF_ADD);
			ARMS G 3;
			ARMS HIJ 1 A_WeaponOffset(0,-4,WOF_ADD);
			ARMS KKK 1 A_WeaponOffset(2,2,WOF_ADD);
			ARMS K 3;
			ARMS KKK 1 A_WeaponOffset(-2,-2,WOF_ADD);
			ARMS LMNN 1 A_WeaponOffset(-4,-2,WOF_ADD);
			//ARMI A 1 A_WeaponOffset(0,-2,WOF_ADD);
			Goto Ready;
			
		FromMicroMissilesToTacticalScope:
			"####" "####" 1 A_WeaponOffset(4,20,WOF_ADD);
			TNT1 A 5;
			ARSS AA 1 A_WeaponOffset(0,-10,WOF_ADD);
			---- A 0 
			{
				A_PlaySound("Doom4/Weapon/Machinegun/SwitchToScope",5,1);
				A_SetInventory("MicroMissilesActive",0);
				A_GiveInventory("TacticalScopeActive",1);
			}
			ARSS ABCD 1 A_WeaponOffset(0,-10,WOF_ADD);
			ARSS EF 1 ;
			ARSS GGGHIII 2;
			ARSS IJK 1;
			ARSS LMNO 1 A_WeaponOffset(-4,-5,WOF_ADD);
			Goto Ready;
	}
}



//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Mod tokens
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

Class AssaultRifleModSecondary : Inventory	//the token to switch between mods
{	Default { +INVENTORY.UNDROPPABLE } }

Class MicroMissilesActive : Inventory	
{	Default { +INVENTORY.UNDROPPABLE } }

Class TacticalScopeActive : Inventory	
{	Default { +INVENTORY.UNDROPPABLE } }




//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Primary Fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class MachinegunFireToken : Inventory	//this one is to play the fire sounds in different channels
{
	Default 
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}

Class MGSmokeSpawner : Actor 
{
	Default 
	{
		Radius 1;
		Height 1;
		Speed 14;
		Projectile;
		+NOINTERACTION
		+NOTIMEFREEZE
	}
    States
    {
    Spawn:
        TNT1 A 1;
	Death:
		TNT1 A 0 A_SpawnItemEx("MGSmoke",0,random(1,-1),0,0,0,frandom(0.1,0.25),0,32);
		TNT1 A 2;
        Stop;
    }
}

Class MGSmoke : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Alpha 0.8;
	}
	States
	{
	Spawn:
	   TNT1 A 0 NoDelay A_Jump(256,random(1,2));
	   X201 EF 0 { return ResolveState("Cont"); }
	Cont:
	   "####" "#" 0 A_SetScale(frandom(0.03,0.035));
	   "####" "###" 2 
	   {
			A_SetScale(Scale.X+0.003);
			A_FadeOut(frandom(0.035,0.099));
	   }
	Looper:
	   "####" "#" 0 A_SetScale(Scale.X+0.003);
	   "####" "#" 2 A_FadeOut(0.035);
	   Loop;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Zoom mod related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class MGZoomToken : Inventory {	Default { Inventory.InterhubAmount 0; } }

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Mini missiles mod related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class MicroMissilesCounter : Inventory	//this one is to keep track of whic micro rocket firing animation to play
{	Default { Inventory.MaxAmount 6;	} }

Class MGMissileToken : Inventory { Default { Inventory.InterhubAmount 0; } }

Class MGMiniMissile : D4D_Projectile
{
	const TimerMax = 35;
	
	int value1;
	int value2;
	double value3;
	double value4;
	int counter;
	
	double UAnglea;
	double UAngleb;
	int count;
	double UX;
	double UY;
	double UZ;
	double oldangle;
	
	Default 
	{
		Projectile;
		Speed 30;
		Damage 0;
		Radius 3;
		Height 6;
		Scale 0.25;
		MissileType "MGMiniMissileSmoke";
		MissileHeight 8;
		+HITTRACER
		+EXTREMEDEATH
		+CAUSEPAIN
		+SEEKERMISSILE
		+FORCERADIUSDMG
		WeaveIndexXY 10;
		WeaveIndexZ 10;
		SeeSound "Doom4/Weapon/Machinegun/MiniMissilePass";
	}
	
	States
	{
	Spawn:
		SWMS A 0 NoDelay
		{
			value1 = random(-3,3);
			value2 = random(-3,3);
			value3 = frandom(-2.0,2.0);
			value4 = frandom(-1.5, 1.5);
			A_FaceMovementDirection();
		}
	Looper:
		SWMS A 1 Bright 
		{
			if (counter >= TimerMax)
			{
				return ResolveState("Death");
			}
			else
			{
				counter++;
				MC_Functions.StaticSeekAng(self, 5);
				A_Weave(value1, value2, value3, value4);
			}
			return ResolveState(null);
		}
		Loop;
	Death:
		TNT1 A 1
		{
			A_PlaySound("Doom4/Weapon/Machinegun/MiniMissileExplo");
			A_Explode(48,32);
		//	A_RadiusThrust(48,32,RTF_THRUSTZ|RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE);
			if (GetCvar("HQEffectsWeapons"))
			{
				A_SpawnParticle("FF0000",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("FF0000",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("FF0000",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("BD0000",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("BD0000",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("BD0000",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("FF4D00",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("FF4D00",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
				A_SpawnParticle("FF4D00",SPF_FULLBRIGHT,random(20,40),random(2,4),0,0,0,0,frandom(2.5,-2.5),frandom(2.5,-2.5),frandom(1,5),0,0,-0.3);
			}
			A_SpawnItemEx("MGMiniMissileExplo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

Class MGMiniMissileNoTrail : MGMiniMissile
{
	Default 
	{
		MissileType "";
	}
}

Class MGMiniMissileExplo : Actor 
{
	Default 
	{
		+FORCEXYBILLBOARD
		+NOINTERACTION
		Scale 0.05;
	}
	States
	{
	Spawn:
		X132 AABBCC 1 Bright A_SetScale(Scale.X+0.038);
		X132 DEFGHIJKLMNOPQR 2 Bright
		{
			A_FadeOUt(0.15);
			A_SetScale(Scale.X+0.038);
		}
		Stop;
	}
}

Class MGMiniMissileExploSlightlyBigger : Actor 
{
	Default 
	{
		+FORCEXYBILLBOARD
		+NOINTERACTION
		Scale 0.07;
	}
	States
	{
	Spawn:
		X132 AABBCC 1 Bright A_SetScale(Scale.X+0.038);
		X132 DEFGHIJKLMNOPQR 2 Bright
		{
			A_FadeOut(0.15);
			A_SetScale(Scale.X+0.055);
		}
		Stop;
	}
}

Class MGMiniMissileSmoke : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.01;
		RenderStyle "Add";
		Alpha 0.8;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(256, random(1,15));
		X102 ABCDEFGHIJKLMNOPQRSTUV 2
		{
			A_FadeOut(0.15);
			A_SetScale(Scale.X+0.005);
		}
		Goto Spawn;
	}
}
Class MGMiniMissileSmokeStuck : MGMiniMissileSmoke
{
	Default 
	{
		Scale 0.03;
	}
}







//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Casing
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class HARCasingSpawner : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 22;
	const YOff = 14;
	const ZOff = 37;
	double UPos;
	int t;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (master) { pitch = master.pitch; }
			
			// And set a multiplier for taking from the distance so it actually goes well with the gun.
			
			if (pitch > 0) //Looking down
			{	UPos = (sin(pitch) * 12);	}
			else //Looking up
			{	UPos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - UPos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			
			if (GetCvar("D4D_Casings"))
			{
				if (GetCvar("D4D_SilentCasings"))
				{	A_SpawnItemEx("D4BulletCasingSilent",0,0,0,0,frandom(1,3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION);	}
				else
				{	A_SpawnItemEx("D4BulletCasing",0,0,0,0,frandom(1,3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION);	}
			}
		}
		Stop;
	Nothing:
		TNT1 A 100;
		Stop;
	}
}