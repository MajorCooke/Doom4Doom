/*

								*****WARNING!*****
	This system has been disabled on purpose! The whole setup is being 
	redone the moment new weapon sprites are made, and NOT before then. Once 
	the weapons have been overhauled with their new graphics, porting the
	code over will be much easier (it'll just be a search/replace job then).
	
	Also required are the rest of the weapons.
	

================================================================================

	Akimbo System
	Developed by Major Cooke
	
================================================================================
	
	The idea is simple: Hold one weapon in the left, and the other one in the 
	right. This is not the same as dual wielding, since the only the 
	Super Shotgun is dual wieldable.

	The code is, unfortunately, far more complex. 
	Code spelunkers, beware! Your in for some nasty surprises and headaches.
	Possibly an aneurism from sheer wtf-ery.
	Small chance that someone's head will explode.

	See AkimboFunctions.txt for all the functions and base states 
	(Select, Deselect, Ready, Fire).
==============================================================================*/

Struct AkimboStates
{
	StateLabel ReadyState;
	StateLabel FireState;
	StateLabel AltFireState;
	StateLabel SelectState;
	StateLabel DeselectState;
	StateLabel ModState;
	
	void Init()
	{
		ReadyState = FireState = AltFireState = SelectState = DeselectState = null;
	}
}

Struct AkimboStateFlags
{
	bool bAddWeapon;
	bool bAddBob;
	bool bPowDouble;
	bool bCVarFast;
	bool bFlip;	
}

Class AkimboWeapon : Weapon
{
	enum StatesNum
	{
		ID_D4Pistol = 1,
		ID_D4Shotgun,
		ID_D4SuperShotgun,
		ID_D4Repeater,
		ID_D4AssaultRifle,
		ID_D4Chaingun,
		ID_D4RocketLauncher,
		ID_D4PlasmaRifle,
		ID_D4LightningGun,
		ID_D4GaussCannon,
		ID_D4VortexRifle,
		ID_D4StaticRifle,
		ID_D4CarrionCannon,
		ID_D4BFG
	};
	AkimboStates as[15], LeftStates, RightStates;
	int Status[2];
	StateLabel LeftNext, RightNext;
	Class<Weapon> LeftPend, RightPend;
	Class<Weapon> LeftGun, RightGun;
	bool SwitchMod[2];
	int InputCur, InputOld;
	int WeaponFlags;
	Vector2 LOff, ROff, LO, RO;
	uint8 WeaponID[2];
	bool IsLowering;
	bool interpolate[2];
	Actor SoundMaker[2];
	Name NextSprite[2];
	bool ForceAbsCoords[2];
	enum StatusState
	{
		Left = 0,
		Right = 1,
		Nurr = 0,
		Ready = 1,		// Ready to fire
		Fire,			// Firing primary
		AltFire,		// Firing secondary
		ChangeMod,		// Changing mods
		ChangeWeapon,	// Changing weapons
		Raise,			// Raising
		Lower,			// Lowering
	};
	enum AKOverlays
	{
		AKBase = 30000,
		AKRLow = 30001,
		AKRHigh = 39999,
		OV_RightWeapon = 30000,
		OV_LeftWeapon = -30000,
		OV_SwitchLeft,
		OV_SwitchRight,
		OV_Custom
	};
	Default
	{
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.7;
		Weapon.BobRangeY 0.5;
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		+WEAPON.CHEATNOTWEAPON
		Weapon.SelectionOrder 9999999;
		Weapon.UpSound "Doom4/Weapons/WeaponSwitch";
		Tag "Akimbo Guns";
	}
}

Class UpdateLeftWeapon : Inventory { }
Class UpdateRightWeapon : Inventory { }
Class LeftWeaponCount : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 14; Inventory.InterhubAmount 14; +INVENTORY.UNTOSSABLE } }
Class RightWeaponCount : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 14; Inventory.InterhubAmount 14; +INVENTORY.UNTOSSABLE } }


Class AkimboSoundMaker : Actor 
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
}