
//===================================================================================================
//===================================================================================================
//
//		Rocket Launcher
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code rewrite + layer support: Major Cooke
//	Offset tweaks: Xaser
//
//===================================================================================================
//===================================================================================================

Class D4RocketLauncher : Doom4Weapon //replaces RocketLauncher
{
	Array<D4Rocket> Rockets;
	Array<Actor> Targets;
	MCHudShape Reticle;
	const LockOnCone = cos(20); //0.93969262078
	const LockTokenTick = 30;
	const LockTokenMax = 200;
	Default 
	{
		+WEAPON.NOALERT
		+WEAPON.ALT_AMMO_OPTIONAL
		Weapon.SlotNumber 1;
		Inventory.PickupMessage "Rocket Launcher! Make a mess!";
		Obituary "%o rode %k's rocket.";
		Tag "Rocket Launcher";
		Weapon.AmmoType1 "D4Rockets";
		Weapon.AmmoGive1 4;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 80;
		Weapon.SlotNumber 5;
		Weapon.SlotPriority 1.0;
	}
	
	override void OwnerDied()
	{
		ClearReticle();
		ClearTargets();
		Super.OwnerDied();
	}
	
	override void OnDestroy()
	{
		ClearReticle();
		ClearTargets();
		Super.OnDestroy();
	}
	
	action bool, double CheckLockOn(Actor mo, Vector3 forw)
	{
		if (!mo || mo.health < 1 || (!mo.bSHOOTABLE && mo.bNONSHOOTABLE) || mo.bFRIENDLY || mo.bCORPSE || mo.bDORMANT)
			return false, 0.0;
		if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
			return false, 0.0;
		
		Vector3 offs = Vec2OffsetZ(0, 0, player.viewz);		// Account for the view height
		Vector3 epos = mo.pos + (0, 0, mo.height * 0.5);
		Vector3 diff = level.Vec3Diff(offs, epos);	// Internally does v2 - v1.
		double cone = (forw dot diff) / diff.length();
		return (cone > LockOnCone), cone;
	}
	
	action Actor LockOn(Actor mon)
	{
		Vector3 forw = ( cos(angle) * cos(pitch), sin(angle) * cos(pitch), -sin(pitch) );
		if (CheckLockOn(mon, forw))
			return mon;
		
		let i = invoker;
		let Event = MCHandler.Fetch();
		int size = Event.Monsters.Size();
		if (size < 1)	return null;
		
		let o = invoker.owner;
		Actor closest = null;
		double dist = 0;			// old method
		//double dist = 32767 ** 2;	// new method
		for (int i = 0; i < size; i++)
		{
			
			Actor mo = Event.Monsters.Actors[i];
			bool check = false;
			double cone = 0.0;
			[check, cone] = CheckLockOn(mo, forw);
			if (!check)
				continue;
			
			
			// Within 20 degrees.
			// This method measures the distance from the player to the monster.
			/*
			double distcheck = Distance3DSquared(mo);
			if (!closest || distcheck < dist)
			{
				closest = mo;
				dist = distcheck;
			}
			*/
			
			// This method uses distance to the cone center.
			if (!closest || (dist < cone))
			{
				closest = mo;
				dist = cone;
			}
		}
		return closest;
	}
	
	action void SetReticle(Actor tar)
	{
		if (!tar)	return;
		
		let i = invoker;
		if (!i.MC)	
		{	
			i.MC = MCHandler.Fetch();
			if (!i.MC)	{ Console.Printf("No handler"); return; }
		}
		
		Vector2 ScreenOffset = (0, tar.height * 0.5);
		
		if (i.Reticle)	
			i.Reticle.Destroy();
		i.Reticle = i.MC.AddShape(tar, i.Owner, "TRGTA0", ScreenOffset, 0, (1,1));
	}

	action void ClearReticle()
	{
		let i = invoker;
		if (i.Reticle)	i.Reticle.Destroy();
	}
	
	action void ClearTargets()
	{
		invoker.Target = null;
		invoker.Tracer = null;
		invoker.Targets.Clear();
	}
	
	action void ClearRockets()
	{
		invoker.Rockets.Clear();
	}
	
	action Actor A_FireSeekerRocket(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)
	{
		let mo = A_FireProjectile(missiletype, angle, useammo, spawnofs_xy, spawnheight, flags, pitch);
		if (mo)
		{
			mo.Tracer = invoker.Target;
		}
		return mo;
	}
	
	action Actor A_FireDetonatorRocket(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)
	{
		let mo = D4Rocket(A_FireProjectile(missiletype, angle, useammo, spawnofs_xy, spawnheight, flags, pitch));
		if (mo)
		{
			invoker.Rockets.Push(mo);
		}
		return mo;
	}
	
	action int A_DetonateRockets()
	{
		int count = 0;
		let i = invoker;
		for (int j = 0; j < i.Rockets.Size(); j++)
		{
			let r = i.Rockets[j];
			if (r && !r.bKILLED)
			{
				r.DetSecondary();
				count++;
			}
		}
		i.Rockets.Clear();
		return count;
	}
	
	private int Cleaner;
	override void DoEffect()
	{
		Super.DoEffect();
		if (++Cleaner >= Second)
		{
			Cleaner = 0;
			Array<D4Rocket> temp; temp.Clear();
			for (int i = 0; i < Rockets.Size(); i++)
			{
				if (Rockets[i])	temp.Push(Rockets[i]);
			}
			Rockets.Move(temp);
		}
	}
	
	States
	{
	Spawn:
		WPPK G -1;
		Stop;
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		#### "#" 0 
		{
			A_SetInventory("RLLockToken",0);
			A_SetInventory("RLTargetToken",0);
			A_SetInventory("RocketFired",0);
			A_SetInventory("TripleShot",0);
			ClearReticle();
		}
	DesLoop:
		---- A 1 A_Lower;
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
			RLNI A 0 
			{
				A_SetInventory("RLLockToken",0);
				A_SetInventory("RLTargetToken",0);
				A_SetInventory("RocketFired",0);
				A_SetInventory("TripleShot",0);
				ClearReticle();
				if (CountInv("DetonateActive"))			{	return ResolveState("DetonateSpriteSelect");	}
				if (CountInv("LockOnActive"))			{	return ResolveState("LockOnSpriteSelect");		}
				return ResolveState("ResumeSelectSequence");
			}
			DetonateSpriteSelect:
				RLDI A 0 ;
				Goto ResumeSelectSequence;
			LockOnSpriteSelect:
				RLLI A 0 ;
				Goto ResumeSelectSequence;
	ResumeSelectSequence:
		---- A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	Ready:
		RLNI A 0
		{
			if (CountInv("RocketFired"))			{	return ResolveState("ReadyNoSprite");	}
			return ResolveState(null);
		}
		Ready_StartPreparingSprites:	//all "Start preparing" are to assign what sprite to display in the #### instances
			"----" A 0 
			{
				if (CountInv("DetonateActive"))			{	return ResolveState("DetonateSpriteReady");	}
				if (CountInv("LockOnActive"))			{	return ResolveState("LockOnSpriteReady");		}
				return ResolveState("NormalSpriteReady");
			}			
			NormalSpriteReady:
				RLNI A 0 { return ResolveState("ResumeReadySequence"); }
			DetonateSpriteReady:
				RLDI A 0 { return ResolveState("ResumeReadySequence"); }
			LockOnSpriteReady:
				RLLI A 0 { return ResolveState("ResumeReadySequence"); }
				
	ResumeReadySequence:
		---- A 0 A_SetAlwaysSwitchable(false);
		#### A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Wait;
	ReadyNoAmmo:
		#### A 1
		{
			A_SetAlwaysSwitchable(false);
			A_SetInventory("RLLockToken",0);
			A_SetInventory("RLTargetToken",0);
			A_SetInventory("RocketFired",0);
			A_SetInventory("TripleShot",0);
		}
		Goto Ready;
	ReadyNoSprite:
		M666 A 1 
		{
			if (CountInv("TripleShot") > 1)
			{	A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_NOBOB);	}
			else if (CountInv("RocketFired"))
			{	A_WeaponReady(WRF_NOPRIMARY|WRF_NOSWITCH|WRF_NOBOB);	}
			else
			{	return ResolveState("Ready_StartPreparingSprites");	}
			return ResolveState(null);
		}
		Loop;
		
	//-------------------------------------------------------
	// Primary fire 
	//-------------------------------------------------------
	Fire:
		#### "#" 0 
		{
			if (CountInv("DetonateActive"))	{	return ResolveState("DetonateSprite");	}
			if (CountInv("LockOnActive"))	{	return ResolveState("LockOnSprite");	}
			return ResolveState("NormalSprite");
		}		
		NormalSprite:
			RLNI A 0;
			Goto ResumeFireSequence;
		DetonateSprite:
			RLDI A 0;
			Goto ResumeFireSequence;
		LockOnSprite:
			RLLI A 0;
			Goto ResumeFireSequence;
			
	ResumeFireSequence:
		#### A 0 Bright
		{
			if (A_JumpIfNoAmmo("Null"))	//if not enough ammo
			{
				A_SetInventory("FireToken",0);
				return ResolveState("ReadyNoAmmo");
			}
			A_AlertMonsters();	
			A_GiveInventory("FireToken",1);
			if (CountInv("TripleShot") && !CountInv("RocketFired"))		//Locked on.
			{
				A_SetInventory("RLLockToken",0);
				A_SetInventory("RLTargetToken",0);
				A_GiveInventory("TripleShot",1);
				A_GiveInventory("RocketFired",1);
				A_Overlay(RocketFire,"TripleFire");
				return ResolveState("Ready");
			}
			return ResolveState(null);
		}
	//Holding ground for the sake of the weapon's sanity.
	FHold:
		#### A 1
		{			
			if (A_Overlay(RocketFire,"FireAnimation",true))
			{	A_OverlayFlags(RocketFire,PSPF_POWDOUBLE|PSPF_ADDWEAPON,true);	}
			return ResolveState(null);
		}
		#### "#" 0 A_Refire("FHold");
		Goto Ready;
		
		
	//-------------------------------------------------------
	// Flash sequence, used by all three firemodes and alt fires
	//-------------------------------------------------------
	
	FireAnimation:	//all "Start preparing" are to assign what sprite to display in the #### instances
		RLNF A 0
		{
			if (CountInv("DetonateActive"))			{	return ResolveState("DetonateSpriteFlash");	}
			if (CountInv("LockOnActive"))			{	return ResolveState("LockOnSpriteFlash");	}
			return ResolveState ("ResumeFlashSequence");
		}
		DetonateSpriteFlash:
			RLDF A 0 { return ResolveState("ResumeFlashSequence"); }
		LockOnSpriteFlash:
			RLLF A 0 { return ResolveState("ResumeFlashSequence"); }
			
	ResumeFlashSequence:
		#### B 1 Bright 
		{
			A_GunFlash("Null");
			
			if (CountInv("DetonateActive"))
				A_FireDetonatorRocket("D4Rocket",0,1,7);
			else
				A_FireProjectile("D4Rocket",0,1,7);
			A_PlaySound("Doom4/Weapon/RocketLauncher/Fire",5,1);
			A_Overlay(P1,"NormalPitchHandler");
			A_GiveInventory("RocketFired",1);
			A_WeaponOffset(10,7,WOF_ADD);
			A_SetAlwaysSwitchable(true);
		}
	Res2Check:
		---- B 0 A_JumpIf(IsDoubleSpeed(), "Res2Fast");
	Res2:
		#### C 1 Bright   A_WeaponOffset(10, 7,WOF_ADD);
		#### D 1 Bright	A_WeaponOffset( 5, 3,WOF_ADD); 
		#### E 1 Bright   A_WeaponOffset( 3, 2,WOF_ADD);
		#### F 2          A_WeaponOffset( 2, 1,WOF_ADD); //total +30 + 20
		Goto Flash_StartPreparingIdleSprites;
		
	Res2Fast:
		#### D 1 Bright { 	A_WeaponOffset(15, 10, WOF_ADD); }
		#### F 1 			A_WeaponOffset( 5,  3, WOF_ADD);
	
			Flash_StartPreparingIdleSprites:	//all "Start preparing" are to assign what sprite to display in the #### instances
				RLNI A 0
				{
					if (CountInv("DetonateActive"))			{	return ResolveState("DetonateSpriteFlashIdle");	}
					if (CountInv("LockOnActive"))			{	return ResolveState("LockOnSpriteFlashIdle");	}
					return ResolveState ("ResumeFlashSequenceIdle");
				}
				
				DetonateSpriteFlashIdle:
					RLDI A 0	{	return ResolveState("ResumeFlashSequenceIdle");	}
				LockOnSpriteFlashIdle:
					RLLI A 0	{	return ResolveState("ResumeFlashSequenceIdle");	}
			
	
	FireNoise:
		M666 A 10;
		M666 A 6 A_StartSound("Doom4/Weapon/RocketLauncher/Reload1", 10, CHANF_OVERLAP, 0.6);
		M666 A 4 A_StartSound("Doom4/Weapon/RocketLauncher/Reload2", 10, CHANF_OVERLAP, 0.6);
		M666 A 10 A_StartSound("Doom4/Weapon/RocketLauncher/Rotate", 10, CHANF_OVERLAP, 0.6);
		M666 A 1 A_StartSound("Doom4/Weapon/RocketLauncher/Reload3", 10, CHANF_OVERLAP, 0.6);
		Stop;
		
	ResumeFlashSequenceIdle:
		#### A 6 A_Overlay(RL_FireNoise, "FireNoise");
			Flash_StartPreparingReloadSprites:	//all "Start preparing" are to assign what sprite to display in the #### instances
				RLNR A 0
				{
					if (CountInv("DetonateActive"))			{	return ResolveState("DetonateSpriteFlashReload");	}
					if (CountInv("LockOnActive"))			{	return ResolveState("LockOnSpriteFlashReload");	}
					return ResolveState ("ResumeFlashSequenceReload");
				}
				
				DetonateSpriteFlashReload:
					RLDR A 0 { return ResolveState("ResumeFlashSequenceReload"); }
				LockOnSpriteFlashReload:
					RLLR A 0 { return ResolveState("ResumeFlashSequenceReload"); }
			//A_SetTics(IsDoubleSpeed() ? 0 : 1);
	ResumeFlashSequenceReload:
		#### # 0 A_JumpIf(IsDoubleSpeed(),"RFSFast");
		#### AA 1 A_WeaponOffset(-2,-1,WOF_ADD); //-4 -2
		#### AA 1 A_WeaponOffset(-2,-1,WOF_ADD);							//-8 -4
		#### CC 1 A_WeaponOffset(-2,-1,WOF_ADD);							//-12 -6 
		#### DD 1 A_WeaponOffset(-2,-1,WOF_ADD);							//-16 -8 
		#### EE 1 A_WeaponOffset(-2,-1,WOF_ADD);							//-20 -10 
		#### FF 1 A_WeaponOffset(-2,-1,WOF_ADD);							//-24 -12
		#### G 1 A_WeaponOffset(-2,-3,WOF_ADD);							//-26 -15
		#### H 1 A_WeaponOffset(-2,-2,WOF_ADD);							//-28 -18
		#### I 1 A_WeaponOffset(-2,-2,WOF_ADD);							//-30 -20
		#### JKLMNOPQRS 1;
		Goto RFSEnd;		
	RFSFast:
		#### A 1 A_WeaponOffset(-4,-2,WOF_ADD); 							//+26 +18
		#### A 1 A_WeaponOffset(-4,-2,WOF_ADD);							//+22 +16
		#### C 1 A_WeaponOffset(-4,-2,WOF_ADD);							//+18 +14 
		#### D 1 A_WeaponOffset(-4,-2,WOF_ADD);							//+14 +12
		#### E 1 A_WeaponOffset(-4,-2,WOF_ADD);							//+10 +10 
		#### F 1 A_WeaponOffset(-4,-2,WOF_ADD);							//+6 +8
		#### G 1 A_WeaponOffset(-4,-6,WOF_ADD);							//+2 +2
		#### I 1 A_WeaponOffset(-2,-2,WOF_ADD);							//+0 +0
		#### JLMPR 1;
		Goto RFSEnd;
	RFSEnd:
		#### T 1 
		{
			A_SetAlwaysSwitchable(false);
			A_SetInventory("RocketFired",0);
			A_SetInventory("TripleShot",0);
		}
		Stop;

	//-------------------------------------------------------
	// Alt fires
	//-------------------------------------------------------
	
	AltFire:
		#### A 1 
		{
			// [MC] Welcome to my Hell.
			if (CountInv("DetonateActive")) //Detonate token?
			{
				//Make sure it can't be triggered again until the next fire. Safety reasons.
				if (CountInv("RocketFired"))
				{
					A_SetInventory("RocketFired",2);
				}
				A_DetonateRockets();
				return ResolveState(null);
			}
			else if (CountInv("LockOnActive"))
			{
				if (!A_JumpIfNoAmmo("Null"))	//if it has enough to at least fire one rocket, then it proceeds
				{
					return ResolveState("LockOn");
				}
				else
				{
					D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
				}
			}
			D4Msg.PrintStatus(D4Msg.NoMods);
			return ResolveState(null);
		}
		Goto Ready;
	LockOn:
		RLLI A 0 
		{
			if (!CountInv("RLTargetToken"))
			{
				ClearTargets();
				A_GiveInventory("RLTargetToken",1);
			}
			return ResolveState("LockOnHold");
		}
	LockOnHold:
		RLLI A 1 
		{
			if (CountInv("RLLockToken") >= LockTokenMax)
			{
				if (CountInv("TripleShot") != 1)
				{
					let Targ = invoker.Target;
					
					if (!Targ || Targ.Health < 1 || Targ.bFRIENDLY)
					{
						A_SetInventory("RLLockToken",0);
						ClearReticle();
						ClearTargets();
					}
					else
					{
						SetReticle(Targ);
						A_SetInventory("TripleShot",1);
						A_StartSound("Doom4/Weapon/RocketLauncher/TargetLocked",9);
					}
				}
				A_WeaponReady(WRF_NOSECONDARY);
			}
			else
			{	
				// Grab the target and tracer from the WEAPON, not the owner.
				// The weapon pointers are never used, it appears, so it should
				// be relatively safe to do so.
				
				// For reference, invoker is the weapon. invoker.owner is the player.
				Actor Targ = invoker.Target;
				Actor Trac = invoker.Tracer;
				
				if (!Targ)
				{
					// First, check to see if we have a direct target to aim at.
					FTranslatedLineTarget hit;
					LineAttack(invoker.owner.angle, 1536, invoker.owner.pitch, 
						0, 'None', "PacifistPuffNoThru", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT, hit);
					Targ = hit.linetarget;
				}
				Targ = LockOn(Targ);
				
				// If switching targets...
				if (Trac != Targ)
				{
					// Make sure we have a target.
					if (Targ)	
					{
						A_SetInventory("RLLockToken", LockTokenTick);
						A_PlaySound("Doom4/Weapon/RocketLauncher/StartLockOn",6);
					}
					else
						A_SetInventory("RLLockToken",0);
					
				}
				else if (Targ)	// Same target.
				{
					A_GiveInventory("RLLockToken", LockTokenTick);
				}
				
				Trac = Targ;
				
				// Adjustments complete.
				invoker.Tracer = Trac;
				invoker.Target = Targ;
			}
			
		}
		#### A 0 A_Refire("LockOnHold"); //Leave this out from brackets unless it's last.
		#### A 0
		{
			ClearReticle();
			A_SetInventory("RLLockToken",0);
			A_SetInventory("RLTargetToken",0);
			A_SetInventory("RocketFired",0);
			A_SetInventory("TripleShot",0);
			ClearTargets();
		}
		Goto Ready; // failsafe
	
	//-----------------------------------------------------
	// 	where it actually fires the 3 rockets. Cooke, you really gotta
	//  start putting comments
	//	[MC] Yeah I know. Bad habit. 
	//	[XA] i'm helping too
	TripleFire:
		RLLF B 1 bright
		{
			ClearReticle();
			A_GunFlash("Null");
			A_SetInventory("RLLockToken",0);
			A_SetInventory("RLTargetToken",0);
			A_FireSeekerRocket("D4RocketSeeker",0,1,7);
			A_Overlay(P2,"TriplePitchHandler");
			A_PlaySound("Doom4/Weapon/RocketLauncher/Fire",5,1);
			A_WeaponOffset(2,0,WOF_ADD); //for recoil effect
		}
		#### CDE 1 bright A_WeaponOffset(1,1,WOF_ADD);
		RLLI A 2 A_SetTics(IsDoubleSpeed() ? 0 : 1);
		RLLF B 1 bright  
		{
			if (A_JumpIfNoAmmo("Null"))
			{
				A_SetInventory("RLLockToken",0);
				A_SetInventory("RLTargetToken",0);
				return ResolveState("FireContFlash");
			}
			A_GunFlash("Null");
			A_FireSeekerRocket("D4RocketSeeker",0,1,7);
			A_WeaponOffset(2,0,WOF_ADD);	//for recoil effect
			A_Overlay(P3,"TriplePitchHandler");
			A_PlaySound("Doom4/Weapon/RocketLauncher/Fire",6,1);
			return ResolveState(null);
		}
		#### CDE 1 bright  A_WeaponOffset(1,1,WOF_ADD);
		RLLI A 2 A_SetTics(IsDoubleSpeed() ? 0 : 1);
		RLLF B 1 bright 
		{
			if (A_JumpIfNoAmmo("Null"))
			{
				return ResolveState("FireContFlash");
			}
			A_GunFlash("Null");
			A_FireSeekerRocket("D4RocketSeeker",0,1,7);
			A_PlaySound("Doom4/Weapon/RocketLauncher/Fire",7,1);
			A_Overlay(P4,"TriplePitchHandler");
			A_WeaponOffset(2,0,WOF_ADD);	//for recoil effect
			return ResolveState(null);
		}
	FireContFlash:
		#### B 1 bright 
		{
			A_GunFlash("Null");
			A_SetInventory("RLLockToken",0);
			A_SetInventory("RLTargetToken",0);
		}
		Goto Res2Check;
	//==========================================================================
	//==========================================================================
	// Misc Overlay sections
	NormalPitchHandler:
		M666 A 2 A_SetPitch(pitch-4.8,SPF_INTERPOLATE);
		M666 AAAAAA 1 A_SetPitch(pitch+0.8);
		Stop;
	TriplePitchHandler:
		M666 A 2 A_SetPitch(pitch-1.5,SPF_INTERPOLATE);
		M666 AAA 1 A_SetPitch(pitch+0.5);
		Stop;
		
	
		
	//-------------------------------------------------------
	// Alt fire switcheroo
	//-------------------------------------------------------
	
	Reload:
		---- A 5 
		{
			if (CountInv("RocketLauncherMod1")) //if has Detonate
			{
				if (CountInv("LockOnActive")) //but LockOn was active
					return ResolveState("FromLockOnToDetonate");
				else if (!CountInv("DetonateActive"))
					return ResolveState("FromNormalToDetonate"); //but if it didnt have LockOn active, then it was in "normal"
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			if (CountInv("RocketLauncherMod2")) //if it has LockOn
			{
				if (CountInv("DetonateActive")) //but Detonate was active
					return ResolveState("FromDetonateToLockOn");
				else if (!CountInv("LockOnActive"))	//if nothing was active,
					return ResolveState("FromNormalToLockOn"); //then it was in "normal" RL
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			else	D4Msg.PrintStatus(D4Msg.NoMods);
			return ResolveState(null);
		}
		Goto Ready;


		FromNormalToLockOn:
			//RLNI A 0 A_PrintBold("From normal to LockOn")
			//hide normal fire
			RLNI AAAA 1 A_WeaponOffset(1,20,WOF_ADD); //+0 +80
			//pull of and arm LockOn mod
			RLLS B 0 A_PlaySound("Doom4/Weapon/RocketLauncher/SwitchToLock",5,1);
			RLLS KKKKK 1 A_WeaponOffset(0,-15,WOF_ADD);
			RLLS KJIHGFEDCB 1; //A_WeaponOffset(0,-8,WOF_ADD); // 0 -80
			RLLS B 0 A_GiveInventory("LockOnActive",1);
			RLLS AAAA 1 A_WeaponOffset(-1,-1,WOF_ADD);
			RLLS A 1 A_WeaponOffset(0,-1,WOF_ADD);
			Goto Ready;
			
		FromNormalToDetonate:
			//RLNI A 0 A_PrintBold("From normal to Detonate")
			//hide normal fire
			RLNI AAAA 1 A_WeaponOffset(1,20,WOF_ADD); //+0 +80
			//pull up Detonate	
			RLDS j 0 A_PlaySound("Doom4/Weapon/RocketLauncher/SwitchToDetonate",5,1);		
			RLDS PPPPP 1 A_WeaponOffset(0,-15,WOF_ADD);
			RLDS ONMLKJ 1;
			RLDS IHGFEE 1;
			RLDS E 0 A_GiveInventory("DetonateActive",1);
			RLDS EDCB 1 A_WeaponOffset(-1,-1,WOF_ADD);
			RLDS A 1 A_WeaponOffset(0,-1,WOF_ADD);
			Goto Ready;
			
		FromDetonateToLockOn:
			//RLDI A 0 A_PrintBold("From Detonate to LockOn")
			//hide Detonate
			RLDI AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			//pull of and arm LockOn mod
			RLLS B 0 A_PlaySound("Doom4/Weapon/RocketLauncher/SwitchToLock",5,1);
			RLLS KKKKK 1 A_WeaponOffset(0,-15,WOF_ADD);
			RLLS KJIHGFEDCB 1; //A_WeaponOffset(0,-8,WOF_ADD); // 0 -80
			RLLS B 0 A_TakeInventory("DetonateActive",1);
			RLLS B 0 A_GiveInventory("LockOnActive",1);
			RLLS AAAA 1 A_WeaponOffset(-1,-1,WOF_ADD);
			RLLS A 1 A_WeaponOffset(0,-1,WOF_ADD);
			Goto Ready;
			
		FromLockOnToDetonate:
			//RLLI A 0 A_PrintBold("From LockOn to Detonate")
			//hide LockOn
			RLLI AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			//pull up Detonate			
			RLDS j 0 A_PlaySound("Doom4/Weapon/RocketLauncher/SwitchToDetonate",5,1);
			RLDS PPPPP 1 A_WeaponOffset(0,-15,WOF_ADD);
			RLDS ONMLKJ 1;
			RLDS IHGFEE 1;
			RLDS E 0 A_TakeInventory("LockOnActive",1);
			RLDS E 0 A_GiveInventory("DetonateActive",1);
			RLDS EDCB 1 A_WeaponOffset(-1,-1,WOF_ADD);
			RLDS A 1 A_WeaponOffset(0,-1,WOF_ADD);
			Goto Ready;	
	}
}

Class RocketFired : Inventory { Default { Inventory.InterHubAmount 0; } }
Class TripleShot : Inventory {	Default { Inventory.MaxAmount 2;	Inventory.InterHubAmount 0; } }

Class RocketLauncherModSecondary : Inventory	//the token to switch between mods
{}

Class DetonateActive : Inventory	 //mod1
{
	Default 
	{
		+INVENTORY.UNDROPPABLE
	}
}
Class LockOnActive : Inventory		//mod2
{
	Default 
	{
		+INVENTORY.UNDROPPABLE
	}
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//	Detonate related
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Only allow one detonation.
Class DetonateToken : Inventory	{}
Class RocketLauncherUpgrade4 : Inventory {	Default { Inventory.InterhubAmount 1; } }

//DO NOT TOUCH THIS UNLESS YOU KNOW WHAT YOU ARE DOING.
Class RLDetonatorSecondary : CustomInventory
{
	
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (GetClass() != "D4Rocket" || CountInv("DetonateToken"))
			{
				return false;
			}
			
			
			
			return true;
		}
		Stop;
	}
}
Class D4ExploderDummy : Actor 
{
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 60 NODELAY
		{
			A_QuakeEx(2,2,2,15,0,360,"",QF_SCALEDOWN,0,0,0,1);
		}
		Stop;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Lock on related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class RLTargetToken : Inventory 
{
	Default 
	{
		Inventory.MaxAmount 2;
		Inventory.InterhubAmount 0;
	}
}
Class RLLockToken : Inventory 
{
	Default 
	{
		Inventory.MaxAmount 200	;	
		Inventory.InterhubAmount 0;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Primary fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class D4Rocket : D4AbstractMissilePlayer 
{
	Default
	{
		Projectile;
		+FORCERADIUSDMG
		+EXTREMEDEATH
		Speed 21;
		Radius 6;
		Height 6;
		Scale 0.6;
		Damage 30;
		DeathSound "Doom4/Weapon/RocketLauncher/HRExplo";
		Decal "D4ExploScorch";
	}
	
	void DetSecondary()
	{
		RocketDamage();
		
		A_QuakeEx(2,2,2,15,0,360,"",QF_SCALEDOWN,0,0,0,1);
		
		for (int i = 0; i < 7; i++)
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			
		A_SpawnItemEx("D4RocketExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		A_PlaySound("Doom4/Weapon/RocketLauncher/Detonate");
		A_GiveInventory("DetonateToken",1);
	}
	
	States
	{
	Spawn:
		MICR A 1 Light("RedMediumPoint3") Bright NoDelay 
		{
			master = target;
			StartRocketFX();
		}
	Moving:
		MICR A 1 Light("RedMediumPoint3") Bright SpawnRocketFX();
		Loop;
	Death:
		TNT1 A 10
		{
			bKILLED = bINVISIBLE = true;
			A_GiveInventory("DetonateToken",1);
			
			RocketDamage();
			/*
			A_Explode(130,180,0,0,60);	// High damage to enemies
			A_Explode(30,128);			// Low damage to player
			A_RadiusThrust(180,180,RTF_THRUSTZ|RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE,60);
			*/
			A_QuakeEx(2,2,2,15,0,360,"",QF_SCALEDOWN,0,0,0,1);
			if (GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("GenericExplosionParticleSpawner",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				
				for (int i = 0; i < 7; i++)
					A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			}
			A_SpawnItemEx("D4RocketExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);	//Center
		}
		Stop;
	}
}

Class D4RocketSeeker : D4Rocket 
{
	const Turn = 0.2;
	Default 
	{
		+SEEKERMISSILE
	}
	
	override void SpawnRocketFX()
	{
		SeekAng(20); // See ZD4D/Actor.txt for details.
		Super.SpawnRocketFX();
	}
}

Class D4RocketTrailSmoke : D4DFX 	//centered smoke
{
	Default 
	{
		D4DFX.AutoRoll -10.0, 10.0, false;
		+ROLLSPRITE
		+CLIENTSIDEONLY
		+NOINTERACTION
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
		RenderStyle "Translucent";
		Alpha 0.2;
		Scale 0.0;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		X037 AAAAAAAA 1 
		{
			A_SetScale(Scale.X+0.05);
			A_FadeIn(0.03);
		}
	Continue:
		X037 A 1 
		{
			A_SetScale(Scale.X+0.02);
			A_FadeOut(0.03);
		}
		Loop;
	}
}
// These are currently unused. Will be deleted later.
Class D4RocketTrailFire1 : D4DFX 
{
	Default 
	{
		D4DFX.AutoRoll -5.0, 5.0, false;
		D4DFX.RandomRoll true;
		+NOINTERACTION
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		RenderStyle "Add";
		Alpha 0.99;
		Scale 0.2;
		Translation "0:255=%[0,0,0]:[2.0,0.5,0.5]";
	}
	
	States
	{
	Spawn:
		PROJ DDDEEEFFFGGGHHHIII 1 Bright 
		{
			A_FadeOut(0.03);
			A_SetScale(Scale.X+0.035);
		}
		Stop;
	}
}

Class D4RocketTrailFire2 : D4RocketTrailFire1 //centered flare behind the rocket
{
	
	Default 
	{
		Alpha 0.7;
		Scale 0.2;
	}
	States
	{
	Spawn:
		TNT1 A 0 ;
		TNT1 A 0 A_Jump(256,"One","Two");
	One:
		X007 ABCDE 1 Bright ;
		X007 FGHIJ 1 Bright A_FadeOut();
		Stop;
	Two:
		X007 KLMNO 1 Bright ;
		X007 PQRST 1 Bright A_FadeOut();
		Stop;		
	}
}

Class D4RocketTrailFire : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+BRIGHT
		RenderStyle "Add";
		Alpha 0.99;
		Scale 0.2;
		Translation "0:255=%[0,0,0]:[2.0,0.5,0.5]";
	}
	
	override void PostBeginPlay()
	{
		if (!Target)	{ Destroy(); return; }
		Super.PostBeginPlay();
		bXFLIP = (random(0,1));
	}
	
	States
	{
	Spawn:
		X025 Y 0 NoDelay A_Jump(256,random(1,23));
	Frames:
		X025 YXWVUTSRQPONMKLJIHGFEDCB 1
		{
			if (!Target || Target.bINVISIBLE)	{ Destroy(); return; }
			
			// Interpolates directly behind the rocket flawlessly.
			// TO DO: Modify the rocket sprite offsets so the tail is on the
			// center instead.
			SetOrigin(Target.Vec3Angle(5, Target.Angle + 180), true);
			
			/*
			Prev = Target.Vec3Angle(
				5 + Target.Vel.Length(), 
				Target.Angle + 180, 
				Target.Prev.Z - Target.Pos.Z);
			*/
		}
		Loop;
	}
}