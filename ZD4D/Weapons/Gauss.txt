//===================================================================================================
//===================================================================================================
//
//		Gauss Cannon
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code enhancement: Major Cooke
//
//===================================================================================================
//===================================================================================================
// As per Doom4, when maxed out:
// - Main firemode, DOES NOT pierce monsters. It has a TINY explosion only good to kill the smallest
//   monsters, nothing else. It can barely kill "the possessed".
// - Precision shot, DOES NOT pierce monsters. It creates a big explosion ONLY when it hits a Monster;
//   but not when hitting a wall/plane
// - Siege mode, basically explodes everywhere around the beam and the puff. DOES pierce monsters.
//===================================================================================================

Class D4GaussCannon : Doom4Weapon
{
	const GaussLength = 2048;
	Default 
	{
		+WEAPON.NOALERT
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.SlotNumber 1;
		Inventory.PickupMessage "Gauss Cannon! Shoop in a nutshell!";
		Obituary "%o was epic laser'd by %k's epic Cell face.";
		Weapon.AmmoType1 "D4Cells";
		Weapon.AmmoGive1 60;
		Weapon.AmmoUse1 20;
		Weapon.SelectionOrder 70;
		Weapon.SlotNumber 7;
		Weapon.SlotPriority 1.0;
		Tag "Gauss Cannon";
		Scale 0.7;
		Decal "D4GaussPrimary";
		+DONTGIB
	}
	States
	{
	Spawn:
		WPPK J -1;
		Stop;
		
	Deselect:
		---- A 0 
		{
			A_Overlay(SpeedWatcher,"Null");
			A_StopSound(6);
			A_ZoomFactor(1);
			A_SetSpeed(1);
		}
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	Select:
		GCNI A 0 
		{
			A_SetInventory("AltFireToken",0);
			if (CountInv("PrecisionActive"))	{ return ResolveState("PrecisionSpriteSel"); }
			if (CountInv("SiegeActive"))		{ return ResolveState("SiegeSpriteSel");	}
			return ResolveState("SelLoop");
		}
		PrecisionSpriteSel:
			GCPI A 0 { return ResolveState("SelLoop");	}
		SiegeSpriteSel:
			GCSI A 0 { return ResolveState("SelLoop");	}
	SelLoop:
		---- A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	
	Ready:
		GCNI A 0 
		{
			A_SetInventory("AltFireToken",0);
			if (CountInv("PrecisionActive"))	{ return ResolveState("PrecisionSpriteReady"); }
			if (CountInv("SiegeActive"))		{ return ResolveState("SiegeSpriteReady");	}
			return ResolveState("ResumeReadySequence");
		}
		PrecisionSpriteReady:
			GCPI A 0 { return ResolveState("ResumeReadySequence");	}
		SiegeSpriteReady:
			GCSI A 0 { return ResolveState("ResumeReadySequence");	}
		
	ResumeReadySequence:
		"####" "#" 0
		{
			// No leftovers.
			A_SetInventory("PrecisionShotChargesCounter",0);
			A_SetInventory("SiegeModeChargesCounter",0);
			A_SetInventory("AltFireToken",0);
			A_SetAlwaysSwitchable(false);
			
			// Don't even bother allowing secondary. There's no point doing the
			// checks further down there, just do it here instead.
			if (!CountInv("GaussCannonMod1") && !CountInv("GaussCannonMod2"))
			{	return ResolveState("ReadyNoAlt");	}
			
			A_StopSound(6);
			return ResolveState(null);
		}
	ReadyNormal:
		---- A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Wait;
	ReadyNoAlt:
		---- A 1 A_WeaponReady(WRF_NOSECONDARY|WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Goto Ready;
		
	//-------------------------------------------------------
	// Regular fire
	//-------------------------------------------------------
	Fire:
			GCNF A 0
			{
				if (CountInv("PrecisionActive"))	{ return ResolveState("PrecisionSpriteFire"); }
				if (CountInv("SiegeActive"))		{ return ResolveState("SiegeSpriteFire");	}
				return ResolveState("ResumeFireSequence");
			}			
			PrecisionSpriteFire:
				GCPF A 0 ;
				Goto ResumeFireSequence;
			SiegeSpriteFire:
				GCSF A 0 ;
				Goto ResumeFireSequence;
	ResumeFireSequence:
		"####" "#" 1 bright
		{
			if (CountInv("PrecisionActive") && CountInv("AltFireToken"))
			{	return ResolveState("PrecisionRelease");	}
			if (CountInv("SiegeActive") && CountInv("AltFireToken"))
			{	return ResolveState("SiegeRelease");	}
			
			A_SetAlwaysSwitchable(true);
			A_WeaponOffset(15,10,WOF_ADD);
			
			if (vel.z != 0.0 && pitch > 0.0)
			{	
				if (vel.z > 0)
				{	A_ChangeVelocity(-cos(-pitch)*14,0,sin(pitch)*14,CVF_RELATIVE);	}
				else
				{	A_ChangeVelocity(-cos(-pitch)*14,0,sin(pitch)*14,CVF_RELATIVE|CVF_REPLACE);	}
			}
			
			A_AlertMonsters();
			A_GunFlash("Null");
			A_FireBullets(0,0,1,0,"PacifistPuffNoThru",FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,GaussLength,"GaussTrailSpawner",0,5);
			A_RailAttack(400+random(1,150),5,1,"","",RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,0,"GaussShockwave");

			A_ZoomFactor(0.99,ZOOM_NOSCALETURNING);
			A_SetPitch(pitch-5.0);
			A_PlaySound("Doom4/Weapon/GaussGun/Fire",CHAN_WEAPON,1);
			return ResolveState(null);
		}
		"####" B 2 Bright { A_WeaponOffset(12,8,WOF_ADD); A_ZoomFactor(1,ZOOM_NOSCALETURNING); }
		"####" CD 2 Bright;
		"####" EEEFF 1 { A_WeaponOffset(-3,-2,WOF_ADD); A_SetPitch(pitch+1.0); }
		"####" FGGG 1 { A_WeaponOffset(-3,-2,WOF_ADD); }
		"####" HI 4;
		"####" J 30 { A_SetTics(IsDoubleSpeed() ? 11 : 30); } //9 above. Take off 4 here instead, much easier and less code bloat.
		"####" K 1;
		"####" L 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
		"####" M 1;
		"####" N 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
		"####" O 1 A_SetAlwaysSwitchable(false);
		Goto Ready;


	//-------------------------------------------------------
	// Alt fires
	//-------------------------------------------------------
	AltFire:
		"####" "#" 0 
		{
			if (CountInv("PrecisionActive"))
			{
				return ResolveState("FireMod1");
			}
			else if (CountInv("SiegeActive"))
			{
				return ResolveState("FireMod2");
			}
			return ResolveState(null);
		}
		"####" "#" 4;
		Goto Ready;
		
			
		//-------------------------------------------------------
		// Precision shot
		FireMod1:
			"####" "#" 5
			{
				if (!CountInv("AltFireToken"))	
				{	A_GiveInventory("AltFireToken",1);	}
				
				if (A_JumpIfNoAmmo("Null")) //Use a proper check for things like Infinite Ammo. 
				{	return ResolveState(null);	}
				return ResolveState("PrecisionShot");
			}
			//waits a bit before going to ready again, to avoid endless loops
			Goto Ready; 
			
			PrecisionShot:
				"####" "#" 0
				{
					A_ZoomFactor(2.5);
					A_PlaySound("Doom4/Weapon/GaussGun/Charge2Start",5);
				}
				PrecisionShotLoop:
					R016 N 0	// Avoid using TNT1 in weapons, sv_fastweapons looks terrible with it.
					{
						if (CountInv("PrecisionShotChargesCounter") == 20)
						{	A_PlaySound("Doom4/Weapon/GaussGun/Charge2Loop",6,1.0,1);	}
						if (CountInv("PrecisionShotChargesCounter") < 60)
						{	A_GiveInventory("PrecisionShotChargesCounter",1 + IsDoubleSpeed());	}
						
					}
					R016 N 1 A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB);
					R016 N 0 A_Refire("PrecisionShotLoop");
					Goto UnZoom;
					
				PrecisionRelease:
					R016 A 0 
					{
						A_GunFlash("Null");
						A_AlertMonsters();
						A_SetInventory("AltFireToken",0);
						A_FireBullets(0,0,1,0,"PacifistPuffNoThru",FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,GaussLength,"GaussTrailSpawner",0);
						A_RailAttack(CountInv("PrecisionShotChargesCounter")*random(10,16),0,1,"","",RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,0,"GaussShockwavePrecision");
						A_SetInventory("PrecisionShotChargesCounter",0);
						A_PlaySound("Doom4/Weapon/GaussGun/Charge2Fire",6);
						A_StopSound(5);
						A_SetPitch(pitch-2.5);
					}
					R016 N 5 Bright;
					R016 NNNNN 1 Bright A_SetPitch(pitch+0.5);
					R016 N 10 Bright;
					"####" "#" 0 A_WeaponReady(WRF_NOPRIMARY);
					Goto EndRelease; //almost the same as "unzoom" but has a delay before you can shoot again and doesnt play the "down" sound
					
				EndRelease:	//when player fired the shot
					GCPI A 3
					{
						A_StopSound(6);
						A_SetInventory("AltFireToken",0);
						A_SetInventory("PrecisionShotChargesCounter",0);
						A_SetInventory("SiegeModeChargesCounter",0);
						A_ZoomFactor(1);
					}
					GCPI A 1 ;
					Goto Ready;
				UnZoom:	//when player cancels the shot
					GCPI A 3
					{
						A_PlaySound("Doom4/Weapon/GaussGun/PrecisionDown",5);
						A_StopSound(6);
						A_SetInventory("AltFireToken",0);
						A_SetInventory("PrecisionShotChargesCounter",0);
						A_SetInventory("SiegeModeChargesCounter",0);
						A_ZoomFactor(1);
					}
					GCPI A 5;
					Goto Ready;

					
					
		//-------------------------------------------------------
		// Siege mode
		FireMod2:
			"####" "#" 0
			{
				if (A_CheckInfiniteAmmo() || CountInv("D4Cells") >= 50)		//do you have the ammo required?
				{
					return ResolveState("SiegeMode");
				}
				
				if (GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ALTATTACK)// prevent sound spam
				{	return ResolveState(null);	}
				D4Msg.PrintStatus(D4Msg.NotEnoughAmmo);
				A_PlaySound("Doom4/Player/Nope");
				return ResolveState(null);
			}
			"####" "#" 5 ;//waits a bit before going to ready again, to avoid endless loops
			Goto Ready; 
			
		Overlay.SpeedWatcher:
			M666 A 1
			{
				if (!CountInv("AltFireToken"))
				{	
					A_SetSpeed(1);	
					return ResolveState("Null");
				}
				return ResolveState(null);
			}
			Loop;
			
			
			SiegeMode:
				"####" "#" 0 
				{
					if (!CountInv("AltFireToken"))	{	A_GiveInventory("AltFireToken",1);	}
					A_PlaySound("Doom4/Weapon/GaussGun/Charge1Start",5);
					A_ZoomFactor(1.1);
					A_SetSpeed(0.2);
					A_Overlay(SpeedWatcher,"Overlay.SpeedWatcher");
				}
			SiegeModePrepare1:
				GCSI A 2;
				GCSI A 2;
				GCSI A 0 A_Refire("SiegeModePrepare2");
				Goto SiegeUnzoom1;
			SiegeModePrepare2:
				GCSC AB 2;
				GCSC CD 2;
				GCSC D 2;
				GCSI A 0 A_Refire("SiegeModePrepare3");
				Goto SiegeUnzoom2;
			SiegeModePrepare3:
				GCSC EF 2;
				GCSC GH 2;
				GCSC I 10;
				GCSI A 0 A_Refire("SiegeModePrepare4");
				Goto SiegeUnzoom3;
			SiegeModePrepare4:
				GCSC JK 2 ;
				GCSI A 0 A_Refire("SiegeModePrepare5");
				Goto SiegeUnzoom3;
			SiegeModePrepare5:
				GCSC LM 2 ;
				GCSI A 0 A_Refire("SiegeModeLoop");
				Goto SiegeUnzoom3;
				
				SiegeModeLoop:
					GCSL AABBCCDD 1 Bright
					{
						A_PlaySound("Doom4/Weapon/GaussGun/Charge1Loop",6,1.0,1);
						A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB);
					}
					GCSL A 0 A_Refire("SiegeModeLoop");
					Goto SiegeUnzoom3;
					
			SiegeModeRelease:
			SiegeRelease:
				// Because apparently the pitch kick causes tiny changes if executed,
				// in the same code, we don't want that to happen. This guarantees
				// it won't.
				GCSM A 0
				{
					// spawns the electric main beam, each electric crap deals explosion damage
					// pierces all enemies
					A_FireBullets(0,0,1,0,"PacifistPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,GaussLength,"GaussTrailBigSpawner",0,5);
					A_RailAttack(700,5,0,"Green","Green",RGF_SILENT|RGF_FULLBRIGHT,0,"GaussShockwaveBig",0,0,0,0,2.7,1.0,"GaussSiegeTrail");
				}
				GCSM A 1 Bright
				{
					A_WeaponOffset(15,10,WOF_ADD);
					A_GunFlash("Null");
					A_AlertMonsters();					
										
					//spawns the spiral around it
					if(GetCvar("HQEffectsWeapons"))
					{
						A_FireProjectile("GaussSiegeFXSpawner",0,0);	//fancy spiral
					}
					else
					{
						A_RailAttack(0,5,0,"Cyan","",RGF_SILENT|RGF_FULLBRIGHT,0,null,0,0,0,0,1); //regular rail spiral
					}
					
					A_TakeInventory("D4Cells",50,TIF_NOTAKEINFINITE);
					A_ZoomFactor(1);
					A_PlaySound("Doom4/Weapon/GaussGun/Charge1Fire",6);
					A_SetInventory("SiegeModeChargesCounter",0);
					if (vel.z != 0.0 && pitch > 0.0)
					{	
						if (vel.z > 0)
						{	A_ChangeVelocity(-cos(-pitch)*32,0,sin(pitch)*32,CVF_RELATIVE);	}
						else
						{	A_ChangeVelocity(-cos(-pitch)*32,0,sin(pitch)*32,CVF_RELATIVE|CVF_REPLACE);	}
					}
					A_SetPitch(pitch-8.0);
					A_SetInventory("AltFireToken",0);
				}
				GCSM B 2 Bright { A_WeaponOffset(12,8,WOF_ADD); A_ZoomFactor(1,ZOOM_NOSCALETURNING); }
				GCSM CD 2 Bright;
				GCSC IHG 1 { A_WeaponOffset(-3,-2,WOF_ADD); A_SetPitch(pitch+1.0); }
				GCSC FEDDD 1 { A_WeaponOffset(-3,-2,WOF_ADD); A_SetPitch(pitch+1.0); }
				GCSC D 20 { A_SetTics(IsDoubleSpeed() ? 6 : 20); }
				GCSC CBA 1;
				GCSI A 1;
				Goto Ready;
				
				SiegeUnzoom1:
					GCPI A 0
					{
						A_StopSound(6);
						A_SetInventory("PrecisionShotChargesCounter",0);
						A_SetInventory("SiegeModeChargesCounter",0);
						A_ZoomFactor(1);
						A_PlaySound("Doom4/Weapon/GaussGun/SiegeDownSimpler",5,1.0);
						A_SetSpeed(1);
					}
					GCSI A 2;
					Goto Ready;
				SiegeUnzoom2:
					GCPI A 0
					{
						A_StopSound(6);
						A_SetInventory("AltFireToken",0);
						A_SetInventory("PrecisionShotChargesCounter",0);
						A_SetInventory("SiegeModeChargesCounter",0);
						A_ZoomFactor(1);
						A_PlaySound("Doom4/Weapon/GaussGun/SiegeDownSimpler",5,1.0);
						A_SetSpeed(1);
					}
					GCSC D 1;
					GCSC C 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
					GCSC B 1;
					GCSI A 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
					GCSI A 1;
					Goto Ready;
				SiegeUnzoom3:
					GCPI A 0
					{
						A_StopSound(6);
						A_TakeInventory("AltFireToken",32767,0);
						A_TakeInventory("PrecisionShotChargesCounter",32767,0);
						A_TakeInventory("SiegeModeChargesCounter",32767,0);
						A_ZoomFactor(1);
						A_PlaySound("Doom4/Weapon/GaussGun/SiegeDownSimpler",5,1.0);
						A_SetSpeed(1);
					}
					GCSC E 1;
					GCSC E 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
					GCSC D 1;
					GCSC C 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
					GCSC B 1;
					GCSI A 1 { A_SetTics(IsDoubleSpeed() ? 0 : 1); }
					GCSI A 1;
					Goto Ready;
				
	//-------------------------------------------------------
	// Alt fire switcheroo
	//-------------------------------------------------------
	Reload:
		"####" "#" 0 
		{
			if (CountInv("GaussCannonMod1")) //if has Precision
			{
				if (CountInv("SiegeActive")) //but Siege was active
					return ResolveState("FromSiegeToPrecision");
				else if (!CountInv("PrecisionActive"))
					return ResolveState("FromNormalToPrecision"); //but if it didnt have Siege active, then it was in "normal"
				
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			if (CountInv("GaussCannonMod2")) //if it has Siege
			{
				if (CountInv("PrecisionActive")) //but Precision was active
					return ResolveState("FromPrecisionToSiege");
				else if (!CountInv("SiegeActive"))	//if nothing was active,
					return ResolveState("FromNormalToSiege"); //then it was in "normal" SG
					
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			else	D4Msg.PrintStatus(D4Msg.NoMods);
			
			return ResolveState(null);
		}
		"####" "#" 5;
		Goto Ready;


		FromNormalToSiege:
			//GCNI A 0 A_PrintBold("From normal to Siege")
			//hide normal fire
			GCNI AAAA 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			GCNI A 5;
			//pull of and arm Siege mod
			GCSI AAAAAAA 1 A_WeaponOffset(0,-5,WOF_ADD); // 0 -40
			GCSI A 1 
			{
				A_PlaySound("Doom4/Weapon/GaussGun/SwitchToSiege",5,1);
				A_GiveInventory("SiegeActive",1);
				A_WeaponOffset(0,-5,WOF_ADD);
			}
			GCSI AAA 1;
			GCSI AAA 1 A_WeaponOffset(5,5,WOF_ADD);
			GCSI A 3;
			GCSI AAA 1 A_WeaponOffset(-5,-5,WOF_ADD);
			GCSI AAAA 1 A_WeaponOffset(0,-10,WOF_ADD);
			"####" "#" 10;
			Goto Ready;
			
		FromNormalToPrecision:
			//"####" "#" 0 A_PrintBold("From normal to Precision")
			//hide normal fire
			GCNI AAAA 1 A_WeaponOffset(0,20,WOF_ADD);
			GCNI A 5;
			//pull up Precision
			GCPI AAAAAAA 1 A_WeaponOffset(0,-5,WOF_ADD);
			"####" "#" 1 
			{
				A_WeaponOffset(0,-5,WOF_ADD);
				A_PlaySound("Doom4/Weapon/GaussGun/SwitchToPrecision",5,1);
				A_GiveInventory("PrecisionActive",1);
			}
			GCPI AAA 1;
			GCPI AAA 1 A_WeaponOffset(5,5,WOF_ADD);
			GCPI A 3;
			GCPI AAA 1 A_WeaponOffset(-5,-5,WOF_ADD);
			GCPI AAAA 1 A_WeaponOffset(0,-10,WOF_ADD);
			"####" "#" 10;
			Goto Ready;
			
		FromPrecisionToSiege:
			//"####" "#" 0 A_PrintBold("From Precision to Siege")
			//hide Precision
			"####" "####" 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			"####" "#" 5;
			//pull of and arm Siege mod
			GCSI AAAAAAA 1 A_WeaponOffset(0,-5,WOF_ADD); // 0 -40
			GCSI A 1 
			{
				A_PlaySound("Doom4/Weapon/GaussGun/SwitchToSiege",5,1);
				A_TakeInventory("PrecisionActive",32767);
				A_GiveInventory("SiegeActive",1);
			}
			GCSI AAA 1;
			GCSI AAA 1 A_WeaponOffset(5,5,WOF_ADD);
			GCSI A 3;
			GCSI AAA 1 A_WeaponOffset(-5,-5,WOF_ADD);
			GCSI AAAA 1 A_WeaponOffset(0,-10,WOF_ADD);
			"####" "#" 10;
			Goto Ready;
			
		FromSiegeToPrecision:
			//"####" "#" 0 A_PrintBold("From Siege to Precision")
			//hide Siege
			"####" "####" 1 A_WeaponOffset(0,20,WOF_ADD); //+0 +80
			"####" "#" 5;
			//pull Precision
			GCPI AAAAAAA 1 A_WeaponOffset(0,-5,WOF_ADD); // 0 -40
			"####" "#" 1 
			{
				A_PlaySound("Doom4/Weapon/GaussGun/SwitchToPrecision",5,1);
				A_TakeInventory("SiegeActive",32767);
				A_GiveInventory("PrecisionActive",1);
				A_WeaponOffset(0,-5,WOF_ADD);
			}
			GCPI AAA 1;
			GCPI AAA 1 A_WeaponOffset(5,5,WOF_ADD);
			GCPI A 3;
			GCPI AAA 1 A_WeaponOffset(-5,-5,WOF_ADD);
			GCPI AAAA 1 A_WeaponOffset(0,-10,WOF_ADD);
			"####" "#" 10;
			Goto Ready;

	}
}


//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Precision shot related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class PrecisionShotChargesCounter : Inventory
{
	Default 
	{
		Inventory.MaxAmount 60;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Siege mode related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class SiegeModeChargesCounter : Inventory
{
	Default 
	{
		Inventory.MaxAmount 60;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Mods tokens
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class PrecisionActive : Inventory	 //mod1
{Default { +INVENTORY.UNDROPPABLE}}
Class SiegeActive : Inventory		//mod2
{Default { +INVENTORY.UNDROPPABLE}}



//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Primary fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

Class GCImpactDebris : Actor 
{
	Default 
	{
		Projectile;
		Speed 10;
		-NOGRAVITY
		+THRUACTORS
		+DOOMBOUNCE
		+FORCEXYBILLBOARD
		Radius 2;
		Height 5;
		Gravity 0.2;
		BounceFactor 0.5;
		WallBounceFactor 1.0;
		RenderStyle "Add";
		Scale 0.05;
		Alpha 0.6;
		Translation "0:255=%[0,0,0]:[0.8,1.5,2.0]";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(200,8,16,24,32,40);
		FX54 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 Bright A_SpawnItemEx("GCDebrisTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	}
}
Class GCDebrisTrail : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.02;
		RenderStyle "Add";
		Alpha 0.5;
		Translation "0:255=%[0,0,0]:[0.8,1.5,2.0]";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,random(1,15));
		X101 ABCDEFGHIJKLMNOPQRSTUV 0 A_JumpIf(1 == 1,"Play");
	Play:
		"####" "###" 1 Bright A_FadeOUt(0.03);
		"####" "#" 0 A_SetScale(Scale.X+0.01);
		Loop;
	}
}


Class GaussShockwave : Actor 	//the actual puff, but not the ring
{
	Default 
	{
		+NOBLOCKMAP
		+THRUACTORS
		+ALWAYSPUFF
		+PUFFONACTORS
		+FORCEXYBILLBOARD
		+PUFFGETSOWNER
		+INVISIBLE
		+FORCERADIUSDMG
		Scale 0.15;
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
		Alpha 0.99;
		//Decal "D4GaussDecal"
	}
	States
	{
	Spawn:
		X060 A 35 NoDelay
		{
			//A_Warp(AAPTR_DEFAULT, 5, 0, 0,0,WARPF_NOCHECKPOSITION);
			A_SpawnItemEx("GaussImpactLightEmitter", flags: SXF_NOCHECKPOSITION);
			A_SpawnItemEx("GaussShockwaveRing", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSPRITEFRAME);
			A_Explode(64,128,0);
			if(GetCvar("D4D_quakexplosions")==1)
			{
				A_QuakeEx(2,2,2,10,0,768,"",QF_SCALEDOWN,0,0,0,1);
			}
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
			}
		}
		Stop;
	}
}

Class GaussShockwaveRing : Actor
{
	Default
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.15;
		Alpha 0.99;
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
	}
	States
	{
	Spawn:
		---- CCC 1 NoDelay Bright
		{
			A_SetScale(Scale.X+0.1);
		}
		---- C 1 Bright
		{
			A_SetScale(Scale.X+0.1);
			A_FadeOut(0.085);
		}
		Wait;
	}
}

Class GaussImpactLightEmitter : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 2 Light("BlueCyanBigPoint3");
		TNT1 A 2 Light("BlueCyanMediumPoint1");
		TNT1 A 2 Light("BlueCyanMediumPoint2");
		TNT1 A 2 Light("BlueCyanMediumPoint3");
		TNT1 A 2 Light("BlueCyanSmallPoint1");
		TNT1 A 2 Light("BlueCyanSmallPoint2");
		TNT1 A 2 Light("BlueCyanSmallPoint3");
		Stop;
	}
}

Class GCImpactVapor : Actor 
{
	Default 
	{
		+NOINTERACTION
		Scale 0.1;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
		Alpha 0.99;
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		//TNT1 A 0 NODELAY A_Jump(240,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40);
		X102 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVV 1 Bright
		{
			A_FadeOut(0.05);
			A_SetScale(Scale.X+0.025);
			if(random(1,2)==2)
			{
				A_ScaleVelocity(0.7);
			}
		}
		Goto Spawn;
	}
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Precision shot related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class GaussShockwavePrecision : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+ALWAYSPUFF
		+PUFFONACTORS
		+FORCEXYBILLBOARD
		+FORCERADIUSDMG
		+PUFFGETSOWNER
		+INVISIBLE
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
		Scale 0.15;
		Alpha 0.99;
	}
	States
	{
	Spawn: //Non bleeding actor
	Xdeath:	//bleeding actor, different sprites names depending what got hit
		X072 L 0 A_Explode(128,128,0);	//when hits a shootable object, creates explosion
		Goto EndShockWave;
		
	Crash:	//hit wall, no explosion, different shockwave sprite
		X060 C 0 A_Warp(AAPTR_DEFAULT, 5, 0, 0,0,WARPF_NOCHECKPOSITION); //different sprites names depending what got hit
		Goto EndShockWave;
	
	EndShockWave:
		---- A 35
		{
			A_SpawnItemEx("GaussShockwaveRing", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSPRITEFRAME);
			A_SpawnItemEx("GaussImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			if(GetCvar("D4D_quakexplosions")==1)
			{
				A_QuakeEx(2,2,2,13,0,768,"",QF_SCALEDOWN,0,0,0,1);
			}
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("21BCFF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnParticle("75D6FF",SPF_FULLBRIGHT|SPF_RELATIVE,random(40,80),random(6,8),random(0,359),0,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),-0.3,-0.3,-0.3);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
			}
		}
		Stop;
	}
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Siege related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class GaussSiegeTrail : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+EXTREMEDEATH
		+PUFFGETSOWNER
		+FORCERADIUSDMG
		DamageType "GaussSiege";
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
		Scale 0.2;
	}
	States
	{
	Spawn:
		HSPL A 0 NODELAY 
		{
			A_Explode(32,64,0,0,64);
			return A_Jump(256,1,2,3,4,5,6,7,8);
		}
		HSPL ABCDEFGH 0 A_Jump(256,"Play");
	Play:
		"####" "#" 4 BRIGHT ;
		"####" "#" 1 BRIGHT 
		{	
			A_FadeOut(0.075);
			A_SetScale(Scale.X-0.01);
		}
		Wait;
	}
}

Class GaussShockwaveBig : Actor //this is actually the puff of the siege mode
{
	Default 
	{
		RenderStyle "Add";
		Scale 0.3;
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
		Alpha 0.99;
		+NOINTERACTION
		+ALWAYSPUFF
		+PUFFONACTORS
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn: //Non bleeding actor
	Xdeath:	//bleeding actor
		X072 L 0 A_Warp(AAPTR_DEFAULT, 8, 0, 0,0,WARPF_NOCHECKPOSITION);
		---- A 0
		{
			if (GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactVapor",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVapor",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
			}
			A_SpawnItemEx("GaussImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		Goto EndHitShootable;
		
	EndHitShootable:		//it's smaller than when it hits a wall
		X072 LLLLLL 1 Bright
		{
			A_SetScale(Scale.X+0.035);
		}
		X072 LLLL 1 Bright
		{
			A_SetScale(Scale.X+0.01);
			A_FadeOut(0.06);
		}
		Wait;
		
	Crash:		//walls or ceiling
		TNT1 A 0 
		{
			A_Warp(AAPTR_DEFAULT, 8, 0, 0,0,WARPF_NOCHECKPOSITION);
			A_SpawnItemEx("GaussImpactLightEmitterSiege",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			if(GetCvar("D4D_quakexplosions")==1)
			{
				A_QuakeEx(2,2,2,15,0,768,"",QF_SCALEDOWN,0,0,0,1);
			}
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,80);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("GCImpactVaporBig",4,0,0,frandom(-3,3),frandom(-3,3),frandom(-3,3),0,SXF_NOCHECKPOSITION,128);
			}
		}
		X072 LLLLLL 1 Bright
		{
			A_SetScale(Scale.X+0.12);
		}
		X072 LLLL 1 Bright
		{
			A_SetScale(Scale.X+0.05);
			A_FadeOut(0.05);
		}
		Wait;
	}
}
Class GaussImpactLightEmitterSiege : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 3 Light("BlueCyanBigPoint1");
		TNT1 A 3 Light("BlueCyanBigPoint2");
		TNT1 A 3 Light("BlueCyanBigPoint3");
		TNT1 A 3 Light("BlueCyanMediumPoint1");
		TNT1 A 3 Light("BlueCyanMediumPoint2");
		TNT1 A 3 Light("BlueCyanMediumPoint3");
		TNT1 A 3 Light("BlueCyanSmallPoint1");
		TNT1 A 3 Light("BlueCyanSmallPoint2");
		TNT1 A 3 Light("BlueCyanSmallPoint3");
		Stop;
	}
}

Class GCImpactVaporBig : Actor 
{
	Default 
	{
		+NOINTERACTION
		Scale 0.3;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
		Alpha 0.99;
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(240,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40);
		X102 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVV 1 Bright
		{
			A_FadeOut(0.025);
			A_SetScale(Scale.X+0.03);
			if(random(1,3)==3)
			{
				A_ScaleVelocity(0.8);
			}
		}
		Goto Spawn+1;
	}
}




// Code taken straight out of AEons of Death's Shredder Staff secondary fire.

Class GaussSiegeFXSpawner : Actor 
{
	int s1, s2, s3, s0;
	int failsafe;
	int count;
	Default 
	{
		Projectile;
		+THRUACTORS
		+FORCERADIUSDMG
		+EXTREMEDEATH
		Alpha 1;
		Speed 8;
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			s0 = random(0,359);
			s1 = random(0,359);
			s2 = random(4,16);
			s3 = random(4,16);
		}
	Movement:
		TNT1 A 0
		{
			s0 = (s0 + s2) % 360;
			s1 = (s1 + s3) % 360;
			A_SpawnItemEx("GaussTrailSiege",(sin(-pitch)*10)*sin(s0+90),(sin(s0)*10),((cos(pitch)*10)*cos(s0)),0,0,0,0,SXF_NOCHECKPOSITION);
			A_Warp(AAPTR_DEFAULT,vel.x,vel.y,vel.z,0,WARPF_ABSOLUTEOFFSET,1);
			if (failsafe > 500)
			{	return ResolveState("Null"); }
			failsafe++;
			return ResolveState(null); //NULL IS NOT THE SAME AS "NULL". DO NOT EVER MIX THE TWO UP.
		}
		Loop;
	Death:
		TNT1 A 0;
		Stop;
	}
}


Class GaussTrailSiege : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.13;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.9,2.0,2.0]";
	}
	States
	{
	Spawn:
		HSPL A 0 NODELAY A_Jump(256,random(1,8));
		HSPL ABCDEFGH 0 A_Jump(256,"Play");
	Play:
		"####" "#" 4 BRIGHT;
		"####" "#" 1 BRIGHT 
		{	
			A_FadeOut(0.0238);
			A_SetScale(Scale.X-0.003);
		}
		Wait;
	}
}

Class SiegeParticle : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.06;
		Alpha 0.99;
		Translation "0:255=%[0,0,0]:[0.4,1.7,2.0]";
	}
	States
	{
	Spawn:
		X060 F 1 Bright A_FadeOut(0.03);
		Wait;
	}
}