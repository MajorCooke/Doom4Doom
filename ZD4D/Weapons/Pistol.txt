Class PistolLanceActive : Inventory	
{	Default { +INVENTORY.UNDROPPABLE } }
Class PistolLanceReadyToken : Inventory	
{	Default { +INVENTORY.UNDROPPABLE } }
//==============================================================================
//==============================================================================
//
//		Pistol
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Offset tweaks: Xaser
//
//==============================================================================
//==============================================================================

// Base damage for alt charge is 1-52 based on charge...
// Assuming full charge, the new damage values are:
// With nothing: 	[104, 156]
// With upgrade:	[156, 208]
// Lance:			[191, 280] + 96 splash
const PistolAltMin =		1.5;
const PistolAltMax =		2.0;
const PistolAltUpMin =		2.25;
const PistolAltUpMax =		3.0;
const PistolLanceBase =		150;
const PistolLanceMin =		90;
const PistolLanceMax =		180;

Class D4Pistol : Doom4Weapon
{
	Default 
	{
		Weapon.SlotNumber 1;
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Tag "Pistol";
		Obituary "%k was tickled by %o's pea shooter.";
		//Decal "D4Pistol"
		Scale 0.5;
		Weapon.SelectionOrder 100;
		Weapon.SlotNumber 2;
		Weapon.SlotPriority 1.0;
	}
	States
	{
	Spawn:
		WPPK B -1;
		Stop;
	Deselect:
		WEP1 A 1 
		{
			A_StopSound(5);
			A_Overlay(GunWatcher,"Null");
			A_Lower();
		}
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	Select:
		WEP1 A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
		
	// Precaching to avoid corruption issues.
	DummyState:
		WEP1 A 0;
		PIS2 A 0;
	Ready:
		WEP1 A 0
		{
			/*
			if (CountInv("PistolUpgradeDamage"))
			{
			    if (CountInv("PistolLanceActive"))    	ACS_NamedExecute("ModSelectedText",0,15,0,0); 	//print Lance
				else			    					 
			}
			*/
			return ResolveState("ContinueReady");
		}
		PrepareReadyNormal:
			WEP1 A 0;
			Goto ContinueReady;
		PrepareReadyRed:
			PIS2 A 0;
			Goto ContinueReady;
			
	ContinueReady:
		#### "#" 1 
		{
			PSprite psp = player.FindPSprite(PSP_WEAPON);
			if (psp)	
			{
				Name spr = (CountInv("PistolUpgradeDamage") ? "PIS2" : "WEP1");
				psp.Sprite = GetSpriteIndex(spr);
			}
			
			int wflag = CountInv("PistolUpgradeLance") ? WRF_ALLOWRELOAD : 0;
			A_WeaponReady(wflag|WRF_ALLOWUSER2|WRF_ALLOWUSER4);
		}
		Loop;
		
	Overlay.Pitch:
		M666 A 1 A_SetPitch(pitch-0.7);
		M666 AA 1 A_SetPitch(pitch+0.35);
		Stop;
	Overlay.PitchAlt:
		M666 A 1 A_SetPitch(pitch-4.0);
		M666 AAAA 1 A_SetPitch(pitch + 1.0);
		Stop;
		
	Fire:
		// auto fire section
		---- A 0 Bright  
		{
			
			if (CountInv("PistolUpgradeDamage"))
				A_FireBullets(0,0,1,random(6,14),"D4PistolPuffRed",FBF_NORANDOMPUFFZ|FBF_NORANDOM); // from 6 to 14
			else
				A_FireBullets(0,0,1,3,"D4PistolPuffNormal",FBF_NORANDOMPUFFZ); //either 3, 6 or 9 dmg	
			
		}
	FireCont:
		#### B 1
		{
			if (CountInv("PistolUpgradeDamage"))
			{
				A_PlaySound("Doom4/Weapon/Pistol2/Fire",CHAN_WEAPON,1);
				A_FireProjectile("PistolTracerRed",0,0,6);
			}
			else
			{
				A_PlaySound("Doom4/Weapon/Pistol/Fire",CHAN_WEAPON,1);
				A_FireProjectile("PistolTracerNormal",0,0,6);
			}
			A_AlertMonsters();
			
			for (int i = 0; i < P1 + 50; i++)
			{
				if (A_Overlay(i,"Overlay.Pitch",true))
					break;
			}
		}
		#### B 1 Bright {	A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); if (IsDoubleSpeed()) { A_SetTics(0); }	}
		#### C 1 { A_WeaponOffset(3,30); A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		#### C 1 { A_WeaponOffset(6,27); A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); if (IsDoubleSpeed()) { A_SetTics(0); } }
		#### C 1 { A_WeaponOffset(8,30); A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		#### A 1 { A_WeaponOffset(2,33); A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); if (IsDoubleSpeed()) { A_SetTics(0); } }
		#### A 1 { A_WeaponOffset(0,32); A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		#### A 1 
		{
			A_WeaponOffset(0,32);
			if (CountInv("PistolUpgradeAutomatic"))		
			{	A_Refire("Fire");	}
			A_WeaponReady(WRF_NOSWITCH|WRF_NOBOB);
			if (IsDoubleSpeed()) { A_SetTics(0); }
		}
		Goto Ready;

	AltFire:
		ChargeStart:
			TNT1 A 0 
			{
				Sound snd = CountInv("PistolUpgradeAltCharge") ? "Doom4/Weapon/Pistol2/Charge" : "Doom4/Weapon/Pistol/Charge";
				A_PlaySound(snd,5,1,1);
				
				PSprite psp = player.FindPSprite(OverlayID());
				if (psp) psp.Sprite = GetSpriteIndex(CountInv("PistolUpgradeAltDamage") ? "PIS2" : "WEP1");
			}
		SecondaryCharging:
			#### A 1;
			#### A 0
			{
				int counter[2];
				counter[0] = CountInv("PistolAltFireCounter");
				counter[1] = CountInv("PistolLanceCounter");
				//------------
				//charge speed upgrade check
				
				A_GiveInventory("PistolAltFireCounter",1 + CountInv("PistolUpgradeAltCharge") + (IsDoubleSpeed() * 1));
								
				if (counter[1] >= 52)
				{
					if (!CountInv("PistolLanceReadyToken"))
					{
						A_SetInventory("PistolLanceReadyToken",1);
						A_PlaySound("Doom4/Weapon/Shotgun/TripleShotAim",CHAN_WEAPON,1);
					}
				}				
				if (counter[0] >= 50)
				{
					A_WeaponOffset(frandom(-2.0,2.0),32+frandom(-2.0,2.0));
					if (CountInv("PistolLanceActive"))
				    {
					    A_GiveInventory("PistolLanceCounter",4 + (IsDoubleSpeed() * 2)); 
			     	}
				}
				else if ((counter[0] >= 35) || (counter[0] >= 20 && random(0,1))) 
					A_WeaponOffset(frandom(-1.0,1.0),32+frandom(-1.0,1.0));
					
				StateLabel Next = "ReleaseCharge";
				if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK))
					Next = "SecondaryCharging";
				return ResolveState(Next);
			}
			
	ReleaseCharge:
		#### A 0
		{
			A_StopSound(5);
		    if (CountInv("PistolLanceReadyToken"))		{	return ResolveState("ReleaseLance"); }
			int count = CountInv("PistolAltFireCounter");
			int dmg = 6;
			Sound snd;
			Class<Actor> puff;
			let inv = invoker.owner.FindInventory("PistolAltFireCounter");
			if (inv)
			{
				dmg = Clamp(inv.Amount, 1, inv.MaxAmount);
				if (CountInv("PistolUpgradeAltDamage"))
					dmg = frandom(PistolAltUpMin * dmg, PistolAltUpMax * dmg);
				else
					dmg = frandom(PistolAltMin * dmg, PistolAltMax * dmg);
			}
				 if (count >= 48) 	puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffBig3Red" : "D4PistolPuffBig3");
			else if (count >= 32) 	puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffBig2Red" : "D4PistolPuffBig2");
			else if (count >= 16) 	puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffBig1Red" : "D4PistolPuffBig1");
			else					puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffRed" : "D4PistolPuffNormal");
			A_FireBullets(0,0,1,dmg,puff,FBF_NORANDOMPUFFZ);
			A_TakeInventory("PistolAltFireCounter",100);
			StateLabel next = 'EndRelease'; if (count < 16)	next = 'FireCont';
			return ResolveState(next);
		}
	EndRelease:
		#### B 2 Bright
		{
			if (CountInv("PistolUpgradeAltDamage"))
			{
				A_FireProjectile("PistolTracerRed",0,0,6);
				A_PlaySound("Doom4/Weapon/Pistol2/ChargedFire",CHAN_WEAPON,1);
			}
			else
			{
				A_FireProjectile("PistolTracerNormal",0,0,6);
				A_PlaySound("Doom4/Weapon/Pistol/ChargedFire",CHAN_WEAPON,1);
			}
			A_AlertMonsters();
			A_TakeInventory("PistolAltFireCounter",200);
			A_TakeInventory("PistolLanceCounter",200);
			A_StopSound(5);
			A_StopSound(6);
			for (int i = 0; i < P1 + 50; i++)
			{
				if (A_Overlay(i,"Overlay.PitchAlt",true))
					break;
			}
		}
		#### C 1 { A_WeaponOffset(3,30); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### C 1 { A_WeaponOffset(6,27); }
		#### D 1 { A_WeaponOffset(6,27); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### D 1 { A_WeaponOffset(8,25); }
		#### D 1 { A_WeaponOffset(6,27); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### D 1 { A_WeaponOffset(3,30); }
		#### C 1 { A_WeaponOffset(2,32); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### C 1 { A_WeaponOffset(1,33); }
		#### A 1 { A_WeaponOffset(1,32); A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_NOSWITCH);	A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### A 1 { A_Refire("AltFire"); A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_NOSWITCH);	}
		Goto Ready;				
	ReleaseLance:	
		#### B 2 Bright
		{
			A_PlaySound("Doom4/Weapon/PistolL/Fire",CHAN_WEAPON,1);
			int dmg = PistolLanceBase + random(PistolLanceMin,PistolLanceMax);
			A_FireBullets(0,0,1,dmg,"LanceShockwave",FBF_NORANDOM|FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,1024,"LanceTrailSpawner",0,5);
			//A_RailAttack(PistolLanceBase + random(PistolLanceMin,PistolLanceMax),2,1,"Red","Red",RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,0,"LanceShockwave",0,0,0,0,5,1.0,"LanceTrail",5);
			A_AlertMonsters();
			A_TakeInventory("PistolAltFireCounter",200);
			A_TakeInventory("PistolLanceCounter",200);
			A_TakeInventory("PistolLanceReadyToken",1);
			A_StopSound(5);
			A_StopSound(6);
			for (int i = P1; i < P4 + 1; i++)
			{
				if (A_Overlay(i, "Overlay.PitchAlt", true))
					break;
			}
		}
		#### BBBBB 2 Bright;
		#### C 1 { A_WeaponOffset(3,30); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### C 1 { A_WeaponOffset(6,27); }
		#### D 1 { A_WeaponOffset(6,27); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### D 1 { A_WeaponOffset(8,25); }
		#### D 1 { A_WeaponOffset(6,27); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### D 1 { A_WeaponOffset(3,30); }
		#### D 1 A_PlaySound("Doom4/Weapon/PistolL/Smoke",CHAN_WEAPON,1);
		#### DDDDDDDD 3 A_FireProjectile("SGSmokeSpawner",0,0,6,2);
		#### C 1 { A_WeaponOffset(2,32); A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### C 1 { A_WeaponOffset(1,33); }
		#### A 1 { A_WeaponOffset(1,32); A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_NOSWITCH);	A_SetTics((IsDoubleSpeed() ? 0 : 1)); }
		#### A 1 { A_Refire("AltFire"); A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_NOSWITCH);	}
		Goto Ready;
	Reload:
		#### "#" 10 
		{
			if (CountInv("PistolUpgradeLance"))
			{
				if (CountInv("PistolLanceActive"))
					A_SetInventory("PistolLanceActive", 0);
				else
				{
					A_SetInventory("PistolLanceActive",1);
					A_PlaySound("Doom4/Weapon/GaussGun/PrecisionDown",CHAN_WEAPON,1);	
				}
			}
		}
		Goto Ready;
	}
}

Class PistolAltFireCounter : Counter {}
Class PistolLanceCounter : Counter {}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Primary fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class D4PistolPuffNormal : D4AbstractMissile 
{
	double scaler;	//this one is to easily tweak the inherited versions
	Default 
	{
		+CLIENTSIDEONLY
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+PUFFONACTORS
		Scale 0.1;
		RenderStyle "Add";
		Alpha 0.99;
		+ALLOWTHRUFLAGS
		+THRUGHOST
		Translation "0:255=%[0,0,0]:[0.6,1.0,1.8]";
		Decal "D4Pistol";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			scaler = 0.01;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"9CC5FF",	"0F93FF",	"75C1FF"	};
				for (int i = 0; i < 6; i++)
				{
					int d = Clamp(i/2, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
		}
		TNT1 a 0 A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
	Type1:
		DB21 ABCDEFGHI 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type2:
		DB21 JKLMNOPQR 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type3:
		DB22 ABCDEFGHI 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type4:
		DB22 JKLMNOPQR 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type5:
		DB23 ABCDEFGHI 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type6:
		DB23 JKLMNOPQR 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type7:
		DB24 ABCDEFGHI 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	Type8:
		DB24 JKLMNOPQR 1 Bright A_SetScale(Scale.X+scaler);
		Stop;
	}
}



//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Secondary fire related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class D4PistolPuffBig1 : D4PistolPuffNormal
{
	Default 
	{
		Scale 0.1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			scaler = 0.025;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"9CC5FF",	"0F93FF",	"75C1FF"	};
				for (int i = 0; i < 6; i++)
				{
					int d = Clamp(i/2, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
		}
		TNT1 a 0 A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		Goto Type1;
	}
}
Class D4PistolPuffBig2 : D4PistolPuffNormal
{
	Default 
	{
		Scale 0.1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			scaler = 0.04;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"9CC5FF",	"0F93FF",	"75C1FF"	};
				for (int i = 0; i < 9; i++)
				{
					int d = Clamp(i/3, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
		}
		TNT1 a 0 A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		Goto Type1;
	}
}
Class D4PistolPuffBig3 : D4PistolPuffNormal
{
	Default 
	{
		Scale 0.1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			scaler = 0.055;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"9CC5FF",	"0F93FF",	"75C1FF"	};
				for (int i = 0; i < 12; i++)
				{
					int d = Clamp(i/4, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
			return A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		}
	}
}








Class D4PistolPuffRed : D4PistolPuffNormal
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[1.4,0.13,0.13]";
		Decal "D4PistolRed";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			scaler = 0.01;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"FF0000",	"C91414",	"FF3636"	};
				for (int i = 0; i < 6; i++)
				{
					int d = Clamp(i/2, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
			return A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		}
	}
}
Class D4PistolPuffBig1Red : D4PistolPuffBig1
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[1.4,0.13,0.13]";
		Decal "D4PistolRed";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			scaler = 0.025;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"FF0000",	"C91414",	"FF3636"	};
				for (int i = 0; i < 6; i++)
				{
					int d = Clamp(i/2, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
				A_SpawnParticle("FF0000",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("FF0000",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("C91414",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("C91414",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("FF3636",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				A_SpawnParticle("FF3636",SPF_FULLBRIGHT,random(15,30),random(2,3),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
			}
			return A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		}
	}
}
Class D4PistolPuffBig2Red : D4PistolPuffBig2
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[1.4,0.13,0.13]";
		Decal "D4PistolRed";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			scaler = 0.04;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"FF0000",	"C91414",	"FF3636"	};
				for (int i = 0; i < 9; i++)
				{
					int d = Clamp(i/3, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
			return A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		}
	}
}
Class D4PistolPuffBig3Red : D4PistolPuffBig3
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[1.4,0.13,0.13]";
		Decal "D4PistolRed";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY
		{
			scaler = 0.055;
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =	{	"FF0000",	"C91414",	"FF3636"	};
				for (int i = 0; i < 12; i++)
				{
					int d = Clamp(i/4, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
				}
			}
			return A_Jump(256,"Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8");
		}
	}
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Lance Upgrade related
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

Class LanceImpactDebris : Actor 
{
	Default 
	{
		Projectile;
		Speed 10;
		-NOGRAVITY
		+THRUACTORS
		+DOOMBOUNCE
		+FORCEXYBILLBOARD
		Radius 2;
		Height 5;
		Gravity 0.2;
		BounceFactor 0.5;
		WallBounceFactor 1.0;
		RenderStyle "Add";
		Scale 0.05;
		Alpha 0.6;
		Translation "0:255=%[0,0,0]:[1.0,0.2,0.2]";
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(200,8,16,24,32,40);
		FX54 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 Bright A_SpawnItemEx("LanceDebrisTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	}
}
Class LanceDebrisTrail : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Scale 0.02;
		RenderStyle "Add";
		Alpha 0.5;
		Translation "0:255=%[0,0,0]:[1.0,0.2,0.2]";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,random(1,15));
		X101 ABCDEFGHIJKLMNOPQRSTUV 0 A_JumpIf(1 == 1,"Play");
	Play:
		#### "###" 1 Bright A_FadeOUt(0.03);
		#### "#" 0 A_SetScale(Scale.X+0.01);
		Loop;
	}
}


Class LanceShockwave : Actor 	//the actual puff
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+ALWAYSPUFF
		+PUFFONACTORS
		+FORCEXYBILLBOARD
		+PUFFGETSOWNER
		+SKYEXPLODE
		Translation "0:255=%[0,0,0]:[1.0,0.2,0.2]";
		RenderStyle "Add";
		Scale 0.15;
		Alpha 0.99;
		//Decal "D4GaussDecal"
	}
	States
	{
	Spawn:
		X072 L 0 NODELAY A_Warp(AAPTR_DEFAULT, 5, 0, 0,0,WARPF_NOCHECKPOSITION);
		TNT1 A 0 
		{
			A_SpawnItemEx("LanceImpactLightEmitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_Explode(96,128,0);
			if (GetCvar("D4D_quakexplosions"))
			{
				A_QuakeEx(2,2,2,10,0,768,"",QF_SCALEDOWN,0,0,0,1);
			}
			if (GetCvar("HQEffectsWeapons"))
			{
				static const Color pc[] =
				{
					"FF0000",
					"C91414",
					"FF3636"
				};
				for (int i = 0; i < 12; i++)
				{
					if (i < 8)	A_SpawnItemEx("LanceImpactDebris",3,0,0,frandom(-0.3,-3.5),frandom(-3.5,3.5),frandom(0.6,5),0,SXF_NOCHECKPOSITION,128);
					if (i < 6)	A_SpawnItemEx("LanceImpactVapor",3,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
					
					// [M.C.] Yeah, yeah... I suck at coming up with good names for vars.
					int d = Clamp(i/4, 0, 2);
					A_SpawnParticle(pc[d],SPF_FULLBRIGHT,random(15,30),random(3,4),0,0,0,0,frandom(0.85,-0.85),frandom(0.85,-0.85),frandom(-0.85,0.85),0,0,vel.z-0.06);
					
				}
			}
		}
		X060 CCC 1 Bright
		{
			A_SetScale(Scale.X+0.1);
		}
		X060 C 1 Bright
		{
			A_SetScale(Scale.X+0.1);
			A_FadeOut(0.085);
		}
		Wait;
	}
}

Class LanceImpactLightEmitter : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 2 Light("RedBigPoint3");
		TNT1 A 2 Light("RedMediumPoint1");
		TNT1 A 2 Light("RedMediumPoint2");
		TNT1 A 2 Light("RedMediumPoint3");
		TNT1 A 2 Light("RedSmallPoint1");
		TNT1 A 2 Light("RedSmallPoint2");
		TNT1 A 2 Light("RedSmallPoint3");
		Stop;
	}
}

Class LanceImpactVapor : Actor 
{
	Default 
	{
		+NOINTERACTION
		Scale 0.1;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[1.0,0.2,0.2]";
		Alpha 0.99;
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		//TNT1 A 0 NODELAY A_Jump(240,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40);
		X102 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVV 1 Bright
		{
			A_FadeOut(0.05);
			A_SetScale(Scale.X+0.025);
			if (random(1,2)==2)
			{
				A_ScaleVelocity(0.7);
			}
		}
		Goto Spawn;
	}
}