
//===================================================================================================
//===================================================================================================
//
//		Grenade Launcher
//
//	Model: iD Software
//	Sprites: Major Cooke
//	Coding:	Major Cooke
//
//===================================================================================================
//===================================================================================================

Class D4GrenadeLauncher : Doom4Weapon
{
	const AmmoCost_Normal = 1;
	const AmmoCost_Cluster = 4;
	Array<D4Grenade> Grenades;
	Default
	{
		Doom4Weapon.MultiplayerWeapon true;
		Tag "Grenade Launcher";
		Inventory.PickupMessage "Grenade Launcher! Trickshot time!";
		Weapon.AmmoType1 "D4Rockets";
		Weapon.AmmoGive1 5;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 79;
		Weapon.SlotNumber 5;
		Weapon.SlotPriority 0.99;
	}
	
	private bool Cluster;
	private action void ToggleCluster()
	{
		let i = invoker; let o = i.owner; if (!o)	return;
		
		if (o.CountInv('GrenadeLauncherModCluster'))
			i.Cluster = !i.Cluster;
		else i.Cluster = false;
		
		if (i.Cluster)	
		{
			i.AmmoUse1 = AmmoCost_Cluster;
			o.SetInventory('D4GLClusterActive',1);
		}
		else
		{
			i.AmmoUse1 = AmmoCost_Normal;
			o.SetInventory('D4GLClusterActive',0);
		}
	}
	
	private action bool CheckCluster()
	{	return invoker.Cluster;	}
	
	private int Timer;
	override void DoEffect()
	{
		if (++Timer >= Second * 5)
		{
			Timer = 0;
			
			if (Grenades.Size() > 0 && 
				Owner && Owner.Player && Owner.Player.ReadyWeapon == self)
			{
				Array<D4Grenade> temp; temp.Clear();
				
				for (int i = 0; i < Grenades.Size(); i++)
				{
					if (Grenades[i] && !Grenades[i].bKILLED)
						temp.Push(Grenades[i]);
				}
				Grenades.Move(temp);
			}
		}
	}
	
	private action void DetonateGrenades()
	{
		let j = invoker; let o = j.owner; if (!o)	return;
		for (int i = 0; i < j.Grenades.Size(); i++)
		{
			if (j.Grenades[i] && !j.Grenades[i].bKILLED)
			{
				if (j.Grenades[i] is 'D4GrenadeCluster')
					j.Grenades[i].bNODAMAGETHRUST = true;
				j.Grenades[i].ExplodeMissile();
			}
			j.Grenades[i] = null;
		}
	}
	
	States
	{
	Select:
		M202 A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
	Deselect:
		M202 A 1 
		{
			A_Lower();
			A_Overlay(7000, "Null");
			A_ZoomFactor(1.0);
		}
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	Ready:
		M202 A 1
		{
			A_Overlay(7002, "Overlay.KeyWatcher", true);
			
			A_WeaponReady(WRF_ALLOWUSER2);
		}
		Wait;
		
	Fire:
		M202 A 2 bright
		{
			Class<Actor> gren = 'D4Grenade';
			if (CheckCluster())
				gren = 'D4GrenadeCluster';
			let grens = D4Grenade(FireProjectile(gren, (-1.0, 8.0, -7.0)));
			if (grens)	invoker.Grenades.Push(grens);
			A_PlaySound("Doom4/Weapon/GrenadeLauncher/Fire", CHAN_WEAPON);
			if (IsDoubleSpeed())
				A_Overlay(7001, "Overlay.OffsetsFast");
			else
				A_Overlay(7001, "Overlay.Offsets");
			
			A_Overlay(7000, "Overlay.Pitcher");
			A_SetAlwaysSwitchable(true);
		}
		M202 A 6;
		M202 BCD 4;
		M202 A 6;
		---- A 0 A_SetAlwaysSwitchable(false);
		M202 A 0 A_Refire("Fire");
		Goto Ready;
	Overlay.Offsets:
		TNT1 A 1 A_WeaponOffset(3.0, 12, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(2.5, 8, WOF_ADD); 
		TNT1 A 1 A_WeaponOffset(2.0, 4, WOF_ADD); 
		TNT1 A 1 A_WeaponOffset(1.5, 3, WOF_ADD); 
		TNT1 A 1 A_WeaponOffset(1.0, 2, WOF_ADD); 
		TNT1 A 4 A_WeaponOffset(0.5, 1, WOF_ADD); 
		// ^ 9 tics | 10.5 | 30
		TNT1 A 1 A_WeaponOffset(-0.25, -1, WOF_ADD); //10.25
		TNT1 A 1 A_WeaponOffset(-0.50, -2, WOF_ADD); //09.75
		TNT1 A 1 A_WeaponOffset(-0.75, -3, WOF_ADD); //09.00
		TNT1 A 1 A_WeaponOffset(-1.00, -4, WOF_ADD); //08.00
		TNT1 A 1 A_WeaponOffset(-1.50, -4, WOF_ADD); //06.50
		TNT1 A 1 A_WeaponOffset(-2.00, -4, WOF_ADD); //04.50
		TNT1 A 1 A_WeaponOffset(-1.50, -4, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-1.00, -3, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-1.00, -2, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-1.00, -1.5, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-0.00, -1.0, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-0.00, -0.5, WOF_ADD);
		// 12 + 9 = 21
		Stop;
	Overlay.OffsetsFast:
		TNT1 A 1 A_WeaponOffset(5.5, 20, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(3.5, 7, WOF_ADD);
		TNT1 A 4 A_WeaponOffset(1.5, 3, WOF_ADD); 
		// ^ 9 tics | 10.5 | 30
		TNT1 A 1 A_WeaponOffset(-0.75, -3, WOF_ADD); 
		TNT1 A 1 A_WeaponOffset(-1.75, -7, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-3.50, -8, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-2.50, -7, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-2.00, -3.5, WOF_ADD);
		TNT1 A 1 A_WeaponOffset(-0.00, -1.5, WOF_ADD);
		Stop;
	Overlay.Pitcher:
		TNT1 A 2 A_ZoomFactor(0.9, ZOOM_NOSCALETURNING);
		TNT1 A 1 A_ZoomFactor(0.92, ZOOM_NOSCALETURNING);
		TNT1 A 1 A_ZoomFactor(0.94, ZOOM_NOSCALETURNING);
		TNT1 A 1 A_ZoomFactor(0.96, ZOOM_NOSCALETURNING);
		TNT1 A 1 A_ZoomFactor(0.98, ZOOM_NOSCALETURNING);
		TNT1 A 1 A_ZoomFactor(1.0, ZOOM_NOSCALETURNING);
		Stop;
	Overlay.PitcherFast:
		TNT1 A 1;
		Stop;
	Overlay.KeyWatcher:
		TNT1 A 1
		{
			int old = GetPlayerInput(MODINPUT_OLDBUTTONS);
			int input = GetPlayerInput(MODINPUT_BUTTONS);
			if ((input & BT_ALTATTACK) && !(old & BT_ALTATTACK) && CountInv('GrenadeLauncherModDetonate'))
				DetonateGrenades();
			
			if ((input & BT_RELOAD) && !(old & BT_RELOAD) && CountInv('GrenadeLauncherModCluster'))
				ToggleCluster();
		}
		Wait;
	Spawn:
		M202 Z -1;
		Stop;
	}
}

Class D4GLClusterActive : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE
	}
}

Class D4Grenade : D4AbstractMissilePlayer
{
	private Vector3 PrevPos;
	private int Timer;
	int TimeLimit;
	Property TimeLimit: TimeLimit;
	Default
	{
		Scale 1.2;
		Speed 30;
		Damage 25;
		Gravity 0.7;
		BounceFactor 0.7;
		WallBounceFactor 0.7;
		Radius 8;
		Height 8;
		Projectile;
	//	BounceType "Doom";
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+CANBOUNCEWATER
		-BOUNCEAUTOOFF
		+BOUNCEAUTOOFFFLOORONLY
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+HITTRACER
	//	ReactionTime 99;
		D4Grenade.TimeLimit 99;
		BounceSound "Doom4/Weapon/GrenadeLauncher/Bounce";
		DeathSound "Doom4/Weapon/GrenadeLauncher/Explode";
	}
	
	void ExplodeEffects()
	{
		A_QuakeEx(2,2,2,15,0,256,"",QF_SCALEDOWN,0,0,0,1);
		if(GetCvar("HQEffectsWeapons"))
		{
			A_SpawnItemEx("GenericExplosionParticleSpawner",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
		}
		A_SpawnItemEx("D4RocketExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);	//Center
	}
	
	virtual void GrenadeBoom(bool det = false)
	{
		bKILLED = bNOINTERACTION = true;
		A_Stop();
		ExplodeEffects();
		RocketDamage();
	}
	
	States
	{
	Spawn:
		GRNL AAAA 1 A_SpawnItemEx("D4RocketTrailSmoke",-5,random(5,-5),random(5,-5),0,0,0,0,SXF_NOCHECKPOSITION);
		GRNL A 1
		{
			if (abs(vel.z) <= 1.0 && pos.z + height > ceilingz)
				SetOrigin(pos - (0, 0, height),true);
			
			A_SpawnItemEx("D4RocketTrailSmoke",-5,random(5,-5),random(5,-5),0,0,0,0,SXF_NOCHECKPOSITION);
			bNOGRAVITY = false;
		//	A_CountDown();
			if (Timer >= TimeLimit || ++Timer >= TimeLimit)
			{
				bBOUNCEONFLOORS = false;
			}
			tracer = null;
			if (!bBOUNCEONFLOORS && pos.z <= floorz)
				ExplodeMissile();
		}
		Wait;
	Death:
		TNT1 A 35 GrenadeBoom(!tracer);
		Stop;
	}
}

Class D4GrenadeCluster : D4Grenade
{
	override void GrenadeBoom(bool det)
	{
		bKILLED = bNOINTERACTION = true;
		A_Stop();
		ExplodeEffects();
		RocketDamage();
		
		int count = (det) ? 4 : 3;
		double div = 360.0 / count;
		for (int i = 0; i < count; i++)
		{
			let gren = Spawn('D4Grenade', pos, ALLOW_REPLACE);
			if (gren)
			{
				gren.Target = Target;
				gren.Master = Master;
				gren.Tracer = Tracer;
				gren.Angle = Angle + irandom(-25, 25) + 45 + i * div;
				gren.Vel3DFromAngle(ffrandom(3.0,6.0), gren.Angle, irandom(-75, 0));
				gren.bBOUNCEONFLOORS = false;
			}
		}
	}
}

