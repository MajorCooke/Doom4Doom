
//===================================================================================================
//===================================================================================================
//
//		Chaingun
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code rewrite + layer support: Major Cooke
//	Offset tweaks: Xaser
//
//===================================================================================================
//===================================================================================================
Class D4Chaingun : Doom4Weapon
{
	enum Chaingun
	{
		MobileTurretDamage = 	6,
		GibRange =				384
	};
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOALERT
		Inventory.PickupMessage "Chaingun. Flay some demons.";
		Tag "Chaingun";
		Weapon.AmmoType1 "D4Bullets";
		Weapon.AmmoGive1 20;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 30;
		Weapon.SlotNumber 4;
		Weapon.SlotPriority 1.0;
		+DONTGIB
	}
	action void FireTurretBullets()
	{
		double offsxy = 6.0 * frandompick(1.0,0.0,-1.0);
		double offsz = (offsxy != 0.0) ? -1.0 : -7.0;
		int RGFFlags = RGF_SILENT|RGF_NORANDOMPUFFZ;
		if (IsDoubleSpeed())
		{
			A_RailAttack(MobileTurretDamage,-7, true, "", "", RGFFlags,0, "D4BulletPuffExtreme", 0, 0, 32766,0,0,1,null,0.0);
			A_RailAttack(MobileTurretDamage, 7, false, "", "", RGFFlags,0, "D4BulletPuffExtreme", 0, 0, 32766,0,0,1,null,0.0);
			A_RailAttack(MobileTurretDamage, 0, false, "", "", RGFFlags,0, "D4BulletPuffExtreme", 0, 0, 32766,0,0,1,null,-4.0);
		}
		A_RailAttack(MobileTurretDamage,-7, true, "", "", RGFFlags,0, "D4BulletPuffExtreme", 0, 0, 32766,0,0,1,null,0.0);
		A_RailAttack(MobileTurretDamage, 7, false, "", "", RGFFlags,0, "D4BulletPuffExtreme", 0, 0, 32766,0,0,1,null,0.0);
		A_RailAttack(MobileTurretDamage, 0, false, "", "", RGFFlags,0, "D4BulletPuffExtreme", 0, 0, 32766,0,0,1,null,-4.0);
			
		FireProjectile("BulletSmallTracer", (invoker.owner.radius + 5.0, offsxy, offsz - 7.0), (0,0), false);
		
		if (D4D_Casings) 	
			A_SpawnItemEx("TurretCasingSpawner",flags: SXF_NOCHECKPOSITION|SXF_SETMASTER);
			
		A_GunFlash("Null");
	}
	
	States
	{
	Spawn:
		WPPK F -1;
		Stop;
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		"####" "#" 0 
		{
			A_Overlay(NoiseLayer,"Null");
			A_Overlay(ChaingunFlash,"Null");
			A_Overlay(PrepLayer,"Null");
			A_StopSound(5);
			A_StopSound(6);
			A_SetInventory("SpinUpCount",0);
			A_SetInventory("FrameTimeLeft",0);
			A_SetInventory("AltFireToken",0);
			A_SetInventory("BusyToken",0);
			A_SetInventory("MobileTurretArmed", 0);
			A_SetSpeed(1);
			A_SetRoll(0);
			A_StopSound(CHAN_WEAPON);
			return ResolveState("DesLoop");
		}
	DesLoop:
		---- A 1 A_Lower(WeaponSwitchSpeed);
		Wait;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		CGNS A 0
		{
			A_SetInventory("BusyToken",0);
			if (CountInv("MobileTurretActive"))		{	return ResolveState(2);	}
			if (CountInv("GatlingRotatorActive"))	{	return ResolveState(1);	}
			return ResolveState("Sel2");
		}
		CGRS A 0 {	return ResolveState("Sel2");	}
		CT2S A 0 {	return ResolveState("Sel2");	}
	Sel2:
		"####" A 0 
		{
			A_SetInventory("SpinLoopFrame",0);
			A_SetInventory("SpinUpCount",0);
			A_SetInventory("FrameTimeLeft",0);
			return ResolveState("SelLoop");
		}
	SelLoop:
		---- A 1 A_Raise(WeaponSwitchSpeed);
		Wait;
		
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	Ready:
		M666 A 1
		{
			if (!CountInv("SpinUpCount")) { return ResolveState("ReadySpriteSetup"); }
			
			if (CountInv("BusyToken"))
			{	A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);	}
			else
			{	A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);		}
			return ResolveState(null);
		}
		Loop;
	ReadySpriteSetup:
		CGNS A 0
		{
			if (CountInv("MobileTurretActive"))
			{	
				
				return ResolveState("ReadyTurret"); 
			}
			else if (CountInv("GatlingRotatorActive"))
			{
				return ResolveState("ReadyRotator"); 
			}
			return ResolveState("ReadyLoop"); 
		}
	ReadyTurret:	CT2S A 0 { return ResolveState("ReadyLoop");	}
	ReadyRotator:	CGRS A 0 { return ResolveState("ReadyLoop");	}
	
	ReadyLoop:
		"####" A 0
		{
			if (CountInv("MobileTurretArmed"))
			{	return ResolveState("MobileTurretReady");	}
			A_SetSpeed(1);
			A_Overlay(NoiseLayer,"Null");

				 if (CountInv("SpinLoopFrame") == 0)	{ return ResolveState(1); }
			else if (CountInv("SpinLoopFrame") == 1)	{ return ResolveState(2); }
			else if (CountInv("SpinLoopFrame") == 2)	{ return ResolveState(3); }
			else 										{ return ResolveState(4); }
		}
		"####" ABCD 0 { return ResolveState("ReadyPostFire"); }
	ReadyPostFire:
		"####" "#" 1
		{
			if (CountInv("MobileTurretActive") && CountInv("MobileTurretArmed"))
			{	return ResolveState("MobileTurretReady");	}
			return ResolveState(null);
		}
	RPF:
		"####" "#" 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Loop;
	//-------------------------------------------------------
	// Regular fire
	//-------------------------------------------------------
	Fire:
		M666 A 0
		{
			A_CheckReload();
			if (CountInv("MobileTurretActive") && CountInv("AltFireToken"))
			{	return ResolveState("MobileTurretFire");	}
			
			A_SetInventory("SpinUpCount", SpinMax);
			A_SetInventory("FireToken",1);
			
			A_Overlay(PrepLayer,"Overlay.FirePrimary");
			A_Overlay(SpinLayer,"Overlay.SpinFrame",true);
			
			A_OverlayFlags(SpinLayer,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE,true);
			A_OverlayFlags(PrepLayer,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE,true);
			
			return ResolveState("NewHold");
		}
	NewHold:
		M666 A 1 A_CheckReload();
		M666 A 0 A_Refire("NewHold");
		M666 A 0 
		{
			A_PlaySound("Doom4/Weapon/Chaingun/WindDown",5,0.6);
			A_SetInventory("FireToken",0);
		}
		Goto Ready;
		
	Overlay.Flash:
		TNT1 A 1
		{
			A_FireBullets(4,4,-1,7,"D4BulletPuff",FBF_USEAMMO|FBF_PUFFTRACER,0,"BulletSmallTracer",-1,5);
			A_QuakeEx(0,1,1,3,0,48,"",QF_Relative|QF_ScaleDown,0,0,0,0,0,1);
			AlertMonsters();
			if (GetCvar("D4D_Casings") > 0)		{	A_SpawnItemEx("ChaingunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);	}
			if (GetCvar("HQEffectsWeapons"))	
			{	
				A_FireProjectile("CGSmokeSpawner",0,0,3,2);
			}
			A_SetBlend("orange",0.03,6);
			
			if (IsDoubleSpeed())
			{	return ResolveState("Null");	}
			A_SetViewPitch(ViewPitch-0.8);
			return ResolveState(null);
		}
		TNT1 A 0 A_SetViewPitch(viewpitch+0.8);
		Stop;	
	FlashRotator:
			TNT1 A 1
			{
				A_QuakeEx(0,1,1,3,0,48,"",QF_Relative|QF_ScaleDown,0,0,0,0,0,1);
			//	A_FireBullets(2,2,-1,8,"GatlingRotatorExplosivePuff",FBF_PUFFTRACER,0,"BulletSmallTracer",-1,5);
				
				A_RailAttack(8,0, true, "", "", RGF_SILENT|RGF_NORANDOMPUFFZ,0, "GatlingRotatorExplosivePuff", 2, 2, 32766);
				if (GetCvar("D4D_Casings") > 0)	{	A_SpawnItemEx("ChaingunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);	}
				A_FireProjectile("CGSmokeSpawner",0,0,3,2);
				A_TakeInventory("D4Bullets",2,TIF_NOTAKEINFINITE);
				AlertMonsters();
				A_SetBlend("orange",0.03,6);
				A_SetViewPitch(viewpitch-1);
			}
			TNT1 A 0
			{
				if (IsDoubleSpeed())
				{	A_SetViewPitch(viewpitch + 1);	return ResolveState("Null");	}
				return ResolveState(null);
			}
			TNT1 AA 1 A_SetViewPitch(viewpitch+0.5);
			Stop;

	//-------------------------------------------------------
	// Alt fire
	//-------------------------------------------------------
	NoMods:
		"####" "#" 1 { D4Msg.PrintStatus(D4Msg.NoMods); }
		Goto Ready;
		
	AltFire:
		"####" "#" 0
		{
			if (CountInv("GatlingRotatorActive"))
			{
				A_SetInventory("AltFireToken",1);	
				if (A_Overlay(SpinLayer,"Overlay.SpinFrame",true))
				{	A_OverlayFlags(2,WeapMoveBob|PSPF_POWDOUBLE,true); }
				return ResolveState("AltHold");
			}
			else if (CountInv("MobileTurretActive"))
			{
				if (CountInv("AltFireToken"))
				{	return ResolveState("MobileTurretReady");	}
				return ResolveState("MobileTurretArm");
			}
			return ResolveState("NoMods");
		}
	AltHold:
		M666 "#" 1
		{
			if (CountInv("MobileTurretActive") && CountInv("AltFireToken"))
			{	return ResolveState("MobileTurretReady");	}
			return ResolveState(null);
		}
		M666 "#" 0 A_Refire("AltHold");
		M666 "#" 0 
		{
			A_PlaySound("Doom4/Weapon/Chaingun/WindDown",5,0.6);
			A_SetInventory("AltFireToken",0);
		}
		Goto Ready;
		
	//==========================================================================
	//==========================================================================
	// Overlays
	//==========================================================================
	//==========================================================================
	// ...WEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee...
	SovietSpin:
		M666 A 1
		{
			if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK)
			{
				if (CountInv("Sovietsaurus") < 90)
				{
					A_GiveInventory("Sovietsaurus",2);
					A_SetRoll(roll + CountInv("Sovietsaurus"),SPF_INTERPOLATE);
				}
				else if (roll % 90 != 0)
				{
						 if (roll >= 0 && roll < 90)	{ A_SetRoll(0,SPF_INTERPOLATE); }
					else if (roll >= 90 && roll < 180)	{ A_SetRoll(90,SPF_INTERPOLATE); }
					else if (roll >= 180 && roll < 270)	{ A_SetRoll(180,SPF_INTERPOLATE); }
					else if (roll >= 270 && roll < 360)	{ A_SetRoll(270,SPF_INTERPOLATE); }
					else								{ A_SetRoll(0,SPF_INTERPOLATE); }
				}
				else
				{
					A_SetRoll((roll + 90) % 360);
				}
			}
			else
			{
				if (CountInv("Sovietsaurus") > 10)
				{
					A_TakeInventory("Sovietsaurus",2);
					A_SetRoll(roll + CountInv("Sovietsaurus"),SPF_INTERPOLATE);
				}
				else
				{
					A_TakeInventory("Sovietsaurus",32767);
					if ((roll % 360) >= 355 || (roll % 360) <= 5)
					{	
						A_SetRoll(0,SPF_INTERPOLATE);	
						return ResolveState("Null");
					}
					else
					{	A_SetRoll(roll + 5,SPF_INTERPOLATE);	}
				}
			}
			return ResolveState(null);
		}
		Loop;
	
	//==========================================================================
	// Spinning Animation
	// This takes care of the frame acquisition and timer setting.
	
	Overlay.SpinFrame:
		CGNS A 0 
		{	
			if (CountInv("GatlingRotatorActive"))	{	return ResolveState(1);	}
			if (CountInv("MobileTurretActive"))		{	return ResolveState(2);	}
			return ResolveState("OverlaySpinFrame"); 
		}
		CGRS A 0 A_Jump(256,"OverlaySpinFrame");
		CT2S A 0 A_Jump(256,"OverlaySpinFrame");
	OverlaySpinFrame:
		"####" "#" 0
		{
			if (health < 1)						return ResolveState("Null");	
			if (CountInv("SpinLoopFrame") >= 3)	A_TakeInventory("SpinLoopFrame",32767);
			else								A_GiveInventory("SpinLoopFrame",1);
				 
				 
				 if (CountInv("SpinUpCount") <= 10)	{ A_GiveInventory("FrameTimeLeft",4);	}
			else if (CountInv("SpinUpCount") <= 21) { A_GiveInventory("FrameTimeLeft",3);	}
			else if (CountInv("SpinUpCount") <= 43) { A_GiveInventory("FrameTimeLeft",2);	}
			else 									{ A_GiveInventory("FrameTimeLeft",1);	}
			
				 if (CountInv("SpinLoopFrame") == 0)	{ return ResolveState(1); }
			else if (CountInv("SpinLoopFrame") == 1)	{ return ResolveState(2); }
			else if (CountInv("SpinLoopFrame") == 2)	{ return ResolveState(3); }
			else 										{ return ResolveState(4); }
		}
		"####" ABCD 0 {	return ResolveState("OverlaySpinWait");	}
		
	//==========================================================================
	// Spinning
	
	Overlay.SpinWait:
	OverlaySpinWait:
		"####" "#" 0
		{
			if (health < 1)	{ return ResolveState("Null");	}
			if (!CountInv("FrameTimeLeft"))
			{	return ResolveState("Overlay.SpinFrame");	}
			A_TakeInventory("FrameTimeLeft",1);
			return ResolveState(null);
		}
		"####" "#" 1
		{	
			if (health < 1)	{ return ResolveState("Null");	}
			//If holding primary, or the secondary while the gatling mod is installed...
			if ((GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ATTACK) ||
				((GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK) 
				&& CountInv("GatlingRotatorActive")))
			{
				if (CountInv("SpinUpCount") == 2)	{	A_PlaySound("Doom4/Weapon/Chaingun/WindUp",5,0.6);	}
				if (CountInv("SpinUpCount") == 14)	{	A_PlaySound("Doom4/Weapon/Chaingun/Loop",5,0.6,1);	}
				
				// Slowly climb up. Or... quickly.
				if (CountInv("SpinUpCount") < SpinMax)
				{	A_GiveInventory("SpinUpCount",1 + IsDoubleSpeed());	}
				// Now at full speed. If both buttons are held, open fire.
				// Otherwise, Stop; shooting.
				
				else if (CountInv("GatlingRotatorActive"))
				{
					if ((GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ATTACK) &&
					(GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK))
					{	A_Overlay(PrepLayer,"Overlay.FireGatling",true);	}
					
					else if ((GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ATTACK))
					{	A_Overlay(PrepLayer,"Overlay.FirePrimary",true);	}
					
					else
					{	
						A_Overlay(NoiseLayer,"Null");
						A_Overlay(PrepLayer,"Null");
						A_PlaySound("Doom4/Weapon/Chaingun/Loop;",5,0.6,1);
					}
				}
			}
			else
			{
				A_Overlay(PrepLayer,"Null");
				A_Overlay(NoiseLayer,"Null");
				if (!A_TakeInventory("SpinUpCount",1 + IsDoubleSpeed(),0))
				{
					return ResolveState("Null");
				}
			}
			return ResolveState(null);
		}
		Loop;
		
	//==========================================================================
	// This one does the shooting for standard primary.
	
	Overlay.FirePrimary:
		M666 A 1
		{
			if (health < 1)	{ return ResolveState("Null");	}
			if (CountInv("FireToken"))
			{
				if (CountInv("SpinUpCount") >= SpinMax)
				{	return ResolveState("Overlay.FirePrimaryFull");	}
				// Triggers when to shoot a bullet, at specific tics.
				else if (
					CountInv("SpinUpCount") == 0 ||
					CountInv("SpinUpCount") == 14 || //14
					CountInv("SpinUpCount") == 25 || //11
					CountInv("SpinUpCount") == 34 || //9
					CountInv("SpinUpCount") == 40 || //7
					CountInv("SpinUpCount") == 46)	//6
				{
					A_Overlay(FireLayer,"Overlay.Shoot");
				}
				return ResolveState(null);
			}
			return ResolveState("Null");
		}
		Loop;
		//Shooting at maximum speed.
	Overlay.FirePrimaryFull:
		M666 A 1
		{
			if (health < 1)	{ return ResolveState("Null");	}
			if (!GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK)
			{	
				A_Overlay(NoiseLayer,"Null");
				return ResolveState("Null");	
			}
			
			if (!A_JumpIfNoAmmo("Null"))
			{	
				A_Overlay(FireLayer,"Overlay.Shoot");
				A_Overlay(NoiseLayer,"Overlay.Noise",true);
			}
			return ResolveState(null);
		}
		Loop;
		
	// Fires the normal bullets.
	Overlay.Shoot:
		CGNF A 0 
		{	
			if (CountInv("GatlingRotatorActive"))	{	return ResolveState(1);	}
			if (CountInv("MobileTurretActive"))		{	return ResolveState(2);	}
			return ResolveState("Overlay.ShootFrame"); 
		}
		CGRF A 0 A_Jump(256,"Overlay.ShootFrame");
		CT2F A 0 A_Jump(256,"Overlay.ShootFrame");
	Overlay.ShootFrame:
		"####" A 0
		{
			int cnt = CountInv("SpinLoopFrame");
				 if (cnt == 0)	{ return ResolveState(1); }
			else if (cnt == 1)	{ return ResolveState(2); }
			else if (cnt == 2)	{ return ResolveState(3); }
			else 										{ return ResolveState(4); }
		}
		"####" ABCD 0 { return ResolveState("Overlay.ShootBullet"); }
	Overlay.ShootBullet:
		"####" "#" 1 bright
		{
			int cnt = CountInv("SpinUpCount");
			if (cnt >= SpinMax)
			{
				if (IsDoubleSpeed() || (CountInv("ChaingunFireTracker") % 2 > 0))
				{ 
					A_GunFlash("Null");
					A_Overlay(ChaingunFlash, "Overlay.Flash");
				}
			}
			else
			{
				A_GunFlash("Null");
				A_Overlay(ChaingunFlash, "Overlay.Flash");
				A_PlaySound("Doom4/Weapon/Chaingun/Fire",CHAN_WEAPON,0.8);
				
				if (cnt < 30 && !IsDoubleSpeed())
				{	A_SetTics(2);	}
			}
			//A_WeaponOffset(frandom(1,2.5),frandom(33,34.5));
		}
		M666 A 1; //A_WeaponOffset(frandom(0.5,1),frandom(32.5,33))
		//M666 A 0; //A_WeaponOffset(0, 32.0)
		Stop;
		
	//==========================================================================
	// Gatling
	Overlay.FireGatling:
		M666 A 3
		{
			if (health < 1)	{ return ResolveState("Null");	}
			if (CountInv("D4Bullets") > 1 || GetCvar("sv_infiniteammo"))
			{	
				A_Overlay(FireLayer,"Overlay.FireGatlingBullet");	
				A_Overlay(NoiseLayer,"Overlay.Noise");
			}
			else
			{	A_Overlay(NoiseLayer,"Null");	}
			return ResolveState(null);
		}
		Loop;
	Overlay.FireGatlingBullet:
		M666 A 0
		{
			int cnt = CountInv("SpinLoopFrame");
				 if (cnt == 0)	{ return ResolveState(1); }
			else if (cnt == 1)	{ return ResolveState(2); }
			else if (cnt == 2)	{ return ResolveState(3); }
			else 				{ return ResolveState(4); }
		}
		CGRF ABCD 0 {	return ResolveState("Overlay.FireGatlingBulletFrame");		}
	Overlay.FireGatlingBulletFrame:
		CGRF "#" 1 bright
		{			
			A_GunFlash("FlashRotator");
			//A_WeaponOffset(frandom(1,2.5),frandom(33,34.5));
		}
		Stop;
	
	Overlay.Noise:
		M666 A 1
		{
			if (health < 1)	{ return ResolveState("Null");	}
			
			A_GiveInventory("ChaingunFireTracker",1);
			int cnt = CountInv("ChaingunFireTracker");
			if (cnt == 1)
			{	A_PlaySound("Doom4/Weapon/Chaingun/Fire",5,0.8);	}
			else if (cnt == (4 - IsDoubleSpeed()))
			{	A_PlaySound("Doom4/Weapon/Chaingun/Fire",6,0.8);	}
			else if (cnt == (7 - IsDoubleSpeed() * 2))
			{	A_PlaySound("Doom4/Weapon/Chaingun/Fire",7,0.8);	}
			
			if (cnt >= (IsDoubleSpeed() ? 6 : 10))
			{	A_TakeInventory("ChaingunFireTracker",1000);	}
			return ResolveState(null);
		}
		Loop;
	
	//-------------------------------------------------------
	// Mobile turret
				
			MobileTurretArm:
				CT2S "#" 1
				{
					A_SetViewPitch(0);
					// Make sure the other overlays are gone.
					A_Overlay(SovietsaurusSpinopatimus,"Null");
					A_SetRoll(0,SPF_INTERPOLATE);
					A_Overlay(PrepLayer,"Null");
					A_Overlay(SpinLayer,"Null");
					A_Overlay(FireLayer,"Null");
					A_Overlay(NoiseLayer,"Null");
					A_SetInventory("SpinUpCount",0);
					A_SetInventory("FrameTimeLeft",0);
					if (CountInv("AltFireToken"))
					{	return ResolveState("MobileTurretReady");	}
					A_GiveInventory("AltFireToken",1);					
					A_SetSpeed(0.75);
					A_PlaySound("Doom4/Weapon/Chaingun/ReadyTurret",5,1);
					return ResolveState(null);
				}
				//CGNS "###" 1 A_WeaponOffset(4,20,WOF_ADD) //+16 +80
				//CGTS AAAAAAAA 1 A_WeaponOffset(-2,-10,WOF_ADD)
				CT2M ABCDE 1;
				
			MobileTurretReady:
				CGTS A 1 A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB);
				CGTS A 0 A_Refire("MobileTurretReady");
				
			MobileTurretDisarm:
				CGTS A 1 
				{
					A_SetInventory("AltFireToken",0);
					A_SetSpeed(1);
					A_PlaySound("Doom4/Weapon/Chaingun/UnreadyTurret",5,1);
				}
				/*CGTS AAA 1 A_WeaponOffset(4,20,WOF_ADD) //+16 +80
				CGNS AAAAAAAA 1 A_WeaponOffset(-2,-10,WOF_ADD)*/
				CT2M EDCBA 1;
				Goto Ready;
	
	//-------------------------------------------------------
	// MobileTurret fire
	//-------------------------------------------------------
	MobileTurretFire:
		CGTF A 0 
		{
			A_PlaySound("Doom4/Weapon/Chaingun/TurretFire",CHAN_WEAPON,1,1);
			
		}
	MobileTurretFireContinue:
		CGTF A 1 Bright 
		{
			if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK)
			{
				A_QuakeEx(0,1,1,5,0,48,"",QF_Relative,0,0,0,0,0,1);
				FireTurretBullets();
				
				if (GetCvar("HQEffectsWeapons"))	
				{	
					A_FireProjectile("CGSmokeSpawner",0,0,-3,2);
					A_FireProjectile("CGSmokeSpawner",0,0,3,2);
				}
				
				A_WeaponOffset(frandom(-1, 1), frandom(33, 35));
				AlertMonsters();
			}
		}
		CGTF BCD 1 Bright 
		{
			if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK)
			{
				FireTurretBullets();
				A_WeaponOffset(frandom(-1, 1), frandom(33, 35));
			}
		}
		CGTS A 0 A_Refire("MobileTurretFireContinue");
	EndTurretLoop:
		CGTS A 1 
		{
			A_QuakeEx(0,1,1,5,0,48,"",QF_Relative|QF_ScaleDown,0,0,0,0,0,1);
			A_PlaySound("Doom4/Weapon/Chaingun/TurretEnd",CHAN_WEAPON);
			A_StopSound(6);
			A_WeaponOffset(0, 33);
		}
		CGTS A 1 A_WeaponOffset(0, 32.5);
		CGTS B 2 A_WeaponOffset(0, 32.0);
		CGTS AB 2;
		CGTS ABAB 3;
		CGTS A 0 A_WeaponReady(WRF_NOPRIMARY);
		Goto MobileTurretReady;
		
	//-------------------------------------------------------
	// Alt fire switcheroo
	//-------------------------------------------------------
	Reload:
		"####" "#" 0 
		{
			A_SetInventory("AltFireToken",0);
			if(CountInv("ChaingunMod1")) //if has GatlingRotator
			{
				if(CountInv("MobileTurretActive")) //but MobileTurret was active
				{
					return ResolveState("FromMobileTurretToGatlingRotator");
				}
				else if(CountInv("GatlingRotatorActive")==0)
				{
					return ResolveState("FromNormalToGatlingRotator"); //but if it didnt have MobileTurret active, then it was in "normal"
				}
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			if(CountInv("ChaingunMod2")) //if it has MobileTurret
			{
				if(CountInv("GatlingRotatorActive")) //but GatlingRotator was active
				{
					return ResolveState("FromGatlingRotatorToMobileTurret");
				}
				else if(CountInv("MobileTurretActive")==0)	//if nothing was active,
				{
					return ResolveState("FromNormalToMobileTurret"); //then it was in "normal" SG
				}
				D4Msg.PrintStatus(D4Msg.NoOtherMods);
			}
			else
			{
				D4Msg.PrintStatus(D4Msg.NoMods);
			}
			return ResolveState(null);
		}
		"####" "#" 5;
		Goto Ready;


		FromNormalToMobileTurret:
			//CGNS A 0 A_PrintBold("From normal to MobileTurret")
			//hide normal fire
			CGNS "#####" 1 A_WeaponOffset(8,16,WOF_ADD); //+24 +64
			CT2S A 25 
			{
				A_Overlay(SpinLayer,"Null");
				A_TakeInventory("SpinLoopFrame",32767);
				A_TakeInventory("SpinUpCount",32767);
				A_TakeInventory("FrameTimeLeft",32767);
				A_PlaySound("Doom4/Weapon/Chaingun/SwitchToTurret",5,1);
				A_GiveInventory("MobileTurretActive",1);
			}
			//pull of and arm MobileTurret mod
			CT2S AAAAAAAAAA 1 A_WeaponOffset(-3,-8,WOF_ADD);
			Goto Ready;
		FromMobileTurretToNormal:	
			//"####" "#" 0 A_PrintBold("From MobileTurret to normal")
			//hide normal fire
			CT2S "#####" 1 A_WeaponOffset(4,20,WOF_ADD); //+16 +80
			//pull up normal weapon
			CGNS A 2 
			{
				A_Overlay(SpinLayer,"Null");
				A_TakeInventory("SpinLoopFrame",32767);
				A_TakeInventory("SpinUpCount",32767);
				A_TakeInventory("FrameTimeLeft",32767);
				A_PlaySound("Doom4/Weapon/Chaingun/UnreadyTurret",5,1);
				A_TakeInventory("MobileTurretActive",1);
				A_WeaponOffset(4,20,WOF_ADD);
			}
			CGNS AAA 2 A_WeaponOffset(4,20,WOF_ADD);
			Goto Ready;
			
			
		FromNormalToGatlingRotator:	
			//CGNS A 0 A_PrintBold("From normal to GatlingRotator")
			//pull down
			CGNS "#####" 1 A_WeaponOffset(8,16,WOF_ADD); //+24 +64
			CGRS A 25 
			{
				A_Overlay(SpinLayer,"Null");
				A_TakeInventory("SpinLoopFrame",32767);
				A_TakeInventory("SpinUpCount",32767);
				A_TakeInventory("FrameTimeLeft",32767);
				A_PlaySound("Doom4/Weapon/Chaingun/SwitchToRotator",5,1);
				A_GiveInventory("GatlingRotatorActive",1);
			}
			//pull up
			CGRS AAAAAAAAAA 1 A_WeaponOffset(-4,-8,WOF_ADD);
			Goto Ready;
			
		FromGatlingRotatorToMobileTurret:	
			//CGNS A 0 A_PrintBold("From GatlingRotator to turret ")
			//pull down
			CGRS AAAAA 1 A_WeaponOffset(8,16,WOF_ADD); //+24 +64
			CT2S A 25 
			{
				A_Overlay(SpinLayer,"Null");
				A_TakeInventory("SpinLoopFrame",32767);
				A_TakeInventory("SpinUpCount",32767);
				A_TakeInventory("FrameTimeLeft",32767);
				A_PlaySound("Doom4/Weapon/Chaingun/SwitchToTurret",5,1);
				A_TakeInventory("GatlingRotatorActive",1);
				A_GiveInventory("MobileTurretActive",1);
			}
			//pull up
			CT2S AAAAAAAAAA 1 A_WeaponOffset(-4,-8,WOF_ADD);
			Goto Ready;
		FromMobileTurretToGatlingRotator:
			//CGNS A 0 A_PrintBold("From turret to GatlingRotator")
			//pull down
			CT2S AAAAA 1 A_WeaponOffset(8,16,WOF_ADD); //+24 +64
			CGSS A 25 
			{
				A_Overlay(SpinLayer,"Null");
				A_TakeInventory("SpinLoopFrame",32767);
				A_TakeInventory("SpinUpCount",32767);
				A_TakeInventory("FrameTimeLeft",32767);
				A_PlaySound("Doom4/Weapon/Chaingun/SwitchToRotator",5,1);
				A_TakeInventory("MobileTurretActive",1);
				A_GiveInventory("GatlingRotatorActive",1);
			}
			//pull up
			CGRS AAAAAAAAAA 1 A_WeaponOffset(-4,-8,WOF_ADD);
			Goto Ready;
	}
}

//----------------------------------------------------

Class D4BulletPuffTurret : D4BulletPuffGibDistance
{
	Default
	{
		D4BulletPuffGibDistance.Range D4Chaingun.GibRange;
		Damage D4Chaingun.MobileTurretDamage;
	}
}

//----------------------------------------------------
// Smoke
Class CGSmokeSpawner : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION;
		+NOTIMEFREEZE;
	}
    States
    {
    Spawn:
        TNT1 A 1;
	Death:
		TNT1 A 0 A_SpawnItemEx("CGSmoke",0,random(1,-1),0,0,0,frandom(0.1,0.25),0,32);
		TNT1 A 2;
        Stop;
    }
}

Class CGSmoke : Actor 
{
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Alpha 0.4;
	}
	States
	{
	Spawn:
	   TNT1 A 0 NoDelay A_Jump(256,random(1,2));	//to define wich graphic will use
	   X201 EF 0 { return ResolveState("Cont"); }
	Cont:
	   "####" "#" 0 A_SetScale(frandom(0.03,0.035));
	   "####" "###" 2 
	   {
			A_SetScale(Scale.X+0.003);
			A_FadeOut(frandom(0.015,0.049));
	   }
	Looper:
	   "####" "#" 0 A_SetScale(Scale.X+0.003);
	   "####" "#" 2 A_FadeOut(0.015);
	   Loop;
	}
}

//----------------------------------------------------

Class GatlingRotatorExplosivePuff : Actor 
{
	Default 
	{
		Projectile;
		+FORCEXYBILLBOARD
		+NOINTERACTION
		+NOBLOCKMAP
		+ALWAYSPUFF
		+SKYEXPLODE
		+PUFFONACTORS
		+PUFFGETSOWNER
		-ALLOWPARTICLES
		+ROLLSPRITE
		+FORCERADIUSDMG
		Scale 0.1;
		Alpha 1.0;
		Decal "D4ExploScorchChaingun";
	}
	
	override void PostBeginPlay()
	{
		roll = random(0,359);
		if (random(0,1)) bSPRITEFLIP = true;
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		X132 A 0 NODELAY A_Explode(32,36,0,0,24);
		X132 AABBCC 1 Bright A_SetScale(Scale.X+0.02);
		X132 DEFGHIJKLMNOPQR 2 Bright
		{
			A_FadeOut(0.15);
			A_SetScale(Scale.X+0.025);
		}
		Stop;
	}
}


Class NoPuff : Actor 
{
	Default 
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}
Class Sovietsaurus : Inventory
{	Default { Inventory.MaxAmount 90;	Inventory.InterhubAmount 0;	}}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Mod tokens
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

Class GatlingRotatorActive :	Inventory	{ Default { +INVENTORY.UNDROPPABLE }}
Class MobileTurretActive : 		Inventory	{ Default { +INVENTORY.UNDROPPABLE }}
Class MobileTurretArmed : 		Inventory	{ Default { Inventory.InterhubAmount 0; }}
Class ChaingunFireTracker : 	Inventory	{ Default { Inventory.MaxAmount 10;		Inventory.InterhubAmount 0; }}
Class SpinUpCount :				Inventory	{ Default { Inventory.MaxAmount 1000;	Inventory.InterhubAmount 0; }}
Class SpinLoopFrame :			Inventory	{ Default { Inventory.MaxAmount 3;		Inventory.InterhubAmount 0; }}
Class FrameTimeLeft :			Inventory	{ Default { Inventory.MaxAmount 4;		Inventory.InterhubAmount 0; }}
Class FireDelay :				Inventory	{ Default { Inventory.MaxAmount 100;	Inventory.InterhubAmount 0; }}
Class FlashFrame :				Inventory	{ Default { Inventory.InterhubAmount 0; }}



//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Casing
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
Class ChaingunCasingSpawner : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 22;
	const YOff = 10;
	const ZOff = 34;
	double pos;
	int t;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		/*RenderStyle "Add";
		Alpha 0.1*/
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			//Grab the pitch...
			if (master) { pitch = master.pitch; }
			
			// And set a multiplier for taking from the distance so it actually goes well with the gun.
			
			if (pitch > 0) //Looking down
			{	pos = (sin(pitch) * 12);	}
			else //Looking up
			{	pos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			
			if (GetCvar("D4D_Casings"))
			{
				if (GetCvar("D4D_SilentCasings"))
				{	A_SpawnItemEx("D4BulletCasingSilent",0,0,0,frandom(0.5,-0.5),frandom(1,3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION);	}
				else
				{	A_SpawnItemEx("D4BulletCasing",0,0,0,frandom(0.5,-0.5),frandom(1,3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION);	}
			}
		}
		Stop;
	Nothing:
		TNT1 A 1;
		Stop;
	}
}

Class TurretCasingSpawner : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 22;
	const YOff = 0;
	const ZOff = 34;
	double pos;
	int t;
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			//Grab the pitch...
			if (master) { pitch = master.pitch; }
			
			// And set a multiplier for taking from the distance so it actually goes well with the gun.
			
			if (pitch > 0) //Looking down
			{	pos = (sin(pitch) * 12);	}
			else //Looking up
			{	pos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			
			if (GetCvar("D4D_Casings"))
			{
				if (GetCvar("D4D_SilentCasings"))
				{	
					A_SpawnItemEx("D4BulletCasingSilent",0,14,0,frandom(0.5,-0.5),frandom(1,3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION,128);
					A_SpawnItemEx("D4BulletCasingSilent",0,-14,0,frandom(0.5,-0.5),frandom(-1,-3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION,128);
				}
				else
				{
					A_SpawnItemEx("D4BulletCasing",0,14,0,frandom(0.5,-0.5),frandom(1,3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION,128);
					A_SpawnItemEx("D4BulletCasing",0,-14,0,frandom(0.5,-0.5),frandom(-1,-3),frandom(0.5,1.4),0,SXF_NOCHECKPOSITION,128);
				}
			}
		}
		Stop;
	Nothing:
		TNT1 A 1;
		Stop;
	}
}