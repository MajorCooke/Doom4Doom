Class D4RequirementChecker
{
	static bool CheckRequirements(Class<D4UpgradeItem2> Item)
	{
		
	}
}

Class ItemReqStore
{
	
}

Class D4UpgradeItemReqs1
{
	static clearscope bool, Array<Class<Inventory> >, Array<Int> CheckRequiredItems(Actor mo, class<Inventory> Item) const
	{
		Array<Class<Inventory> > Items; Items.Clear();
		Array<Int> Amounts; Amounts.Clear();
		
		if (!mo || !Item)	return false, Items, Amounts;
		
		
		if (Item == "SomeUpgrade1")
		{
			let inv = mo.FindInventory("SomeUpgrade1Req1");
		}
		
		return ret;
	}
}

Class D4UpgradeItemReqs
{
	Array<Class<Inventory> > Items;
	Array<Int> Amounts;
	
	static D4UpgradeItemReqs Setup(Class<Inventory> Item)
	{
		if (!Item)	return null;
		let req = new('D4UpgradeItemReqs');
		if (req)	
		{
			req.Init();
			req.BuildRequirements(Item);
		}
		return req;
	}
	
	protected void Init()
	{
		Items.Clear();
		Amounts.Clear();
	}
	
	private void AddReq(Class<Inventory> Item, int Amount = 1)
	{
		if (!Item || Amount < 1)	return;
		Items.Push(Item);
		Amounts.Push(Amount);
	}
	
	void BuildRequirements(Class<Inventory> Item)
	{
		if (Item == 'SomeUpgrade1')
		{
			AddReq('SomeUpgrade1Req1');
			AddReq('SomeUpgrade1Req1');
		}
	}
}

Class D4UpgradeItem2 : D4DKeeperItem
{
	enum EUpgradeTypes
	{
		DUFT_Weapon = 1,
		DUFT_Equipment,
		DUFT_Powerup
	};

	Class<Inventory> Item;		// The item to give upon collecting.
	Class<D4UpgradeItem2> Next;	// The next item for menus.
	int UpgradeType;			// Is it for a weapon, equipment or powerup?
	
	Property Item: Item;
	
	
}