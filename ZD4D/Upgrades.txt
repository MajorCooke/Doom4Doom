//#include "ZD4D/UpgradeRework.txt"

//==============================================================================
// Upgrades
// 
// Note: This system is old and outdated. This will eventually be reworked.
//==============================================================================
Class UpgradeRequirementChecker
{
	const Total = 4;	
	static int CheckItem(Class<UpgradeItem> Item, Actor Plr)
	{		
		if (!Item || !Plr)	return -1;
		
		let def = GetDefaultByType(Item);
		
		// Already has it.
		if (Plr.CountInv(Item) >= def.MaxAmount)
			return -1;
		
		// Missing the gun.
		if (def.GunNeeded && !Plr.FindInventory(def.GunNeeded))
			return -1;
		
		String Reqs[Total];
		int ReqQ[Total];
		
		Reqs[0] = def.Req1;	ReqQ[0] = def.ReqQ1;
		Reqs[1] = def.Req2;	ReqQ[1] = def.ReqQ2;
		Reqs[2] = def.Req3;	ReqQ[2] = def.ReqQ3;
		Reqs[3] = def.Req4;	ReqQ[3] = def.ReqQ4;
		int Requirements = 0;
		for (int i = 0; i < Reqs.Size(); i++)
		{
			Class<Inventory> Check = Reqs[i];
			if (!Check)
			{
				if (Reqs[i].Length() > 0)
					Console.Printf("Bad item: %s", Reqs[i]);
				continue;
			}
			let inv = Plr.FindInventory(Check);
			if (!inv || inv.Amount < ReqQ[i])
				Requirements++;
		}
		return Requirements;
	}
}

Class D4DKeeperItem : Inventory 
{
	Default
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.NEVERRESPAWN
		+INVENTORY.BIGPOWERUP
	}
	
	// NEVER let this item be picked up raw.
	override bool TryPickup(in out Actor toucher)
	{
		if (!toucher || D4DHandler.IsUpgradeBlacklisted(GetClass()))
			return false;
			
		return Super.TryPickup(toucher);
	}
}

Class UpgradeItem : D4DKeeperItem
{
	int Cost, Cost2, Cost3, Cost4;
	int Quantity, Q2, Q3, Q4;
	bool Tiered;
	String Req1, Req2, Req3, Req4;		// Required Item
	int ReqQ1, ReqQ2, ReqQ3, ReqQ4;		// Requirement Quantity
	String Attach1, Attach2, Attach3, Attach4;
	int Attamt1, Attamt2, Attamt3, Attamt4;
	String Desc, Desc1, Desc2, Desc3, Desc4;
	Class<Doom4Weapon> GunNeeded;
	property GunNeeded: GunNeeded;
	property Desc: Desc;
	property Desc1: Desc1;
	property Desc2: Desc2;
	property Desc3: Desc3;
	property Desc4: Desc4;
	property Cost: Cost;
	property Cost2: Cost2;
	property Cost3: Cost3;
	property Cost4: Cost4;
	property Quantity: Quantity;
	property Quantity2: Q2;
	property Quantity3: Q3;
	property Quantity4: Q4;
	property Tiered: Tiered;

	property Attached1: Attach1, Attamt1;
	property Attached2: Attach2, Attamt2;
	property Attached3: Attach3, Attamt3;
	property Attached4: Attach4, Attamt4;

	property Req1: Req1, ReqQ1;
	property Req2: Req2, ReqQ2;
	property Req3: Req3, ReqQ3;
	property Req4: Req4, ReqQ4;
	
	// ONLY USE ONE OF THESE.
	// This is simply for the sake of saving copy/paste extensions, but if
	// something needs to be more thorough, use the Req# properties instead.
	property Requirements1: Req1, ReqQ1;
	property Requirements2: Req1, ReqQ1, Req2, ReqQ2;
	property Requirements3: Req1, ReqQ1, Req2, ReqQ2, Req3, ReqQ3;
	property Requirements4: Req1, ReqQ1, Req2, ReqQ2, Req3, ReqQ3, Req4, ReqQ4;
	Default
	{
		UpgradeItem.Cost -1;
		UpgradeItem.Cost2 -1;
		UpgradeItem.Cost3 -1;
		UpgradeItem.Cost4 -1;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 -1;
		UpgradeItem.Quantity3 -1;
		UpgradeItem.Quantity4 -1;
		UpgradeItem.Tiered false;
		UpgradeItem.Req1 "", 1;
		UpgradeItem.Req2 "", 1;
		UpgradeItem.Req3 "", 1;
		UpgradeItem.Req4 "", 1;
		UpgradeItem.Attached1 "", 0;
		UpgradeItem.Attached2 "", 0;
		UpgradeItem.Attached3 "", 0;
		UpgradeItem.Attached4 "", 0;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.KEEPDEPLETED;
	}
	
	virtual void UpdateItem() {}
	virtual void PrintDesc()
	{
		if (Desc.Length() < 1)
			Desc = StringTable.Localize("$"..GetClassName());
			
		if (Owner)
			Owner.A_Print(Desc);
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		String badItems = "";
		Class<Inventory> check = Req1;
		if (Req1.Length() > 0 && !check) { badItems = badItems..Req1.." ";	Req1 = ""; }
		check = Req2;
		if (Req2.Length() > 0 && !check) { badItems = badItems..Req2.." ";	Req2 = ""; }
		check = Req3;
		if (Req3.Length() > 0 && !check) { badItems = badItems..Req3.." ";	Req3 = ""; }
		check = Req4;
		if (Req4.Length() > 0 && !check) { badItems = badItems..Req4.." ";	Req4 = ""; }
		InterhubAmount = MaxAmount;
		
		if (badItems.Length() > 0)
			Console.Printf("Bad item requirements in %s: %s", GetClassName(), badItems);
	}
	
	override bool HandlePickup(Inventory item)
	{
		bool good = Super.HandlePickup(item);
		if (good)
		{
			let inv = UpgradeItem(FindInventory(GetClass()));
			if (inv)	inv.UpdateItem();
		}
		return good;
	}
	
}

Class UpgradeItemSpecial : UpgradeItem
{
	Class<Inventory> RealItem;
	Class<Inventory> SelfName;
	property RealItem: RealItem;
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		SelfName = GetClass();
	}
	
	override void UpdateItem()
	{
		if (!Owner || GetClass() == "UpgradeItemSpecial")
			return;
			
		if (RealItem && SelfName)
		{
			Owner.A_SetInventory(RealItem,Owner.CountInv(SelfName));
		}
	}
	
	override void DepleteOrDestroy()
	{
		if (GetClass() == "UpgradeItemSpecial")
		{	Super.DepleteOrDestroy(); return;	}
		if (Owner)
			Owner.A_SetInventory(RealItem,0);
		Super.DepleteOrDestroy();
	}
	
	override void OnDestroy()
	{
		if (Owner)
			Owner.A_SetInventory(RealItem,0);
		Super.OnDestroy();
	}
}

//Strangely, this doesn't work the way it's supposed to. Oh well.
Class D4HealthUpgrade : UpgradeStamina
{
	Default 
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 1;
		Inventory.MaxAmount 100;
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		if (!toucher.player)
			return false;
			
		int amt = 0;
		
		int inv = toucher.stamina;
		int in2 = toucher.CountInv("D4Stamina");
		
		toucher.stamina = Max(inv, in2);
		if (toucher.stamina >= MaxAmount)
			toucher.stamina = MaxAmount;
			
		toucher.GiveBody (-100);
		GoAwayAndDie();
		return true;
	}
}

Class CashPercentBonus : UpgradeItem
{
	Default 
	{
		UpgradeItem.Cost 3000;
		UpgradeItem.Cost2 7500;
		UpgradeItem.Cost3 12000;
		UpgradeItem.Cost4 20000;
		UpgradeItem.Quantity 10;
		UpgradeItem.Quantity2 20;
		UpgradeItem.Quantity3 30;
		UpgradeItem.Quantity4 40;
		Inventory.MaxAmount 40;
		Inventory.InterhubAmount 40;
		+INVENTORY.IGNORESKILL
	}
}
 


//==============================================================================
//==============================================================================
//	Weapon Upgrades
//==============================================================================
//==============================================================================
Class AssaultRifleUpgradeBase : UpgradeItem 			{ Default { UpgradeItem.GunNeeded "D4AssaultRifle"; } }
Class AssaultRifleMod1 : AssaultRifleUpgradeBase 		{ Default {	UpgradeItem.Cost 3000;	}}	// Scope mod
Class AssaultRifleMod2 : AssaultRifleUpgradeBase 		{ Default {	UpgradeItem.Cost 4000;	}}	// mini missiles mod
Class BFGUpgradeBase : UpgradeItem 						{ Default { UpgradeItem.GunNeeded "D4BFG"; } }
Class BFGUpgrade1 : BFGUpgradeBase						{ Default {	UpgradeItem.Cost 10000;	}}	// Ammo Capacity
Class BFGUpgrade2 : BFGUpgradeBase 						{ Default { UpgradeItem.Cost 20000; }} 	// Alt Fire
Class BFGUpgrade3 : BFGUpgradeBase 						{ Default { UpgradeItem.Cost 10000; }}	// Projectile; Speed
Class BFGUpgrade4 : BFGUpgradeBase 						{ Default { UpgradeItem.Cost 10000; }}	// Redirector
Class CarrionUpgradeBase : UpgradeItem 					{ Default { UpgradeItem.GunNeeded "D4CarrionCannon"; } }
Class CarrionUpgradePickup : CarrionUpgradeBase 		{ Default { UpgradeItem.Cost 6666; }}
Class CarrionUpgradeAmmo : CarrionUpgradeBase 			{ Default { UpgradeItem.Cost 6666; }}
Class CarrionUpgradeStun : CarrionUpgradeBase 			{ Default { UpgradeItem.Cost 6666; }}
Class CarrionUpgradeTime : CarrionUpgradeBase 			{ Default { UpgradeItem.Cost 6666; }}
Class ChaingunUpgradeBase : UpgradeItem 				{ Default { UpgradeItem.GunNeeded "D4Chaingun"; } }
Class ChaingunMod1 : ChaingunUpgradeBase				{ Default { UpgradeItem.Cost 6000; }}	// rotator
Class ChaingunMod2 : ChaingunUpgradeBase				{ Default { UpgradeItem.Cost 8000; }}	// turret
Class GaussCannonUpgradeBase : UpgradeItem 				{ Default { UpgradeItem.GunNeeded "D4GaussCannon"; } }
Class GaussCannonMod1 : GaussCannonUpgradeBase 			{ Default { UpgradeItem.Cost 8000; }}	// precision shot
Class GaussCannonMod2 : GaussCannonUpgradeBase			{ Default { UpgradeItem.Cost 10000; }}	// siege mode
Class LGUpgradeBase : UpgradeItem 						{ Default { UpgradeItem.GunNeeded "D4LightningGun"; } }
Class LGUpgradeRange : LGUpgradeBase					{ Default { UpgradeItem.Cost 4000; }}
Class LGUpgradeAmmo : LGUpgradeBase						{ Default { UpgradeItem.Cost 2000; }}
Class LGUpgradeDamage : LGUpgradeBase					{ Default { UpgradeItem.Cost 9000; }}
Class LGUpgradeAltFire : LGUpgradeBase					{ Default { UpgradeItem.Cost 9000; }}
Class PistolUpgradeBase : UpgradeItem 					{ Default { UpgradeItem.GunNeeded "D4Pistol"; } }
Class PistolUpgradeAutomatic : PistolUpgradeBase		{ Default { UpgradeItem.Cost 2000; }}
Class PistolUpgradeAltDamage : PistolUpgradeBase		{ Default { UpgradeItem.Cost 4000; }}
Class PistolUpgradeAltCharge : PistolUpgradeBase		{ Default { UpgradeItem.Cost 4000; }}
Class PistolUpgradeDamage : PistolUpgradeBase			{ Default { UpgradeItem.Cost 2500; }}
Class PistolUpgradeLance : PistolUpgradeBase			{ Default { UpgradeItem.Cost 12000; UpgradeItem.Requirements2 "PistolUpgradeAltCharge", 1, "PistolUpgradeAltDamage", 1; }}
Class PlasmaRifleUpgradeBase : UpgradeItem 				{ Default { UpgradeItem.GunNeeded "D4PlasmaRifle"; } }
Class PlasmaRifleMod1 : PlasmaRifleUpgradeBase			{ Default { UpgradeItem.Cost 5000; }}	// heat shot upgrade
Class PlasmaRifleMod2 : PlasmaRifleUpgradeBase 			{ Default { UpgradeItem.Cost 3000; }}	// electric grenade upgrade
Class RepeaterUpgradeBase : UpgradeItem 				{ Default { UpgradeItem.GunNeeded "D4Repeater"; } }
Class RepeaterUpgradePiercing : RepeaterUpgradeBase 	{ Default { UpgradeItem.Cost 4000; }}	// Upgrade 1: Bullets pierce 1 Monster;
Class RepeaterUpgradeDamage : RepeaterUpgradeBase 		{ Default { UpgradeItem.Cost 4000; }}	// Upgrade 2: increased primary fire damage
Class RepeaterUpgradeAltDamage : RepeaterUpgradeBase 	{ Default { UpgradeItem.Cost 3000; }}	// Upgrade 3: increased alt fire burn damage
Class RepeaterUpgradeAltAmmo : RepeaterUpgradeBase		{ Default { UpgradeItem.Cost 3000; }}	// Upgrade 4: Decrease ammo requirement for alt fire
Class RocketLauncherUpgradeBase : UpgradeItem 			{ Default { UpgradeItem.GunNeeded "D4RocketLauncher"; } }
Class RocketLauncherMod1 : RocketLauncherUpgradeBase	{ Default { UpgradeItem.Cost 5000; }}	// detonate
Class RocketLauncherMod2 : RocketLauncherUpgradeBase 	{ Default { UpgradeItem.Cost 5000; }}	// lock on
Class ShotgunUpgradeBase : UpgradeItem					{ Default { UpgradeItem.GunNeeded "D4Shotgun"; } }
Class ShotgunMod1 : ShotgunUpgradeBase 					{ Default { UpgradeItem.Cost 3000; }}	// Triple shot
Class ShotgunMod2 : ShotgunUpgradeBase 					{ Default { UpgradeItem.Cost 3000; }}	// grenade mod
Class StaticUpgradeBase : UpgradeItem 					{ Default { UpgradeItem.GunNeeded "D4StaticRifle"; } }
Class StaticUpgrade1 : StaticUpgradeBase 				{ Default { UpgradeItem.Cost 2500; }}
Class StaticUpgrade2 : StaticUpgradeBase 				{ Default { UpgradeItem.Cost 5000;	UpgradeItem.Requirements1 "StaticUpgrade1", 1; }}
Class StaticUpgrade3 : StaticUpgradeBase 				{ Default { UpgradeItem.Cost 7500;	UpgradeItem.Requirements1 "StaticUpgrade2", 1; }}
Class StaticUpgrade4 : StaticUpgradeBase 				{ Default { UpgradeItem.Cost 10000;	UpgradeItem.Requirements1 "StaticUpgrade3", 1; }}
Class SSGUpgradeBase : UpgradeItem 						{ Default { UpgradeItem.GunNeeded "D4SuperShotgun"; } }
Class SSGUpgrade1 : SSGUpgradeBase						{ Default { UpgradeItem.Cost 2000; }}
Class SSGUpgrade2 : SSGUpgradeBase						{ Default { UpgradeItem.Cost 2500; }}
Class SSGUpgrade3 : SSGUpgradeBase						{ Default { UpgradeItem.Cost 4000; }}
Class SSGUpgrade4 : SSGUpgradeBase						{ Default { UpgradeItem.Cost 10000;	UpgradeItem.Requirements2 "SSGUpgrade1", 1, "SSGUpgrade2", 1; }}
Class VortexUpgradeBase : UpgradeItem 					{ Default { UpgradeItem.GunNeeded "D4VortexRifle"; } }
Class VortexUpgradeDamage : VortexUpgradeBase 			{ Default { UpgradeItem.Cost 4000; }}
Class VortexUpgradeAmmo : VortexUpgradeBase 			{ Default { UpgradeItem.Cost 6000; }}
Class VortexUpgradeAltSpeed : VortexUpgradeBase 		{ Default { UpgradeItem.Cost 2500; }}
Class VortexUpgradeAltPierce : VortexUpgradeBase 		{ Default { UpgradeItem.Cost 3500; }}
Class CrucibleUpgradeBase : UpgradeItem					{ Default { UpgradeItem.GunNeeded "DECrucible";	}	}
Class CrucibleUpgradeCleave : CrucibleUpgradeBase		{ Default { UpgradeItem.Cost 30000; }}
Class CrucibleUpgradeRange : CrucibleUpgradeBase		{ Default { UpgradeItem.Cost 20000;	}}
Class CrucibleUpgradeSyphon : CrucibleUpgradeBase		{ Default { UpgradeItem.Cost 40000;	}}
Class CrucibleUpgradeBattery : CrucibleUpgradeBase		{ Default { UpgradeItem.Cost 40000;	}}

//==============================================================================
//==============================================================================
//	Suit Upgrades
//==============================================================================
//==============================================================================

Class ProtectionBonus : UpgradeItem
{
	Default
	{
		UpgradeItem.Cost 5000;
		UpgradeItem.Cost2 7500;
		UpgradeItem.Cost3 10000;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 2;
		UpgradeItem.Quantity3 3;
		Inventory.MaxAmount 3;
	}
	
	override void UpdateItem()
	{
		if (Owner)
		{
			int amt = Amount;
			if (amt > 0)	{ Owner.A_SetInventory("ProtectionBonus1",1);	}
			if (amt > 1)	{ Owner.A_SetInventory("ProtectionBonus2",1);	}
			if (amt > 2)	{ Owner.A_SetInventory("ProtectionBonus3",1);	}
		}
	}
	
	override void Travelled()
	{
		
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			Owner.A_SetInventory("ProtectionBonus1",0);
			Owner.A_SetInventory("ProtectionBonus2",0);
			Owner.A_SetInventory("ProtectionBonus3",0);
		}
		Super.DepleteOrDestroy();
	}
}

// Environment protection
Class ProtectionBonus1 : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 	1.0;
		DamageFactor "Drowning",0.5;
		DamageFactor "Slime", 	0.5;
		DamageFactor "Fire", 	0.5;	// for lava
		DamageFactor "Crush", 	0.5;
		DamageFactor "Falling", 0.0;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Inventory.InterhubAmount 1;
		Inventory.MaxAmount 1;
		Powerup.Duration 1000000;
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		EffectTics = 1000000;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive)
		{
			if (source && (source is 'ExplosiveBarrel' || GetReplacee(source.GetClass()) is 'ExplosiveBarrel') ||
				(inflictor && (inflictor is 'ExplosiveBarrel' || GetReplacee(inflictor.GetClass()) is 'ExplosiveBarrel')))
			{
				newdamage = -1;
				return;
			}
		}
		Super.ModifyDamage(damage, damageType, newdamage, passive, inflictor, source, flags);
	}
}

// Self Protection
// For this, we need to bear in mind 
Class ProtectionBonus2 : PowerProtection
{
	bool reset;
	double SDF;
	Default 
	{
		DamageFactor "Normal", 1.0;
		SelfDamageFactor 0.5;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Inventory.InterhubAmount 1;
		Inventory.MaxAmount 1;
		Powerup.Duration 1000000;
	}
	
	override void InitEffect()
	{
		Super.InitEffect();
		if (!Owner)	return;
		SDF = Owner.SelfDamageFactor;
		Owner.SelfDamageFactor *= SelfDamageFactor;
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		EffectTics = 1000000;
		
		if (SelfDamageFactor <= 0.0)
		{
			if (SDF != Owner.SelfDamageFactor && Owner.SelfDamageFactor > 0.0)
				SDF = Owner.SelfDamageFactor;
		}
	}
	/*
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source)
	{
		if (passive && damage > 0)
		{
			String s1, s2; s1 = "Null"; s2 = s1;
			if (inflictor)	s1 = inflictor.GetClassName();
			if (source)		s2 = source.GetClassName();
			Console.Printf("%s %s", s1, s2);
		}
		Super.ModifyDamage(damage, damageType, damage, passive, inflictor, source);
	}
	*/
	
	override void EndEffect()
	{
		if (Owner)
		{
			if (Owner.SelfDamageFactor <= 0.0 || SelfDamageFactor <= 0.0)
				Owner.SelfDamageFactor = SDF;
			else
				Owner.SelfDamageFactor /= SelfDamageFactor;
		}
		Super.EndEffect();
	}
}

// AoE damage protection
Class ProtectionBonus3 : PowerProtection
{
	double RDF;
	Default 
	{
		DamageFactor "Normal", 1.0;
		RadiusDamageFactor 0.5;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Powerup.Duration 1000000;
		Inventory.InterhubAmount 1;
		Inventory.MaxAmount 1;
	}
	
	override void InitEffect()
	{
		Super.InitEffect();
		if (!Owner)	return;
		
		RDF = Owner.RadiusDamageFactor;
		Owner.RadiusDamageFactor *= RadiusDamageFactor;
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		EffectTics = Default.EffectTics;
		
		if (RadiusDamageFactor <= 0.0)
		{
			if (RDF != Owner.RadiusDamageFactor && Owner.RadiusDamageFactor > 0.0)
				RDF = Owner.RadiusDamageFactor;
		}
	}
	
	override void EndEffect()
	{
		if (Owner)
		{
			if (RadiusDamageFactor <= 0.0 || Owner.RadiusDamageFactor <= 0.0)
				Owner.RadiusDamageFactor = RDF;
			else
			{
				Owner.RadiusDamageFactor /= RadiusDamageFactor;
				if (Owner.RadiusDamageFactor > 1.0)
					Owner.RadiusDamageFactor = RDF;
			}
		}
		Super.EndEffect();
	}
}

Class D4HigherJump : D4DKeeperItem {}
Class D4MultiJump : D4DKeeperItem 	{ Default { Inventory.MaxAmount 3; Inventory.InterhubAmount 3; }}
Class D4AirControl : D4DKeeperItem {}
Class D4Dash : D4DKeeperItem {}

Class D4AirUpgrade : UpgradeItem
{	
	Default
	{
		UpgradeItem.Cost 6000;
		UpgradeItem.Cost2 8000;
		UpgradeItem.Cost3 10000;
		UpgradeItem.Cost4 12000;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 2;
		UpgradeItem.Quantity3 3;
		UpgradeItem.Quantity4 4;
		UpgradeItem.Desc1 "$AirUpgrade1";
		UpgradeItem.Desc2 "$AirUpgrade2";
		UpgradeItem.Desc3 "$AirUpgrade3";
		UpgradeItem.Desc4 "$AirUpgrade4";
		Inventory.MaxAmount 4;
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("D4AirUpgrade");
		Switch (amt)
		{
			Default:
			Case 4: Desc = Desc4;	break;
			Case 3: Desc = Desc3;	break;
			Case 2: Desc = Desc2;	break;
			Case 1: Desc = Desc1;	break;
		}
		Super.PrintDesc();
	}
	
	override void UpdateItem()
	{
		if (Owner)
		{
			int amt = Owner.CountInv("D4AirUpgrade");
			Owner.A_SetInventory("D4HigherJump", 	((amt > 0) ? 1 : 0));
			Owner.A_SetInventory("D4MultiJump",		((amt > 1) ? 3 : 2));
			Owner.A_SetInventory("D4AirControl",	((amt > 2) ? 1 : 0));
			Owner.A_SetInventory("D4Dash",			((amt > 3) ? 1 : 0));
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			Owner.A_SetInventory("D4HigherJump",0);
			Owner.A_SetInventory("D4MultiJump",2);
			Owner.A_SetInventory("D4AirControl",0);
			Owner.A_SetInventory("D4Dash",0);
		}
		Super.DepleteOrDestroy();
	}
}

Class D4Stamina : UpgradeItem
{ 
	Default 
	{
		UpgradeItem.Cost 5000;
		UpgradeItem.Cost2 10000;
		UpgradeItem.Cost3 20000;
		UpgradeItem.Quantity 25;
		UpgradeItem.Quantity2 50;
		UpgradeItem.Quantity3 100;
		UpgradeItem.Desc1 "+25 Max Health";
		UpgradeItem.Desc2 "+50 Max Health";
		UpgradeItem.Desc3 "+100 Max Health";
		UpgradeItem.Desc4 "WHAAAAAAAT!?";
		Inventory.MaxAmount 100;
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("D4Stamina");
			 if (amt <= 25) 	Desc = Desc1;
		else if (amt <= 50)		Desc = Desc2;
		else					Desc = Desc3;
		
		Super.PrintDesc();
	}
	override void UpdateItem()
	{
		if (Owner)
		{
			Owner.A_SetInventory("D4HealthUpgrade",0);
			Owner.A_SetInventory("D4HealthUpgrade",Owner.CountInv("D4Stamina"));
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner && Owner.player)
		{
		//	Owner.player.mo.stamina -= Owner.CountInv("D4HealthUpgrade"); 
			Owner.stamina -= Owner.CountInv("D4HealthUpgrade"); 
			Owner.A_SetInventory("D4HealthUpgrade",0);
		}
		Super.DepleteOrDestroy();
	}
}
Class D4ArmorCapRaiser : UpgradeItem
{ 
	Default 
	{
		UpgradeItem.Cost 5000;
		UpgradeItem.Cost2 10000;
		UpgradeItem.Cost3 15000;
		UpgradeItem.Quantity 25;
		UpgradeItem.Quantity2 50;
		UpgradeItem.Quantity3 100;
		UpgradeItem.Desc1 "Armor Capacity +25\nChainsaw Alt: + 0 to 2 Armor Shards";
		UpgradeItem.Desc2 "Armor Capacity +50\nChainsaw Alt: + 0 to 4 Armor Shards";
		UpgradeItem.Desc3 "Armor Capacity +100\nChainsaw Alt guarantees minimum 2 armor shards";
		Inventory.MaxAmount 100;
	}
	
	override void PrintDesc()
	{
		if (Owner)
		{
			int amt = Owner.CountInv("D4ArmorCapRaiser");
				 if (amt >= 100)	Desc = Desc3;
			else if (amt >= 50)		Desc = Desc2;
			else					Desc = Desc1;
		}
		Super.PrintDesc();
	}
}

Class D4CrateUpgrade : UpgradeItem			
{ 
	Default 
	{
		UpgradeItem.Cost 999;
		UpgradeItem.Cost2 9999;
		UpgradeItem.Cost3 19999;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 2;
		UpgradeItem.Quantity3 3;
		UpgradeItem.Desc1 "Heavy Crates\nGuarantees larger quality items";
		UpgradeItem.Desc2 "Sensor Crates\nCrates are more situationally aware";
		UpgradeItem.Desc3 "Weapon Crates\nCrates may contain weapons";
		UpgradeItem.Desc4 "This shouldn't have happened...";
		Inventory.MaxAmount 3; 
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("D4CrateUpgrade");
			 if (amt == 1) 		Desc = Desc1;
		else if (amt == 2)		Desc = Desc2;
		else if (amt == 3)		Desc = Desc3;
		else if (amt == 4)		Desc = Desc4;
		else					Desc = "";
		
		Super.PrintDesc();
	}
}

//==============================================================================
//==============================================================================
//	Powerup Upgrades
//==============================================================================
//==============================================================================

Class D4RegenUpgrade1 : UpgradeItem 			{ Default { UpgradeItem.Cost 12000; }}	// Armor Regen
Class D4RegenUpgrade2 : UpgradeItem 			{ Default { UpgradeItem.Cost 15000;	
									UpgradeItem.Requirements1 "D4RegenUpgrade1", 1; }}	// Dual Regen
Class D4RegenUpgrade3 : UpgradeItem 			{ Default { UpgradeItem.Cost 25000; }}	// Double Regen Rate
Class D4RegenUpgrade4 : UpgradeItem 			{ Default { UpgradeItem.Cost 15000; }}	// Max health +100 (Soulsphere Only)
Class D4MegachargeUpgrade1 : UpgradeItem		{ Default { UpgradeItem.Cost 10000; }}	// +1% resist, max 25%
Class D4MegachargeUpgrade2 : UpgradeItem		{ Default { UpgradeItem.Cost 20000; }}	// time stop
Class D4DoomDollUpgrade1 : UpgradeItem			{ Default { UpgradeItem.Cost 15000; }}	// + run & jump speed on use
Class D4DoomDollUpgrade2 : UpgradeItem			{ Default { UpgradeItem.Cost 20000; }}	// powerful explosion on fist bump
Class D4RuneUpgrade1 : UpgradeItem				{ Default { UpgradeItem.Cost 5000; }}	// Identifiable runes
Class D4RuneUpgrade2 : UpgradeItem				{ Default { UpgradeItem.Cost 15000; }}	// same type demon runes refresh current rune
Class D4RuneUpgrade3 : UpgradeItem				{ Default { UpgradeItem.Cost 20000; }}	// Unlimited spawning
Class D4RuneUpgrade4 : UpgradeItem				{ Default { UpgradeItem.Cost 10000; }}	// Damage restores health
Class D4PentagramUpgrade1 : UpgradeItem			{ Default { UpgradeItem.Cost 6666; }}	// Reflect projectiles
Class D4PentagramUpgrade2 : UpgradeItem			{ Default { UpgradeItem.Cost 6666; }}	// Move through monsters
Class D4PentagramUpgrade3 : UpgradeItem			{ Default { UpgradeItem.Cost 6666; }}	// Thorns
Class D4PentagramUpgrade4 : UpgradeItem			{ Default { UpgradeItem.Cost 9999; }}	// Unkillable
Class D4HasteUpgrade1 : UpgradeItem				{ Default { UpgradeItem.Cost 11000; }}	// Invisibility
Class D4HasteUpgrade2 : UpgradeItem				{ Default { UpgradeItem.Cost 11000; }}	// Triple speed
Class D4QuadUpgrade1 : UpgradeItem				{ Default { UpgradeItem.Cost 15000; }}	// Combine quad + berserk
Class D4QuadUpgrade2 : UpgradeItem				{ Default { UpgradeItem.Cost 15000; 
														DamageFactor "Normal", 5.0;	}}	// Penta damage

extend class BFGUpgrade1
{
	// Up the max amount.
	override void UpdateItem()
	{
		if (Owner)
		{
			let inv = Ammo(Owner.FindInventory("D4BFGAmmo"));
			if (inv)
			{
				inv.MaxAmount = inv.Default.MaxAmount + Amount;
				inv.InterHubAmount = inv.Default.InterHubAmount + Amount;
				inv.BackpackMaxAmount = inv.Default.BackpackMaxAmount + Amount;
			}
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			let inv = Ammo(Owner.FindInventory("D4BFGAmmo"));
			if (inv)
			{
				inv.MaxAmount = inv.Default.MaxAmount;
				inv.InterHubAmount = inv.Default.InterHubAmount;
				inv.BackpackMaxAmount = inv.Default.BackpackMaxAmount;
			}
		}
		Super.DepleteOrDestroy();
	}
}

extend class CrucibleUpgradeBattery
{
	const Amt = 3;
	// Up the max amount.
	override void UpdateItem()
	{
		if (Owner)
		{
			let inv = Ammo(Owner.FindInventory("DECrucibleAmmo"));
			if (inv)
			{
				inv.MaxAmount = inv.Default.MaxAmount + Amt;
				inv.InterHubAmount = inv.Default.InterHubAmount + Amt;
				inv.BackpackMaxAmount = inv.Default.BackpackMaxAmount + Amt;
			}
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			let inv = Ammo(Owner.FindInventory("DECrucibleAmmo"));
			if (inv)
			{
				inv.MaxAmount = inv.Default.MaxAmount;
				inv.InterHubAmount = inv.Default.InterHubAmount;
				inv.BackpackMaxAmount = inv.Default.BackpackMaxAmount;
			}
		}
		Super.DepleteOrDestroy();
	}
}

extend Class D4QuadUpgrade1
{
	override bool TryPickup(in out Actor toucher)
	{
		bool res = Super.TryPickup(toucher);
		if (res && toucher.FindInventory("PowerD4QuadDamage"))
			toucher.A_GiveInventory("D4DBerserk",1);
		
		ConvertBerserkToQuad();
		return res;
	}
	
	override void Travelled()
	{
		ConvertBerserkToQuad();
		Super.Travelled();
	}
	
	void ConvertBerserkToQuad()
	{
		let it = ThinkerIterator.Create("D4DBerserk", STAT_DEFAULT);
		D4DBerserk mo;
		while (mo = D4DBerserk(it.Next(true)))
		{
			if (mo.Owner)	continue;
			D4DHandler.ConvertBerserkToQuad(mo);
		}
	}
}

//==============================================================================
/*
Class D4UpgradeDrone : Actor
{
	MC_Quaternion SpinAngle, SpinTilt;
	Default
	{
		Health 1;
		Monster;
		-COUNTKILL
		+NOGRAVITY
		+DONTTHRUST
		+NOBLOOD
		+DONTGIB
		+DONTBLAST
		+NOICEDEATH
		-SOLID
		+DONTDRAIN
		+NEVERTARGET
		+NOPAIN
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (mod == 'Melee' || mod == 'BerserkKill')
		{
			bDONTTHRUST = false;
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		}
		return damage;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		return false;
	}
	
	
	
	States
	{
	Spawn:
		D4DR A -1;
	Death:
		---- A 0
		{
			SpinAngle.InitFromAngles(angle, pitch, roll);
			SpinTilt.InitFromAngles(angle, pitch, roll);
		}
		#### ABCDEFGHI 1
		{
			// Something goes here between this and the multiplying part. But that's
			// what I don't know about. THIS is the section where help is required.
			//
			// SpinTilt will be the tilt that must be done first, then the angle.
			
			
			MC_Quaternion Combined = SpinAngle.MultiplyQuat(SpinTilt);
			[angle, pitch, roll] = Combined.ToAngles();
		}
		---- A 1
		{
		}
		---- A 50;
		Stop;
	}
}*/