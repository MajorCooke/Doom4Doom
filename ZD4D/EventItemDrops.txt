//==============================================================================
//
// D4D Loot Definitions
//
// The base class for defining crates/cash/upgrade drops.
// 
//==============================================================================

Class D4LootService : Service
{
	
}

Class D4LootContainer play
{
	private Array<D4LootDef> Defs;
	
	// Start-up functions.
	static D4LootContainer Create()
	{
		let con = new('D4LootContainer').Init();
		return con;
	}
	
	protected D4LootContainer Init()
	{
		Defs.Clear();
		
		
		
		return self;
	}
	
	void SetEntry(String cls, 
		int CrateDropChance, int CrateDropAmount = 0, int CrateDropAlways = 0,
		int CashAmount = -1, int CashChainsawPinata = -1,
		int UpgradeDropChance = -1, int UpgradeDropAlways = -1,
		int RunePowerMin = 0, int RunePowerMax = 7,
		bool Parent = false, bool Replacee = true)
	{
		Class<Actor> ClassName = cls;
		if (!ClassName)	return;
		
		if (RunePowerMin > RunePowerMax)
		{
			int temp = RunePowerMax;
			RunePowerMax = RunePowerMin;
			RunePowerMin = temp;
		}
		
		RunePowerMin = Clamp(RunePowerMin, 0, 7);
		RunePowerMax = Clamp(RunePowerMax, 0, 7);
		
		D4LootDef def;
		for (int i = 0; i < Defs.Size(); i++)
		{
			def = D4LootDef(Defs[i]);
			if (def && def.ClassName == ClassName)
			{
				def.CrateDropChance = CrateDropChance;
				def.CrateDropAmount = CrateDropAmount;
				def.CrateDropAlways = CrateDropAlways;
				def.CashAmount = CashAmount;
				def.CashChainsawPinata = CashChainsawPinata;
				def.UpgradeDropChance = UpgradeDropChance;
				def.UpgradeDropAlways = UpgradeDropAlways;
				def.RunePowerMin = RunePowerMin;
				def.RunePowerMax = RunePowerMax;
				def.Parent = Parent;
				def.Replacee = Replacee;
				return;
			}
			def = null;
		}
		
		if (!def)
		{
			def = D4LootDef.Create(ClassName, CrateDropChance, CrateDropAmount, CrateDropAlways,
				CashAmount, CashChainsawPinata, UpgradeDropChance, UpgradeDropAlways,
				RunePowerMin, RunePowerMax, Parent, Replacee);
			Defs.Push(def);
		}
	}
	
	D4LootDef FindEntry(String cls)
	{
		Class<Actor> check = cls;
		if (!check)	return null;
		for (int i = 0; i < Defs.Size(); i++)
		{
			let def = D4LootDef(Defs[i]);
			if (def && 
				(def.ClassName == check || 
				(def.Parent && check is def.ClassName) ||
				(def.Replacee && def.ClassName is Actor.GetReplacee(check))))
				return def;
			
		}
		return null;
	}
	
	bool DeleteEntry(String cls)
	{
		Class<Actor> ClassName = cls;
		for (int i = 0; i < Defs.Size(); i++)
		{
			if (!Defs[i])
				continue;
			if (Defs[i] && Defs[i].ClassName == ClassName)
			{
				Defs[i].Destroy();
				Defs[i] = null;
				return true;
			}
		}
		return false;
	}
}

Class D4LootDef play
{
	const DONT_USE = 0;
	bool 			Parent, Replacee;
	Class<Actor> 	ClassName;
	int			CrateDropChance, CrateDropAmount, CrateDropAlways,
					CashAmount, CashChainsawPinata,
					UpgradeDropChance, UpgradeDropAlways,
					RunePowerMin, RunePowerMax;
	
	
	protected D4LootDef Init()
	{
		ClassName = 			null;
		CrateDropChance = 		-1;
		CrateDropAmount =		0;
		CrateDropAlways =		0;
		CashAmount = 			-1;
		CashChainsawPinata = 	-1;
		UpgradeDropChance = 	-1;
		UpgradeDropAlways = 	0;
		RunePowerMin =			0;
		RunePowerMax =			7;
		return self;
	}
		
	static D4LootDef Create( Class<Actor> ClassName, 
		int CrateDropChance, int CrateDropAmount, int CrateDropAlways,
		int CashAmount, int CashChainsawPinata,
		int UpgradeDropChance, int UpgradeDropAlways,
		int RunePowerMin, int RunePowerMax, 
		bool parent = true, bool replacee = true)
	{
		if (!ClassName)	return null;
		
		let loot = new('D4LootDef').Init();
		loot.ClassName = ClassName;
		loot.CrateDropChance = CrateDropChance;
		loot.CrateDropAmount = CrateDropAmount;
		loot.CrateDropAlways = CrateDropAlways;
		loot.CashAmount = CashAmount;
		loot.CashChainsawPinata = CashChainsawPinata;
		loot.UpgradeDropChance = UpgradeDropChance;
		loot.UpgradeDropAlways = UpgradeDropAlways;
		loot.RunePowerMin = RunePowerMin;
		loot.RunePowerMax = RunePowerMax;
		loot.Parent = parent;
		loot.Replacee = replacee;
		return loot;
	}
	
	void SetCrateDrops(int CrateDropChance, int CrateDropAmount, int CrateDropAlways)
	{
		if (CrateDropChance >= 0)	self.CrateDropChance = CrateDropChance;
		if (CrateDropAmount >= 0)	self.CrateDropAmount = CrateDropAmount;
		if (CrateDropAlways >= 0)	self.CrateDropAlways = CrateDropAlways;
	}
	
	void SetCashDrops(int CashAmount, int CashChainsawPinata)
	{
		if (CashAmount >= 0)		self.CashAmount = 			CashAmount;
		if (CashChainsawPinata)		self.CashChainsawPinata = 	CashChainsawPinata;
	}
	
	void SetUpgradeDrops(int UpgradeDropChance, int UpgradeDropAlways)
	{
		if (UpgradeDropChance)		self.UpgradeDropChance = UpgradeDropChance;
		if (UpgradeDropAlways)		self.UpgradeDropAlways = UpgradeDropAlways;
	}
	
	void SetRunePowers(int RunePowerMin, int RunePowerMax)
	{
		if (RunePowerMin > RunePowerMax)
		{
			int temp = RunePowerMin;
			RunePowerMin = RunePowerMax;
			RunePowerMax = temp;
		}
		//MaxRunePower is defined in Constants.txt
		self.RunePowerMin = Clamp(RunePowerMin, 0, MaxRunePower);
		self.RunePowerMax = Clamp(RunePowerMax, 0, MaxRunePower);
	}
	
	// The parameters are merely there to remind me of the order.
	int, int, int GetCrateDrops(int Chance = DONT_USE, int Amount = DONT_USE, int Always = DONT_USE)
	{	return CrateDropChance, CrateDropAmount, CrateDropAlways;	}
	
	int, int GetCashDrops(int Amount = DONT_USE, int ChainsawPinata = DONT_USE)
	{	return CashAmount, CashChainsawPinata;	}
	
	int, int GetUpgradeDrops(int Chance = DONT_USE, int Always = DONT_USE)
	{	return UpgradeDropChance, UpgradeDropAlways;	}
	
	int, int GetRunePowerThreshold(int Minimum = DONT_USE, int Maximum = DONT_USE)
	{	return RunePowerMin, RunePowerMax;	}
	
}

extend class D4DHandler
{
	Class<Actor> GetRune(Actor mon)
	{
		if (!mon)	return null;
		
		Class<Actor> check = Actor.GetReplacee(mon.GetClass());
		/*
		if (D4D_PrintDebug == 1)
		{
			if (check)	Console.Printf("D4D: %s replaces %s", mon.GetClassName(), check.GetClassName());
			else		Console.Printf("D4D: %s replaces nothing", mon.GetClassName());
		}
		*/
		if (D4D_DemonRunes < 1) return null;
		
		int rarity = D4D_DemonRunes;
		int upgrade = mon.CountInv("D4MonsterUpgrader");
		int id = 0;
		
		static const Class<Actor> Replaced[] =
		{
			'HellKnight',			// Must come first because it inherits from the Baron.
			'BaronOfHell',			
			'Revenant',				
			'Cacodemon',			
			'Fatso',				
			'PainElemental',		
			'Cyberdemon',			
			'SpiderMastermind',		
			'Arachnotron',			
			'Archvile'				
		};
		
		static const Class<Actor> Runes[] =
		{
			'KnightRune',
			'BaronRune',
			'RevenantRune',
			'CacodemonRune',
			'FatsoRune',
			'PainElementalRune',
			'CyberdemonRune',
			'MastermindRune',
			'ArachnotronRune',
			'ArchvileRune'
		};
		
		static const int RuneDropChances[] =
		{
			RuneChance_Knight,
			RuneChance_Baron,
			RuneChance_Rev,
			RuneChance_Caco,
			RuneChance_Fatso,
			RuneChance_PainEl,
			RuneChance_Cyber,
			RuneChance_Master,
			RuneChance_Arach,
			RuneChance_Archie
		};
		
		Class<Actor> rep = null;
		int i = 0;
		for (i = 0; i < Replaced.Size(); i++)
		{
			if (check is Replaced[i] || mon is Replaced[i])
			{
				check = Replaced[i];
				rep = Runes[i];
				id = RuneDropChances[i];
				break;
			}
		}
		// No rune found.
		if (rep == null)
			return null;
		// Black and white monsters always drop demon runes.
		if (upgrade >= 6)	
			return rep;
			
		int originalID = id;
		id = Max(1, id - (upgrade * 2));
		
		// Give spider masterminds and cyberdemons special treatments since they
		// are the biggest monsters.
		int ch = 0;
		if (mon is 'SpiderMastermind' || mon is 'Cyberdemon' ||
			check is "SpiderMastermind" || check is "Cyberdemon")
		{
			// Only check for live ones.
			if (!MC)	MC = MCHandler.Fetch();
			int howmany = 1;
			int size = MC.Monsters.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mo = MC.Monsters.Actors[i];
				
				// If the monster is alive, and inherits/replaces the same
				// monster class as it does, with same status, count it.
				if (mo && check && mo.health > 0 && 
					(mo is check || mo.GetReplacee(mo.GetClass()) == check) 
					&& mo.CountInv("D4MonsterUpgrader") == upgrade)
				{
					if (howmany++ >= originalID)
						break;
				}
			}
			ch = random(1, Max(1, howmany / rarity));
			//Console.Printf("Chance: %d / %d -- %d", id, rarity, ch);
		}
		else if (rarity >= 2)		// Common
		{
			ch = random(1, (id / 2));
			//Console.Printf("Chance: %d / 2 -- %d", id, ch);
		}
		else if (rarity == 1) 	// Rare
		{
			ch = random(1, id);
			//Console.Printf("Chance: %d -- %d", id, ch);
		}
		return (ch == 1) ? rep : null;
	}
	
	bool DropPinatas(Actor mo, Actor inf = null)
	{
		// First, make sure it exists and it's a monster.
		// Abort if they're set to not drop anything.
		if (!mo || !mo.bISMONSTER || mo.bNOINTERACTION)	return false;
		int Restrictions = GetRestrictions(mo.GetClass());
		if (Restrictions >= RF_NOTHING)					return true;
		
		D4DropList Pinatas;
		bool Armor[4];		for (int i = 0; i < Armor.Size(); i++)	Armor[i] = false;
		bool HPPin = false;
		bool Bullets = false;
		bool Shells = false;
		bool Cells = false;
		bool Rockets = false;
		bool BFG = false;
		bool CashPower = false;
		int UpgradeDropChance = -1, UpgradeDropAlways = 0;
		int CrateDropChance = 0, CrateDropAmount = 0, CrateDropAlways = 0;
		int CashChainsawPinata = 0;
		int RunePowerMin = 0, RunePowerMax = 7;
		int CashAmount = 0;
		
		int CashMul = 1;
		int CrateAmt, CrateDrops;
		int LootDrop = D4D_LootDrop;
		int TotalMul = mo.CountInv("D4MonsterUpgrader");
		
		// Needed because the inventory is based on n + 1 (i.e. uncommon has 1 of the above, rare has 2, etc).
		if (TotalMul > 0)	
		{
			TotalMul++;
			CashMul *= TotalMul;
		}
		else TotalMul = 1;
		int Chance = Max(1,TotalMul);
		
		Vector3 pos = 	mo.pos;
		int spawnhp = 	mo.GetSpawnHealth();
		Name mod = 		mo.DamageTypeReceived;
		
		// Drop carrion if enabled and the monster can drop it, and if the
		// monster was gibbed.
		if (MPWeapons) 
		{
			if (!(Restrictions & RF_NOCARRION) &&
				(inf && 
					!inf.bNOEXTREMEDEATH &&
						(inf.bEXTREMEDEATH || 
						inf.DamageType == "Extreme" || 
						inf.DeathType == "Extreme")) ||
					(MOD == 'Extreme' ||
					MOD == 'BerserkKill' || 
					MOD == 'ChainsawKill' || 
					MOD == 'MeleePunch' ||
					MOD == 'GloryKill') ||
				(mo.InStateSequence(mo.CurState, mo.ResolveState("XDeath"))) ||
				(mo.health < mo.GetGibHealth()))
			{
				Pinatas.AddItem("D4PinataCarrion", 1 * TotalMul);
			}	
		}
		
		// First set up the base multiplier upon damage type when killed.
		if (MOD == 'Crucible')
		{
			CashMul *= 4;
			if (LootDrop && !(Restrictions & RF_NOHEALTH))
				Pinatas.AddItem("D4PinataHealth", 2); 
		}
		else if (MOD == 'ChainsawPinata')
		{
			CashMul *= 4;
			if (!(Restrictions & RF_NOBULLETS))	Pinatas.AddItem("D4PinataBulletsBig", 	LootDrop ? 4 : 1);
			if (!(Restrictions & RF_NOSHELLS))	Pinatas.AddItem("D4PinataShellsBig", 	LootDrop ? 4 : 1);
			if (!(Restrictions & RF_NOCELLS))	Pinatas.AddItem("D4PinataCellsBig", 	LootDrop ? 5 : 1);
			if (!(Restrictions & RF_NOROCKETS))	Pinatas.AddItem("D4PinataRocketsBig", 	LootDrop ? 3 : 1);
			
		}
		else if (MOD == 'BerserkKill' || 
				MOD == 'ChainsawKill' || 
				MOD == 'MeleePunch' ||
				MOD == 'GloryKill')
		{
			CashMul *= 2;
			if (LootDrop && !(Restrictions & RF_NOHEALTH))
				Pinatas.AddItem("D4PinataHealth", 5); 
		}
		
		// Now check to see if it's a D4D monster. If so, just use what's given.
		// If not, see if it's a manual loot table.
		// Otherwise, establish a formula based on health.
		let d4m = D4AbstractMonster(mo);
		Class<Actor> thing = mo.GetClass();
		
		//Is it manual? This is defined above (see D4bum example).
		// Find the thing and snag its contents, if it has any.
		let Loot = D4LootDef(LootList.FindEntry(mo.GetClassName()));
		if (Loot)
		{
			[CrateDropChance, CrateDropAmount, CrateDropAlways] = Loot.GetCrateDrops();
			[CashAmount, CashChainsawPinata] = Loot.GetCashDrops();
			[UpgradeDropChance, UpgradeDropAlways] = Loot.GetUpgradeDrops();
			
		}
		else if (d4m) // Not manually overridden -- D4D monster.
		{
			CrateDropChance = 		d4m.CrateDropChance;
			CrateDropAmount = 		d4m.CrateDropAmount;
			CrateDropAlways = 		d4m.CrateDropAlways;
			CashChainsawPinata = 	d4m.CashChainsawPinata;
			CashAmount = 			d4m.CashAmount;
			UpgradeDropChance =		d4m.UpgradeDropChance;
			UpgradeDropAlways =		d4m.UpgradeDropAlways;
			
		}
		else	// Neither D4D monster nor a manually added one.
		{
			if (CurrentUpgradeMode)
			{
				// For every 1000 health, guarantee a crate.
				// Otherwise, divide the HP by 20 and use that as a base chance.
				CrateDropAlways = int(floor(spawnhp / 1000));
				CrateDropChance = Max(1,spawnhp / 20) * (mo.bBOSS ? 2 : 1);
				if (CrateDropChance > 256)
				{
					CrateDropAmount = CrateDropChance / 256;
				}
			}
			else
			{
				CashAmount = spawnhp / (mo.bBOSS ? 12 : 15);
			}
		}
		
		Class<Actor> rune = GetRune(mo);
		if (rune)
		{
			let DRune = DemonRuneBase(mo.Spawn(rune, mo.pos, ALLOW_REPLACE));
			if (DRune)	DRune.OnDrop(mo);
		}
		
		// Now that the monster has been prepared, set up the drop chances for crates.
		if (!CurrentUpgradeMode)	// Credits
		{
			if (CashChainsawPinata > 0 && mod == 'ChainsawPinata')
			{
				CashAmount = CashChainsawPinata;
				CashMul = Max(1, TotalMul); // Only multiply if they are a colored monster.
			}
		}
		else	// Crates
		{
			// Cycle through the drop chances of each, excluding the always
			// dropping. If the chance is within valid ranges, just add to
			// amount that will always be given.
			if (!(Restrictions & RF_NOCRATES))
			{
				CrateDrops = CrateDropAmount * CashMul;
				if (CrateDrops > 0)
				{
					for (int i = 0; i < CrateDrops; i++)
					{
						if (random[drop](1,256) <= CrateDropChance)
							CrateDropAlways++;
					}
				}
			}
			// Drop some upgrades based on chance. UpgradeDropChance is the divisor,
			// inverse of how the crates work. 
			// 0 means no chance. 
			// 1 means guaranteed.
			// 2 means 1/2 chance, etc.
			
			
			if (!(Restrictions & RF_NOUPGRADES))
			{	
				bool Soviet = false;
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (!playeringame[i]) continue;
					let plr = players[i].mo;
					if (!plr)	continue;
					
					if (!CashPower && plr.CountInv("PowerD4Money"))
					{
						Chance *= 4;
						CashPower = true;
					}
				}
				
				
				bool AllowSleight = (UpgradeDropChance < 0);
				if (AllowSleight)	UpgradeDropChance = DefaultDropChance;
				
				// Black and white monsters always drop an upgrade.
				// White drops 2, black drops 1. This stacks in accumulation
				// with the rest of the drop chances.
				UpgradeDropAlways += Clamp(TotalMul - 5, 0, 2);
				
				int rng = 1;
				if (UpgradeDropChance > 0)
				{
					// Give a slight boost to enemies that are bosses as they're tougher.
					if (AllowSleight && mo.bBOSS)
					{
						if (UpgradeDropChance <= 10)
							UpgradeDropChance /= (mo.bBOSS ? 2 : 1);
						else
							UpgradeDropChance -= 10;
					}
					UpgradeDropChance /= (Max(1,Chance));
					UpgradeDropChance = Max(1,UpgradeDropChance);
					rng = random[drop](1, UpgradeDropChance);
					if (rng <= 1)
					{
						rng = 1;
						UpgradeDropAlways++;
					}
				}
				
				if (D4D_PrintDebug == 3)
					Console.Printf("Max: %d | RNG: %d", UpgradeDropChance, rng);
				
				// If we have something to drop, do it.
				if (UpgradeDropAlways > 0)
				{
					if (D4D_PrintDebug == 3)
						Console.Printf("Dropping %d upgrades from %s", UpgradeDropAlways, mo.GetClassName());
					for (int i = 0; i < UpgradeDropAlways; i++)
					{
						
						Actor item = mo.A_DropItem("D4UpgradePickupSpawner");
						if (item)	item.bDROPPED = true;
					}
				}
			}
		}
		
		if (CashPower)
			CashMul *= 4;
		
		// Iterate through each player to see who has the highest upgrades.
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			// No player, so skip it.
			if (!playeringame[i]) continue;
			let p = players[i].mo;
			if (!p)	continue;
		
			// Drop items first.
			if (mod != 'Massacre')
			{
				if (LootDrop)
				{
					if (!(Restrictions & RF_NOARMOR))
					{
						if (mod == 'ChainsawPinata')
						{
							// Armor
							if (!Armor[0] && p.CountInv("D4ArmorCapRaiser") >= 25)
							{
								Armor[0] = true;
								int rng[2];
								rng[0] = random[drop](1,256) > 128 ? 1 : 0;
								rng[1] = random[drop](1,256) > 128 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng[0] + rng[1]);
							}
							if (!Armor[1] && p.CountInv("D4ArmorCapRaiser") >= 50)
							{
								Armor[1] = true;
								int rng[2];
								rng[0] = random[drop](1,256) > 128 ? 1 : 0;
								rng[1] = random[drop](1,256) > 128 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng[0] + rng[1]);
							}
							if (!Armor[2] && p.CountInv("D4ArmorCapRaiser") >= 100)
							{
								Armor[2] = true;
								Pinatas.AddItem("D4PinataArmor", 2);
							}
						}
						else 
						{
							if (!Armor[3] && p.CountInv("BasicArmor") < 200 && p.CountInv("D4ArmorCapRaiser") >= 25)	//only if player isnt at full armor and has upgraded his armor
							{
								Armor[3] = true;
								int rng = random[drop](1,256) > 192 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng); //very rarely they will drop armor
							}
						}
					}
					//health giver
					if (!HPPin && !(Restrictions & RF_NOHEALTH) && p.health < 60)
					{
						HPPin = true;
						int rng = random[drop](1,256) > 192 ? 1 : 0;
						Pinatas.AddItem("D4PinataHealth", 1 + rng);
					}
					if (!(Restrictions & RF_NOREGAMMO))
					{
						//bullets giver
						if (!Bullets && !(Restrictions & RF_NOBULLETS) && 
							(p.CountInv("D4AssaultRifle") || 
							p.CountInv("D4Chaingun") ||
							p.CountInv("D4Repeater")) && 
							p.CountInv("D4Bullets") < 10)
						{
							Bullets = true;
							int rng[2];
							rng[0] = random[drop](1,256) > 128 ? 1 : 0;
							rng[1] = random[drop](1,256) > 240 ? 1 : 0;
							Pinatas.AddItem("D4PinataBullets", rng[0] + rng[1]);
						}
						
						//Shells giver
						if (!Shells && !(Restrictions & RF_NOSHELLS) &&
							(p.CountInv("D4Shotgun") || 
							p.CountInv("D4SuperShotgun")) && 
							p.CountInv("D4Shells") < 5)
						{
							Shells = true;
							int rng[2];
							rng[0] = random[drop](1,256) > 128 ? 1 : 0;
							rng[1] = random[drop](1,256) > 128 ? 1 : 0;
							Pinatas.AddItem("D4PinataShells", rng[0] + rng[1]);
						}
						
						//Cells giver
						if (!Cells && !(Restrictions & RF_NOCELLS) &&
							(p.CountInv("D4PlasmaRifle") ||
							p.CountInv("D4GaussCannon") ||
							p.CountInv("D4LightningGun")) && 
							p.CountInv("D4Cells") < 16)
						{
							Cells = true;
							int rng[2];
							rng[0] = random[drop](1,256) > 128 ? 1 : 0;
							rng[1] = random[drop](1,256) > 128 ? 1 : 0;
							Pinatas.AddItem("D4PinataCells", rng[0] + rng[1]);
						}
						//Rockets giver
						if (!Rockets && !(Restrictions & RF_NOROCKETS) &&
							(p.CountInv("D4RocketLauncher") || 
							p.CountInv("D4GrenadeLauncher")) &&
							p.CountInv("D4Rockets") < 5)
						{
							Rockets = true;
							int rng = random[drop](1,256) > 196 ? 1 : 0;
							Pinatas.AddItem("D4PinataRockets", rng);
						}
					}
					//BFG ammo giver, this one doesnt check for low ammo, but it does check for the weapon
					if (!BFG && !(Restrictions & RF_NOBFGAMMO) && 
						(p.CountInv("D4BFG") || p.CountInv('DEUnmakyr')))
					{
						BFG = true;
						if (random[drop](1,512) < 16)	Pinatas.AddItem("D4PinataBFG", 1);
					}
				}
			}
			
			// -------------------------------------------------------------
			// Drop the cash.
			// -------------------------------------------------------------
			// Crates
			p.SetInventory("D4DCashFake", 0);
			if (CurrentUpgradeMode)
			{
				if (!(Restrictions & RF_NOCRATES) && CrateDropAlways > 0)
				{	// The multiplier is already calculated above so do nothing else.
					p.A_GiveInventory("D4DCash",		CrateDropAlways);
				}
			}
			else // Credits
			{
				if (!(Restrictions & RF_NOCREDITS) && CashAmount > 0)
				{
					int OldMul = CashMul;
					CashMul *= p.CountInv("PowerD4Money") ? 4 : 1;
					int CPB1 = p.CountInv("CashPercentBonus");
					int CPB2 = p.CountInv("CashPercentBonusTemp");
					
					double CashAmtPercent = CashAmount * (CPB1 + CPB2);
					CashAmount = (CashAmount + (CashAmtPercent / 100)) * CashMul;
					p.A_GiveInventory("D4DCash",		CashAmount);
					CashMul = oldmul;
				}
			}
		}
		
		if (TotalMul > 0)	
			Pinatas.Multiply(TotalMul);
		Pinatas.DropItemsPos(pos);
		return true;
	}
}